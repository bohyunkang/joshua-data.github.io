<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-08-12T00:40:55+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Joshua Kim</title><subtitle>Analytics Engineer | Data Analyst</subtitle><entry><title type="html">데이터 기반 VOC 분석 및 자동화 대시보드 구축: 비용 절감과 효율성 극대화</title><link href="http://localhost:4000/voc-dashboard-ko/" rel="alternate" type="text/html" title="데이터 기반 VOC 분석 및 자동화 대시보드 구축: 비용 절감과 효율성 극대화" /><published>2024-07-20T00:00:00+09:00</published><updated>2024-07-20T00:00:00+09:00</updated><id>http://localhost:4000/voc-dashboard-ko</id><content type="html" xml:base="http://localhost:4000/voc-dashboard-ko/"><![CDATA[<blockquote>
  <p>“사내 구성원 분들이 젠데스크 고객 문의 내역 팔로업에 어려움을 겪고 있다는 사실을 공유 받아, 이를 해결하기 위해 Redash VOC 대시보드를 구축했습니다. 젠데스크 데이터를 자동으로 수집하고 전처리한 후, OpenAI API를 활용해 고객 문의 내역을 주제별로 분류하고 요약했습니다. 추가적으로, 매주 월요일마다 가장 많이 증가한 문의 주제를 슬랙으로 알림을 보내어, 고객 이슈를 효율적으로 식별하고 대응할 수 있도록 기여했습니다. 결과적으로 매월 약 $275 기회 비용을 제거할 수 있었으며, 사내 구성원 분들의 VOC 팔로업 시간을 감소시키는 성과를 얻었습니다.”</p>
</blockquote>

<hr />

<h1 id="목차">목차</h1>
<ol>
  <li>STAR Summary</li>
  <li>Situation</li>
  <li>Tasks</li>
  <li>Actions</li>
  <li>Results</li>
</ol>

<hr />

<h1 id="1-star-summary">1. STAR Summary</h1>

<h3 id="situation">Situation</h3>
<ul>
  <li>사내 구성원 분들이 젠데스크 고객 문의 내역을 효율적으로 추적하고 팔로업하는 데 어려움을 겪고 있었습니다. 모든 내역을 읽는 것은 지나치게 <strong>많은 시간과 노력</strong>을 요구했으며, 외부 VOC 분석 서비스를 도입하기에는 <strong>비용의 부담</strong>이 있었습니다.</li>
</ul>

<h3 id="tasks">Tasks</h3>
<ol>
  <li>고객 문의 내역의 <strong>주제를 분류하고 요약</strong>하여, Redash VOC <strong>대시보드</strong>를 만들기로 결정했습니다.</li>
  <li>가장 긴급한 고객 문의 주제를 알려주는 <strong>슬랙 알림 봇</strong>을 구축하기로 결정했습니다.</li>
</ol>

<h3 id="actions">Actions</h3>
<ol>
  <li>
    <p><strong>데이터 파이프라인</strong></p>

    <p>1.1. 데이터 수집 및 전처리 <code class="language-plaintext highlighter-rouge">(Zendesk Tickets → Google Sheets → BigQuery)</code></p>

    <p>1.2. 주제 분류 <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></p>

    <p>1.3. 요약하기 <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></p>
  </li>
  <li>
    <p><strong>대시보드와 알림 봇</strong></p>

    <p>2.1. 대시보드 만들기 <code class="language-plaintext highlighter-rouge">(BigQuery → Redash)</code></p>

    <p>2.2. 알림 봇 구축하기 <code class="language-plaintext highlighter-rouge">(BigQuery → Slack API)</code></p>
  </li>
</ol>

<h3 id="results">Results</h3>
<ol>
  <li><strong>비용 절약</strong>
    <ul>
      <li>월 $300 비용의 외부 서비스를 도입하지 않고도, 내부 개발을 통해 월 $25 비용 만으로 문제를 해소했습니다.</li>
    </ul>
  </li>
  <li><strong>시간 절감</strong>
    <ul>
      <li>사내 구성원 분들의 VOC 팔로업, 이슈 식별과 대응 속도를 향상시켰습니다.</li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="2-situation">2. Situation</h1>

<blockquote>
  <p>사내 구성원 분들이 젠데스크 고객 문의 내역을 효율적으로 추적하고 팔로업하는 데 어려움을 겪고 있었습니다. 모든 내역을 읽는 것은 지나치게 <strong>많은 시간과 노력</strong>을 요구했으며, 외부 VOC 분석 서비스를 도입하기에는 <strong>비용의 부담</strong>이 있었습니다.</p>
</blockquote>

<h3 id="구체적인-상황">구체적인 상황</h3>
<ul>
  <li>매주 수십-수백개의 고객 문의 내역을 일일이 팔로업하는 과정에서 너무 많은 시간이 소모되고 있었습니다.</li>
  <li>정확히 어떤 항목이 CX에 악영향을 끼치고 있는지 흐름을 파악하기 어려웠습니다.</li>
</ul>

<h3 id="사내-구성원-분들의-말말말">사내 구성원 분들의 말말말</h3>
<ul>
  <li><strong>임원 1</strong>: “주기적으로 문의 내역을 읽으며 고객의 감을 잡아가고 있는데, 양이 너무 많아 시간 소모가 커요.”</li>
  <li><strong>임원 2</strong>: “VOC 분석을 위한 외부 서비스를 도입하고 싶지만 가격이 너무 비싸서 고민하고 있어요.”</li>
  <li><strong>CX 담당자</strong>: “CX 및 VOC 현황을 좀 더 많은 동료들에게 공유하고, 이슈 대응 속도를 개선하고 싶어요.”</li>
</ul>

<hr />

<h1 id="3-tasks">3. Tasks</h1>

<blockquote>
  <ol>
    <li>고객 문의 내역의 <strong>주제를 분류하고 요약</strong>하여, Redash VOC <strong>대시보드</strong>를 만들기로 결정했습니다.</li>
    <li>가장 긴급한 고객 문의 주제를 알려주는 <strong>슬랙 알림 봇</strong>을 구축하기로 결정했습니다.</li>
  </ol>
</blockquote>

<p><img src="/assets/2024-07-20-voc-dashboard/1.png" alt="" /></p>

<hr />

<h1 id="4-actions">4. Actions</h1>

<blockquote>
  <ol>
    <li>
      <p><strong>데이터 파이프라인</strong></p>

      <p>1.1. 데이터 수집 및 전처리 <code class="language-plaintext highlighter-rouge">(Zendesk Tickets → Google Sheets → BigQuery)</code></p>

      <p>1.2. 주제 분류 <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></p>

      <p>1.3. 요약하기 <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></p>
    </li>
    <li>
      <p><strong>대시보드와 알림 봇</strong></p>

      <p>2.1. 대시보드 만들기 <code class="language-plaintext highlighter-rouge">(BigQuery → Redash)</code></p>

      <p>2.2. 알림 봇 구축하기 <code class="language-plaintext highlighter-rouge">(BigQuery → Slack API)</code></p>
    </li>
  </ol>
</blockquote>

<h3 id="1-데이터-파이프라인">1. <strong>데이터 파이프라인</strong></h3>

<p><img src="/assets/2024-07-20-voc-dashboard/2-ko.png" alt="" /></p>

<h5 id="11-데이터-수집-및-전처리-zendesk-tickets--google-sheets--bigquery">1.1. 데이터 수집 및 전처리 <code class="language-plaintext highlighter-rouge">(Zendesk Tickets → Google Sheets → BigQuery)</code></h5>

<p><img src="/assets/2024-07-20-voc-dashboard/3-ko.png" alt="" /></p>

<p>1) 먼저 Google Workspace Marketplace에서 제공하는 <strong>Zendesk Connector</strong>를 통해 답변이 완료된 젠데스크 티켓 데이터를 사내 비공개 구글 시트에 자동으로 저장될 수 있도록 설정했습니다.</p>

<p><img src="/assets/2024-07-20-voc-dashboard/4.png" alt="" /></p>

<p>2) Python에서 구글 시트 데이터를 로드했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># 구글 시트 Raw Data 불러오기 (to `df`)
</span>   <span class="n">gc</span> <span class="o">=</span> <span class="n">gspread</span><span class="p">.</span><span class="nf">service_account</span><span class="p">(</span><span class="n">google_sheets_credentials_fpath</span><span class="p">)</span>
   <span class="n">spreadsheet</span> <span class="o">=</span> <span class="n">gc</span><span class="p">.</span><span class="nf">open_by_url</span><span class="p">(</span><span class="n">google_sheets_url</span><span class="p">)</span>
   <span class="n">sheet</span> <span class="o">=</span> <span class="n">spreadsheet</span><span class="p">.</span><span class="nf">worksheet</span><span class="p">(</span><span class="n">google_sheets_worksheet_name</span><span class="p">)</span>
   <span class="n">sheet_data</span> <span class="o">=</span> <span class="n">sheet</span><span class="p">.</span><span class="nf">get_all_records</span><span class="p">()</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">sheet_data</span><span class="p">)</span>
</code></pre></div>    </div>
  </div>
</details>

<p>3) 그런 후, 데이터 전처리를 진행했습니다.</p>

<details>
<summary>필요한 칼럼만 필터링</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># 칼럼 이름 재정의하기
</span>   <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span>
      <span class="n">columns</span><span class="o">=</span><span class="p">{</span>
         <span class="sh">'</span><span class="s">created_at</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">,</span>
         <span class="sh">'</span><span class="s">raw_subject</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">,</span>
         <span class="sh">'</span><span class="s">tags.0</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">zendesk_topic</span><span class="sh">'</span><span class="p">,</span>
         <span class="sh">'</span><span class="s">updated_at</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">updated_datetime</span><span class="sh">'</span>
      <span class="p">}</span>
   <span class="p">)</span>
   <span class="c1"># 필요한 칼럼만 뽑아내기
</span>   <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[[</span>
      <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">zendesk_topic</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">description</span><span class="sh">'</span>
   <span class="p">]]</span>
</code></pre></div>    </div>
  </div>
</details>

<details>
<summary>시간대 변경 (UTC → KST)</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># 기존 타임스탬프: UTC to KST 변환해주기
</span>   <span class="n">kst</span> <span class="o">=</span> <span class="n">pytz</span><span class="p">.</span><span class="nf">timezone</span><span class="p">(</span><span class="sh">'</span><span class="s">Asia/Seoul</span><span class="sh">'</span><span class="p">)</span>
   <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">to_datetime</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">],</span> <span class="n">utc</span><span class="o">=</span><span class="bp">True</span><span class="p">).</span><span class="n">dt</span><span class="p">.</span><span class="nf">tz_convert</span><span class="p">(</span><span class="n">kst</span><span class="p">).</span><span class="n">dt</span><span class="p">.</span><span class="nf">tz_localize</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="nf">astype</span><span class="p">(</span><span class="sh">'</span><span class="s">str</span><span class="sh">'</span><span class="p">)</span> <span class="c1"># BigQuery에 Load할 때, 기본적으로 모두 String 타입이 되어야 하므로, 어쩔 수 없이 모두 String으로 Casting한다.
</span></code></pre></div>    </div>
  </div>
</details>

<details>
<summary>신규 항목들만 필터링</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># 이미 타겟 테이블에 존재하는 행을 제거해주기 (중복 방지)
</span>   <span class="n">query</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">SELECT DISTINCT id FROM `</span><span class="si">{</span><span class="n">bigquery_tickets_table_id</span><span class="si">}</span><span class="s">`</span><span class="sh">'</span>
   <span class="k">try</span><span class="p">:</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">])</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span>
         <span class="o">~</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">].</span><span class="nf">isin</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">)</span>
      <span class="p">].</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
   <span class="k">except</span><span class="p">:</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span>
</code></pre></div>    </div>
  </div>
</details>

<p>4) 마지막으로 BigQuery 테이블에 적재했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># 빅쿼리 테이블에 적재하기
</span>   <span class="n">table</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">get_table</span><span class="p">(</span><span class="n">bigquery_tickets_table_id</span><span class="p">)</span>
   <span class="n">client</span><span class="p">.</span><span class="nf">load_table_from_dataframe</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">table</span><span class="p">)</span>
</code></pre></div>    </div>
  </div>
</details>

<h5 id="12-주제-분류-openai-api">1.2. 주제 분류 <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></h5>

<p><img src="/assets/2024-07-20-voc-dashboard/5-ko.png" alt="" /></p>

<p>1) 분류할 주제 목록을 사전에 정의하기 위해, CX 담당자 및 UX/UI 디자이너 분과 함께 논의 후 분류 체계를 세웠습니다.</p>
<ul>
  <li><strong>Topic</strong>: 넓은 범주의 주제</li>
  <li><strong>Keyword</strong>: 구체적인 세부 주제</li>
</ul>

<p><img src="/assets/2024-07-20-voc-dashboard/6.png" alt="" /></p>

<p>2) Python에서 BigQuery 테이블의 데이터를 로드했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># BigQuery `tickets` 테이블 불러오기 (to `df`)
</span>   <span class="n">query</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">SELECT * FROM </span><span class="si">{</span><span class="n">bigquery_tickets_table_id</span><span class="si">}</span><span class="sh">'</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
</code></pre></div>    </div>
  </div>
</details>

<p>3) 그 중, 신규 항목들만 필터링했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># 이미 타겟 테이블에 존재하는 행을 제거해주기 (중복 제거)
</span>   <span class="n">query</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">SELECT DISTINCT id FROM `</span><span class="si">{</span><span class="n">bigquery_tickets_topics_table_id</span><span class="si">}</span><span class="s">`</span><span class="sh">'</span>
   <span class="k">try</span><span class="p">:</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">])</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span>
         <span class="o">~</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">].</span><span class="nf">isin</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">)</span>
      <span class="p">].</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
   <span class="k">except</span><span class="p">:</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span>
</code></pre></div>    </div>
  </div>
</details>

<p>4) OpenAI에 요청할 프롬프트를 작성했습니다.</p>

<details>
<summary>System Prompt</summary>
<div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   당신의 작업은 고객 문의 내역에서 하나의 핵심 키워드를 분류하는 것입니다.
   오로지 주어진 토픽 목록에서만 선택하여 응답해야 합니다.
   아래는 당신이 선택할 수 있는 토픽 목록입니다:
      {키워드 리스트}
   다른 토픽을 생성하거나 선택하지 마세요.
</code></pre></div>    </div>
  </div>
</details>

<details>
<summary>User Prompt</summary>
<div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   아래는 고객 문의 내역입니다.
   이 텍스트에서 하나의 핵심 토픽을 추출하세요.

   고객 문의 내역:
         {실제 텍스트}

   추출 형식: 토픽
   제한 사항: 
   1. 오로지 토픽으로만 응답하세요.
   2. 주어진 토픽 목록에서만 선택하세요. 다른 토픽을 생성하거나 선택하지 마세요.
   3. 반드시 아래 목록에서 하나를 선택하세요:
   {키워드 리스트} 

   추출 결과: 
</code></pre></div>    </div>
  </div>
</details>

<p>5) 각 티켓을 순회하며 OpenAI 주제 분류 작업을 진행했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># OpenAI에 요청할 시스템 프롬프트 정의하기
</span>   <span class="n">prompt_system</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'''</span><span class="s">
   당신의 작업은 고객 문의 내역에서 하나의 핵심 키워드를 분류하는 것입니다.
   오로지 주어진 토픽 목록에서만 선택하여 응답해야 합니다.
   아래는 당신이 선택할 수 있는 토픽 목록입니다:
   </span><span class="si">{</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">topics2_list</span><span class="p">)</span><span class="si">}</span><span class="s">
   다른 토픽을 생성하거나 선택하지 마세요.
   </span><span class="sh">'''</span>

   <span class="c1"># 각 행을 돌아가면서 OpenAI API Request 시작하기
</span>   <span class="n">topic2_results_list</span> <span class="o">=</span> <span class="p">[]</span>

   <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">df</span><span class="p">)):</span>

      <span class="c1"># 주제 + 본문
</span>      <span class="n">text</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="sh">'</span><span class="s"> </span><span class="sh">'</span> <span class="o">+</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="sh">'</span><span class="s">description</span><span class="sh">'</span><span class="p">]</span>
      <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">[:</span><span class="mi">2000</span><span class="p">]</span> <span class="c1"># 2,000개 길이로 제한 (비용 절약)
</span>
      <span class="c1"># 개별적으로 요청할 프롬프트 정의
</span>      <span class="n">prompt_individual</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'''</span><span class="s">
      아래는 고객 문의 내역입니다.
      이 텍스트에서 하나의 핵심 토픽을 추출하세요.

      고객 문의 내역:
      </span><span class="si">{</span><span class="n">text</span><span class="si">}</span><span class="s">

      추출 형식: 토픽
      제한 사항: 
      1. 오로지 토픽으로만 응답하세요.
      2. 주어진 토픽 목록에서만 선택하세요. 다른 토픽을 생성하거나 선택하지 마세요.
      3. 반드시 아래 목록에서 하나를 선택하세요:
      </span><span class="si">{</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">topics2_list</span><span class="p">)</span><span class="si">}</span><span class="s"> 

      추출 결과: 
      </span><span class="sh">'''</span>

      <span class="c1"># API Request 시작
</span>      <span class="n">result</span> <span class="o">=</span> <span class="n">openai_client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span> <span class="o">=</span> <span class="sh">'</span><span class="s">gpt-4</span><span class="sh">'</span><span class="p">,</span>
            <span class="n">max_tokens</span> <span class="o">=</span> <span class="mi">500</span><span class="p">,</span>
            <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
            <span class="n">temperature</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
            <span class="n">stop</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
            <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
               <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt_system</span><span class="p">},</span>
               <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt_individual</span><span class="p">}</span>
            <span class="p">]</span>
      <span class="p">)</span>

      <span class="c1"># 토픽 결과를 Empty Lists에 기록하기
</span>      <span class="n">topic2_result</span> <span class="o">=</span> <span class="n">result</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="se">\'</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="se">\"</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">[</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">]</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
      <span class="n">topic2_results_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">topic2_result</span><span class="p">)</span>

   <span class="c1"># 토픽 2 결과를 통해 토픽 1 결과도 기록하기
</span>   <span class="n">topic1_results_list</span> <span class="o">=</span> <span class="p">[]</span>
   <span class="k">for</span> <span class="n">topic2</span> <span class="ow">in</span> <span class="n">topic2_results_list</span><span class="p">:</span>
      <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">topics_list</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">topics_list</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">topic2</span><span class="p">:</span>
               <span class="n">topic1_results_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">topics_list</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
               <span class="k">break</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">topics_list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
               <span class="n">topic1_results_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">'</span><span class="s">Others</span><span class="sh">'</span><span class="p">)</span>
      
   <span class="c1"># df에 토픽 1, 토픽 2 칼럼을 추가하고, 필요한 칼럼만 뽑아내기
</span>   <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">openai_topic_1</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">topic1_results_list</span>
   <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">openai_topic_2</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">topic2_results_list</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[[</span>
      <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">openai_topic_1</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">openai_topic_2</span><span class="sh">'</span>
   <span class="p">]]</span>
</code></pre></div>    </div>
  </div>
</details>

<p>6) 마지막으로, 주제 분류 결과를 BigQuery 테이블에 적재했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># 빅쿼리 테이블에 적재하기
</span>   <span class="n">table</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">get_table</span><span class="p">(</span><span class="n">bigquery_tickets_topics_table_id</span><span class="p">)</span>
   <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">load_table_from_dataframe</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">table</span><span class="p">)</span>
</code></pre></div>    </div>
  </div>
</details>

<h5 id="13-요약하기-openai-api">1.3. 요약하기 <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></h5>

<p><img src="/assets/2024-07-20-voc-dashboard/7-ko.png" alt="" /></p>

<p>1) Python에서 BigQuery 테이블의 데이터를 로드했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># BigQuery `tickets` 테이블 불러오기 (to `df`)
</span>   <span class="n">query</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">SELECT * FROM </span><span class="si">{</span><span class="n">bigquery_tickets_table_id</span><span class="si">}</span><span class="sh">'</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
</code></pre></div>    </div>
  </div>
</details>

<p>2) 그 중, 신규 항목들만 필터링했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># 이미 타겟 테이블에 존재하는 행을 제거해주기 (중복 제거)
</span>   <span class="n">query</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">SELECT DISTINCT id FROM `</span><span class="si">{</span><span class="n">bigquery_tickets_summary_table_id</span><span class="si">}</span><span class="s">`</span><span class="sh">'</span>
   <span class="k">try</span><span class="p">:</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">])</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span>
         <span class="o">~</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">].</span><span class="nf">isin</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">)</span>
      <span class="p">].</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
   <span class="k">except</span><span class="p">:</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span>
</code></pre></div>    </div>
  </div>
</details>

<p>3) OpenAI에 요청할 프롬프트를 작성했습니다.</p>

<details>
<summary>System Prompt</summary>
<div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   당신의 작업은 고객 문의 내역을 한국어 한 문장으로 요약하는 것입니다.
   블록체인 하드웨어 및 앱 지갑 서비스 기업의 고객임을 기억하세요.
   요약은 반드시 한국어 한 문장으로 제공되어야 하며, 민감한 개인정보나 링크는 반드시 제거되어야 합니다.
</code></pre></div>    </div>
  </div>
</details>

<details>
<summary>User Prompt</summary>
<div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   아래는 고객 문의 내역입니다.
   이 텍스트를 한국어 하나의 문장으로 요약하세요.

   고객 문의 내역:
   {실제 텍스트}

   추출 형식: 한국어 한 문장
   제한 사항:
   1. 블록체인 하드웨어 및 앱 지갑 서비스 기업의 고객임을 기억하세요.
   2. 반드시 한국어로 요약하세요. (단, 번역이 불가능한 고유 단어는 영어 가능)
   3. 오로지 한 문장으로만 응답하세요.
   4. 민감한 개인정보는 반드시 제거하세요.
   
   추출 결과:  
</code></pre></div>    </div>
  </div>
</details>

<p>4) 각 티켓을 순회하며 OpenAI 요약 작업을 진행했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># OpenAI에 요청할 시스템 프롬프트 정의하기
</span>   <span class="n">prompt_system</span> <span class="o">=</span> <span class="sh">'''</span><span class="s">
   당신의 작업은 고객 문의 내역을 한국어 한 문장으로 요약하는 것입니다.
   블록체인 하드웨어 및 앱 지갑 서비스 기업의 고객임을 기억하세요.
   요약은 반드시 한국어 한 문장으로 제공되어야 하며, 민감한 개인정보나 링크는 반드시 제거되어야 합니다.
   </span><span class="sh">'''</span>

   <span class="c1"># 각 행을 돌아가면서 OpenAI API Request 시작하기
</span>   <span class="n">summaries_list</span> <span class="o">=</span> <span class="p">[]</span>

   <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">df</span><span class="p">)):</span>

      <span class="c1"># 주제 + 본문
</span>      <span class="n">text</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="sh">'</span><span class="s"> </span><span class="sh">'</span> <span class="o">+</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="sh">'</span><span class="s">description</span><span class="sh">'</span><span class="p">]</span>
      <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">[:</span><span class="mi">2000</span><span class="p">]</span> <span class="c1"># 2,000개 길이로 제한 (비용 절약)
</span>
      <span class="c1"># 개별적으로 요청할 프롬프트 정의
</span>      <span class="n">prompt_individual</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'''</span><span class="s">
      아래는 고객 문의 내역입니다.
      이 텍스트를 한국어 하나의 문장으로 요약하세요.

      고객 문의 내역:
      </span><span class="si">{</span><span class="n">text</span><span class="si">}</span><span class="s">

      추출 형식: 한국어 한 문장
      제한 사항:
      1. 블록체인 하드웨어 및 앱 지갑 서비스 기업의 고객임을 기억하세요.
      2. 반드시 한국어로 요약하세요. (단, 번역이 불가능한 고유 단어는 영어 가능)
      3. 오로지 한 문장으로만 응답하세요.
      4. 민감한 개인정보는 반드시 제거하세요. (예: 인적사항, 지갑주소, 연락처, 비밀번호, 개인키, 니모닉, 이메일 주소, IP 주소, URL, 소셜 미디어 계정 등)
      
      추출 결과: 
      </span><span class="sh">'''</span>

      <span class="c1"># API Request 시작
</span>      <span class="n">result</span> <span class="o">=</span> <span class="n">openai_client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span> <span class="o">=</span> <span class="sh">'</span><span class="s">gpt-4</span><span class="sh">'</span><span class="p">,</span>
            <span class="n">max_tokens</span> <span class="o">=</span> <span class="mi">200</span><span class="p">,</span>
            <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
            <span class="n">temperature</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
            <span class="n">stop</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
            <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
               <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt_system</span><span class="p">},</span>
               <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt_individual</span><span class="p">}</span>
            <span class="p">]</span>
      <span class="p">)</span>

      <span class="c1"># 토픽 결과를 Empty Lists에 기록하기
</span>      <span class="n">summary_result</span> <span class="o">=</span> <span class="n">result</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="se">\'</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="se">\"</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">[</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">]</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
      <span class="n">summaries_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">summary_result</span><span class="p">)</span>

   <span class="c1"># df에 요약 칼럼을 추가하고, 필요한 칼럼만 뽑아내기
</span>   <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">openai_summary</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">summaries_list</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[[</span>
      <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">openai_summary</span><span class="sh">'</span>
   <span class="p">]]</span>
</code></pre></div>    </div>
  </div>
</details>

<p>5) 마지막으로, 요약 결과를 BigQuery 테이블에 적재했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># 빅쿼리 테이블에 적재하기
</span>   <span class="n">table</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">get_table</span><span class="p">(</span><span class="n">bigquery_tickets_summary_table_id</span><span class="p">)</span>
   <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">load_table_from_dataframe</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">table</span><span class="p">)</span>
</code></pre></div>    </div>
  </div>
</details>

<h3 id="2-대시보드와-알림-봇">2. <strong>대시보드와 알림 봇</strong></h3>

<h5 id="21-대시보드-만들기-bigquery--redash">2.1. 대시보드 만들기 <code class="language-plaintext highlighter-rouge">(BigQuery → Redash)</code></h5>

<p>1) 다음 내용을 지닌 Redash 대시보드를 생성했습니다.</p>

<p><img src="/assets/2024-07-20-voc-dashboard/11.png" alt="" /></p>

<details>
<summary>Topic별 비율</summary>
<div>
    <p><img src="/assets/2024-07-20-voc-dashboard/12.png" alt="" /></p>
  </div>
</details>

<details>
<summary>Topic별 트렌드</summary>
<div>
    <p><img src="/assets/2024-07-20-voc-dashboard/13.png" alt="" /></p>
  </div>
</details>

<details>
<summary>Keyword별 트렌드</summary>
<div>
    <p><img src="/assets/2024-07-20-voc-dashboard/14.png" alt="" /></p>
  </div>
</details>

<details>
<summary>Keyword별 문의 요약</summary>
<div>
    <p><img src="/assets/2024-07-20-voc-dashboard/15.png" alt="" /></p>
  </div>
</details>

<details>
<summary>전체 데이터</summary>
<div>
    <p><img src="/assets/2024-07-20-voc-dashboard/16.png" alt="" /></p>
  </div>
</details>

<h5 id="22-알림-봇-구축하기-bigquery--slack-api">2.2. 알림 봇 구축하기 <code class="language-plaintext highlighter-rouge">(BigQuery → Slack API)</code></h5>

<p>1) 우선, BigQuery 쿼리문을 작성했습니다.</p>

<details>
<summary>전주에 고객 문의 수가 가장 많이 증가한 세부 주제(Keyword)를 추출 (전전주 대비)</summary>
<div>
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="k">WITH</span>
   <span class="n">CTE_1w_ago_raw</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">openai_topic_2</span><span class="p">,</span>
         <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">tickets_cnt</span>
      <span class="k">FROM</span>
         <span class="nv">`bigquery_tickets_topics_table_id`</span>
      <span class="k">WHERE</span>
         <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="n">DATE_ADD</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">(),</span> <span class="n">INTERVAL</span> <span class="o">-</span><span class="mi">1</span> <span class="n">WEEK</span><span class="p">),</span> <span class="n">WEEK</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="nb">DATE</span><span class="p">(</span><span class="n">created_datetime</span><span class="p">)</span>
         <span class="k">AND</span> <span class="nb">DATE</span><span class="p">(</span><span class="n">created_datetime</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">(),</span> <span class="n">WEEK</span><span class="p">)</span>
         <span class="k">AND</span> <span class="n">openai_topic_1</span> <span class="o">!=</span> <span class="s1">'Others'</span>
      <span class="k">GROUP</span> <span class="k">BY</span>
         <span class="mi">1</span>
   <span class="p">),</span>
   <span class="n">CTE_2w_ago_raw</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">openai_topic_2</span><span class="p">,</span>
         <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">tickets_cnt</span>
      <span class="k">FROM</span>
         <span class="nv">`bigquery_tickets_topics_table_id`</span>
      <span class="k">WHERE</span>
         <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="n">DATE_ADD</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">(),</span> <span class="n">INTERVAL</span> <span class="o">-</span><span class="mi">2</span> <span class="n">WEEK</span><span class="p">),</span> <span class="n">WEEK</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="nb">DATE</span><span class="p">(</span><span class="n">created_datetime</span><span class="p">)</span>
         <span class="k">AND</span> <span class="nb">DATE</span><span class="p">(</span><span class="n">created_datetime</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="n">DATE_ADD</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">(),</span> <span class="n">INTERVAL</span> <span class="o">-</span><span class="mi">1</span> <span class="n">WEEK</span><span class="p">),</span> <span class="n">WEEK</span><span class="p">)</span>
         <span class="k">AND</span> <span class="n">openai_topic_1</span> <span class="o">!=</span> <span class="s1">'Others'</span>
      <span class="k">GROUP</span> <span class="k">BY</span>
         <span class="mi">1</span>
   <span class="p">),</span>
   <span class="n">CTE_diff</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">COALESCE</span><span class="p">(</span><span class="n">MAIN</span><span class="p">.</span><span class="n">openai_topic_2</span><span class="p">,</span> <span class="n">COMP</span><span class="p">.</span><span class="n">openai_topic_2</span><span class="p">)</span> <span class="k">AS</span> <span class="n">openai_topic_2</span><span class="p">,</span>
         <span class="n">MAIN</span><span class="p">.</span><span class="n">tickets_cnt</span> <span class="k">AS</span> <span class="n">tickets_cnt_1w_ago</span><span class="p">,</span>
         <span class="n">COALESCE</span><span class="p">(</span><span class="n">COMP</span><span class="p">.</span><span class="n">tickets_cnt</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="k">AS</span> <span class="n">tickets_cnt_2w_ago</span><span class="p">,</span>
         <span class="n">COALESCE</span><span class="p">(</span><span class="n">MAIN</span><span class="p">.</span><span class="n">tickets_cnt</span> <span class="o">-</span> <span class="n">COMP</span><span class="p">.</span><span class="n">tickets_cnt</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="k">AS</span> <span class="n">tickets_cnt_diff</span>
      <span class="k">FROM</span>
         <span class="n">CTE_1w_ago_raw</span> <span class="n">MAIN</span>
      <span class="k">LEFT</span> <span class="k">JOIN</span>
         <span class="n">CTE_2w_ago_raw</span> <span class="n">COMP</span>
         <span class="k">ON</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">openai_topic_2</span> <span class="o">=</span> <span class="n">COMP</span><span class="p">.</span><span class="n">openai_topic_2</span>
   <span class="p">)</span>
   <span class="k">SELECT</span>
      <span class="n">openai_topic_2</span><span class="p">,</span>
      <span class="n">tickets_cnt_1w_ago</span><span class="p">,</span>
      <span class="n">tickets_cnt_2w_ago</span><span class="p">,</span>
      <span class="n">tickets_cnt_diff</span>
   <span class="k">FROM</span>
      <span class="n">CTE_diff</span>
   <span class="k">WHERE</span>
      <span class="n">tickets_cnt_diff</span> <span class="o">=</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">MAX</span><span class="p">(</span><span class="n">tickets_cnt_diff</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">CTE_diff</span><span class="p">)</span>
      <span class="k">AND</span> <span class="n">tickets_cnt_diff</span> <span class="o">&gt;</span> <span class="mi">0</span>
   <span class="k">ORDER</span> <span class="k">BY</span>
      <span class="mi">1</span>
</code></pre></div>    </div>
  </div>
</details>

<p>2) 슬랙 메시지 객체를 작성했습니다.</p>

<details>
<summary>코드 확인하기</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="n">df</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>

   <span class="c1"># Slack 메시지 제목 만들기
</span>   <span class="n">message</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">:phone: *Weekly Zendesk 요약* </span><span class="se">\n\n</span><span class="sh">'</span>
   <span class="n">message</span> <span class="o">+=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">*지난 1주 가장 많이 증가한 고객 문의 주제들입니다.* </span><span class="se">\n</span><span class="sh">'</span>

   <span class="c1"># 만약 데이터가 존재하는 경우
</span>   <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">df</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
      <span class="n">topics</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">openai_topic_2</span><span class="sh">'</span><span class="p">].</span><span class="nf">tolist</span><span class="p">()</span>
      <span class="n">tickets_cnt_1w_agos</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">tickets_cnt_1w_ago</span><span class="sh">'</span><span class="p">].</span><span class="nf">tolist</span><span class="p">()</span>
      <span class="n">tickets_cnt_diffs</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">tickets_cnt_diff</span><span class="sh">'</span><span class="p">].</span><span class="nf">tolist</span><span class="p">()</span>
      <span class="c1"># Slack 메시지 만들기
</span>      <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">topic</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">topics</span><span class="p">):</span>
         <span class="n">message</span> <span class="o">+=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">- *</span><span class="si">{</span><span class="n">topic</span><span class="si">}</span><span class="s">*: 총 </span><span class="si">{</span><span class="n">tickets_cnt_1w_agos</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">}</span><span class="s">건 (전주 대비 +</span><span class="si">{</span><span class="n">tickets_cnt_diffs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">}</span><span class="s">) </span><span class="se">\n</span><span class="sh">'</span>

   <span class="c1"># 만약 데이터가 존재하지 않는 경우
</span>   <span class="k">else</span><span class="p">:</span>
      <span class="n">message</span> <span class="o">+=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">- *증가한 주제가 하나도 없어요.*:smile: </span><span class="se">\n\n</span><span class="sh">'</span>
</code></pre></div>    </div>
  </div>
</details>

<p>3) 매주 월요일 9:00 AM KST에 다음과 같은 슬랙 알림이 발송되었습니다.</p>

<p><img src="/assets/2024-07-20-voc-dashboard/10-ko.png" alt="" /></p>

<hr />

<h1 id="5-results">5. Results</h1>

<blockquote>
  <ol>
    <li><strong>비용 절약</strong>
      <ul>
        <li>월 $300 비용의 외부 서비스를 도입하지 않고도, 내부 개발을 통해 월 $25 비용 만으로 문제를 해소했습니다.</li>
      </ul>
    </li>
    <li><strong>시간 절감</strong>
      <ul>
        <li>사내 구성원 분들의 VOC 팔로업, 이슈 식별과 대응 속도를 향상시켰습니다.</li>
      </ul>
    </li>
  </ol>
</blockquote>

<h3 id="1-비용-절약">1. <strong>비용 절약</strong></h3>

<p>결론) 내부 개발을 통해 매월 약 $275 기회 비용을 제거할 수 있었습니다.</p>

<table>
  <tbody>
    <tr>
      <td> </td>
      <td><strong>외부 VOC 분석 서비스</strong></td>
      <td><strong>내부 개발</strong></td>
    </tr>
    <tr>
      <td>월간 비용</td>
      <td><code class="language-plaintext highlighter-rouge">$300</code></td>
      <td><code class="language-plaintext highlighter-rouge">$25</code></td>
    </tr>
  </tbody>
</table>

<p>1) 외부 VOC 서비스</p>
<ul>
  <li>도입을 고려 중이었던 <a href="https://www.syncly.kr/">syncly</a>의 경우, 최소 월 $299의 비용이 요구되었습니다.</li>
</ul>

<p><img src="/assets/2024-07-20-voc-dashboard/8.png" alt="" /></p>

<p>2) 내부 개발</p>
<ul>
  <li>그러나 직접 내부 개발은 다음과 같은 비용이 요구되었습니다.</li>
</ul>

<table>
  <tbody>
    <tr>
      <td><strong>리소스</strong></td>
      <td><strong>월간 비용</strong></td>
    </tr>
    <tr>
      <td>1. OpenAI API</td>
      <td><code class="language-plaintext highlighter-rouge">$25</code></td>
    </tr>
    <tr>
      <td>2. BigQuery 스토리지</td>
      <td>거의 없음</td>
    </tr>
    <tr>
      <td>3. BigQuery 쿼리 사용</td>
      <td>미미함</td>
    </tr>
    <tr>
      <td>4. VM Instance 운영</td>
      <td>기존 인스턴스를 사용하므로 한계비용 적음</td>
    </tr>
    <tr>
      <td><strong>TOTAL</strong></td>
      <td><code class="language-plaintext highlighter-rouge">$25</code> + e</td>
    </tr>
  </tbody>
</table>

<p><img src="/assets/2024-07-20-voc-dashboard/9.png" alt="ㅇㅇㅇ" /></p>
<blockquote>
  <p>일별 OpenAI API 비용</p>
</blockquote>

<h3 id="2-시간-절감">2. <strong>시간 절감</strong></h3>

<p>1) Redash VOC 대시보드 (주제 분류)</p>
<ul>
  <li>사내 구성원 분들의 VOC 이슈 <u>식별 편의성</u>을 향상시켰습니다.</li>
</ul>

<p>2) Redash VOC 대시보드 (요약)</p>
<ul>
  <li>사내 구성원 분들의 VOC <u>팔로업 속도</u>를 향상시키고 VOC에 대한 <u>접근성</u>을 개선했습니다.</li>
</ul>

<p>3) 슬랙 알림 봇</p>
<ul>
  <li>매주 문의 수가 가장 많이 늘어난 주제를 사내 구성원 분들에게 공유함으로써, 이슈 <u>식별과 대응 속도</u>를 향상시키고 동일한 <u>맥락을 공유</u>하는 데 기여했습니다.</li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="Python" /><category term="BigQuery" /><category term="Redash" /><category term="Data Visualization" /><category term="LLM" /><summary type="html"><![CDATA[“사내 구성원 분들이 젠데스크 고객 문의 내역 팔로업에 어려움을 겪고 있다는 사실을 공유 받아, 이를 해결하기 위해 Redash VOC 대시보드를 구축했습니다. 젠데스크 데이터를 자동으로 수집하고 전처리한 후, OpenAI API를 활용해 고객 문의 내역을 주제별로 분류하고 요약했습니다. 추가적으로, 매주 월요일마다 가장 많이 증가한 문의 주제를 슬랙으로 알림을 보내어, 고객 이슈를 효율적으로 식별하고 대응할 수 있도록 기여했습니다. 결과적으로 매월 약 $275 기회 비용을 제거할 수 있었으며, 사내 구성원 분들의 VOC 팔로업 시간을 감소시키는 성과를 얻었습니다.”]]></summary></entry><entry><title type="html">Data-driven VOC Analysis and Automated Dashboard Development: Reducing Cost and Maximizing Efficiency</title><link href="http://localhost:4000/voc-dashboard-en/" rel="alternate" type="text/html" title="Data-driven VOC Analysis and Automated Dashboard Development: Reducing Cost and Maximizing Efficiency" /><published>2024-07-20T00:00:00+09:00</published><updated>2024-07-20T00:00:00+09:00</updated><id>http://localhost:4000/voc-dashboard-en</id><content type="html" xml:base="http://localhost:4000/voc-dashboard-en/"><![CDATA[<blockquote>
  <p>“I learned that internal team members were facing difficulties in following up on Zendesk customer inquiries, so I developed a Redash VOC dashboard to address this issue. The system automatically collected and preprocessed Zendesk data, then used the OpenAI API to categorize and summarize customer inquiries by topic. Additionally, a Slack notification was set up to alert the team each Monday about the topics with the highest increase in inquiries, helping identify and respond to customer issues more efficiently. As a result, we were able to eliminate about $275 in opportunity costs each month and reduce the time spent by team members on VOC follow-ups.”</p>
</blockquote>

<hr />

<h1 id="table-of-contents">Table of Contents</h1>
<ol>
  <li>STAR Summary</li>
  <li>Situation</li>
  <li>Tasks</li>
  <li>Actions</li>
  <li>Results</li>
</ol>

<hr />

<h1 id="1-star-summary">1. STAR Summary</h1>

<h3 id="situation">Situation</h3>
<ul>
  <li>Internal team members were struggling to efficiently track and follow up on Zendesk customer inquiries. Reading through all the inquiries required <strong>an excessive amount of time and effort</strong>, and implementing an external VOC analysis service posed <strong>a cost burden</strong>.</li>
</ul>

<h3 id="tasks">Tasks</h3>
<ol>
  <li>I decided to <strong>categorize and summarize</strong> customer inquiries and create a Redash VOC <strong>dashboard</strong>.</li>
  <li>I also decided to build <strong>a Slack notification bot</strong> to alert the team about the most urgent customer inquiry topics.</li>
</ol>

<h3 id="actions">Actions</h3>
<ol>
  <li>
    <p><strong>Data Pipeline</strong></p>

    <p>1.1. Data Collection and Preprocessing <code class="language-plaintext highlighter-rouge">(Zendesk Tickets → Google Sheets → BigQuery)</code></p>

    <p>1.2. Topic Categorization <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></p>

    <p>1.3. Summarization <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></p>
  </li>
  <li>
    <p><strong>Dashboard and Notification Bot</strong></p>

    <p>2.1. Creating the Dashboard <code class="language-plaintext highlighter-rouge">(BigQuery → Redash)</code></p>

    <p>2.2. Building the Notification Bot <code class="language-plaintext highlighter-rouge">(BigQuery → Slack API)</code></p>
  </li>
</ol>

<h3 id="results">Results</h3>
<ol>
  <li><strong>Cost Savings</strong>
    <ul>
      <li>We solved the problem internally at a cost of $25 per month, avoiding the need for an external service that would have cost $300 per month.</li>
    </ul>
  </li>
  <li><strong>Time Savings</strong>
    <ul>
      <li>The time required for internal team members to follow up on VOC, identify issues, and respond was significantly reduced.</li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="2-situation">2. Situation</h1>

<blockquote>
  <p>Internal team members were struggling to efficiently track and follow up on Zendesk customer inquiries. Reading through all the inquiries required <strong>an excessive amount of time and effort</strong>, and implementing an external VOC analysis service posed <strong>a cost burden</strong>.</p>
</blockquote>

<h3 id="specific-situation">Specific Situation</h3>
<ul>
  <li>It was taking too much time to follow up on dozens to hundreds of customer inquiries each week.</li>
  <li>It was challenging to identify which topics were negatively impacting the customer experience.</li>
</ul>

<h3 id="feedback-from-internal-team-members">Feedback from Internal Team Members</h3>
<ul>
  <li><strong>C-level 1</strong>: “I’m trying to stay on top of customer sentiment by regularly reading the inquiries, but there are just too many, and it’s very time-consuming.”</li>
  <li><strong>C-level 2</strong>: “I’d like to introduce an external service for VOC analysis, but the cost is too high, so we’re hesitant.”</li>
  <li><strong>CX Manager</strong>: “I want to share more VOC insights with colleagues and improve the speed of issue resolution.”</li>
</ul>

<hr />

<h1 id="3-tasks">3. Tasks</h1>

<blockquote>
  <ol>
    <li>I decided to <strong>categorize and summarize</strong> customer inquiries and create a Redash VOC <strong>dashboard</strong>.</li>
    <li>I also decided to build <strong>a Slack notification bot</strong> to alert the team about the most urgent customer inquiry topics.</li>
  </ol>
</blockquote>

<p><img src="/assets/2024-07-20-voc-dashboard/1.png" alt="" /></p>

<hr />

<h1 id="4-actions">4. Actions</h1>

<blockquote>
  <ol>
    <li>
      <p><strong>Data Pipeline</strong></p>

      <p>1.1. Data Collection and Preprocessing <code class="language-plaintext highlighter-rouge">(Zendesk Tickets → Google Sheets → BigQuery)</code></p>

      <p>1.2. Topic Categorization <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></p>

      <p>1.3. Summarization <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></p>
    </li>
    <li>
      <p><strong>Dashboard and Notification Bot</strong></p>

      <p>2.1. Creating the Dashboard <code class="language-plaintext highlighter-rouge">(BigQuery → Redash)</code></p>

      <p>2.2. Building the Notification Bot <code class="language-plaintext highlighter-rouge">(BigQuery → Slack API)</code></p>
    </li>
  </ol>
</blockquote>

<h3 id="1-data-pipeline">1. <strong>Data Pipeline</strong></h3>

<p><img src="/assets/2024-07-20-voc-dashboard/2-en.png" alt="" /></p>

<h5 id="11-data-collection-and-preprocessing-zendesk-tickets--google-sheets--bigquery">1.1. Data Collection and Preprocessing <code class="language-plaintext highlighter-rouge">(Zendesk Tickets → Google Sheets → BigQuery)</code></h5>

<p><img src="/assets/2024-07-20-voc-dashboard/3-en.png" alt="" /></p>

<p>1) First, I used the <strong>Zendesk Connector</strong> available from Google Workspace Marketplace to automatically store completed Zendesk ticket data in a private Google Sheet.</p>

<p><img src="/assets/2024-07-20-voc-dashboard/4.png" alt="" /></p>

<p>2) I then loaded the Google Sheets data into Python.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Load Raw Data from Google Sheets (to `df`)
</span>   <span class="n">gc</span> <span class="o">=</span> <span class="n">gspread</span><span class="p">.</span><span class="nf">service_account</span><span class="p">(</span><span class="n">google_sheets_credentials_fpath</span><span class="p">)</span>
   <span class="n">spreadsheet</span> <span class="o">=</span> <span class="n">gc</span><span class="p">.</span><span class="nf">open_by_url</span><span class="p">(</span><span class="n">google_sheets_url</span><span class="p">)</span>
   <span class="n">sheet</span> <span class="o">=</span> <span class="n">spreadsheet</span><span class="p">.</span><span class="nf">worksheet</span><span class="p">(</span><span class="n">google_sheets_worksheet_name</span><span class="p">)</span>
   <span class="n">sheet_data</span> <span class="o">=</span> <span class="n">sheet</span><span class="p">.</span><span class="nf">get_all_records</span><span class="p">()</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">sheet_data</span><span class="p">)</span>
</code></pre></div>    </div>
  </div>
</details>

<p>3) After that, I proceeded with data preprocessing.</p>

<details>
<summary>Filter Only Necessary Columns</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Rename Columns
</span>   <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span>
      <span class="n">columns</span><span class="o">=</span><span class="p">{</span>
         <span class="sh">'</span><span class="s">created_at</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">,</span>
         <span class="sh">'</span><span class="s">raw_subject</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">,</span>
         <span class="sh">'</span><span class="s">tags.0</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">zendesk_topic</span><span class="sh">'</span><span class="p">,</span>
         <span class="sh">'</span><span class="s">updated_at</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">updated_datetime</span><span class="sh">'</span>
      <span class="p">}</span>
   <span class="p">)</span>
   <span class="c1"># Extract Only Necessary Columns
</span>   <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[[</span>
      <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">zendesk_topic</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">description</span><span class="sh">'</span>
   <span class="p">]]</span>
</code></pre></div>    </div>
  </div>
</details>

<details>
<summary>Change Timezone (UTC → KST)</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Convert Existing Timestamps: UTC to KST
</span>   <span class="n">kst</span> <span class="o">=</span> <span class="n">pytz</span><span class="p">.</span><span class="nf">timezone</span><span class="p">(</span><span class="sh">'</span><span class="s">Asia/Seoul</span><span class="sh">'</span><span class="p">)</span>
   <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">to_datetime</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">],</span> <span class="n">utc</span><span class="o">=</span><span class="bp">True</span><span class="p">).</span><span class="n">dt</span><span class="p">.</span><span class="nf">tz_convert</span><span class="p">(</span><span class="n">kst</span><span class="p">).</span><span class="n">dt</span><span class="p">.</span><span class="nf">tz_localize</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="nf">astype</span><span class="p">(</span><span class="sh">'</span><span class="s">str</span><span class="sh">'</span><span class="p">)</span> <span class="c1"># To load into BigQuery, all columns must be cast as strings.
</span></code></pre></div>    </div>
  </div>
</details>

<details>
<summary>Filter Only New Entries</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Remove Rows Already in Target Table (Prevent Duplicates)
</span>   <span class="n">query</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">SELECT DISTINCT id FROM `</span><span class="si">{</span><span class="n">bigquery_tickets_table_id</span><span class="si">}</span><span class="s">`</span><span class="sh">'</span>
   <span class="k">try</span><span class="p">:</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">])</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span>
         <span class="o">~</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">].</span><span class="nf">isin</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">)</span>
      <span class="p">].</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
   <span class="k">except</span><span class="p">:</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span>
</code></pre></div>    </div>
  </div>
</details>

<p>4) Finally, I loaded the data into the BigQuery table.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Load Data into BigQuery Table
</span>   <span class="n">table</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">get_table</span><span class="p">(</span><span class="n">bigquery_tickets_table_id</span><span class="p">)</span>
   <span class="n">client</span><span class="p">.</span><span class="nf">load_table_from_dataframe</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">table</span><span class="p">)</span>
</code></pre></div>    </div>
  </div>
</details>

<h5 id="12-topic-categorization-openai-api">1.2. Topic Categorization <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></h5>

<p><img src="/assets/2024-07-20-voc-dashboard/5-en.png" alt="" /></p>

<p>1) To predefine the list of topics to be categorized, I discussed and established a classification system with a CX manager and a UX/UI designer.</p>

<ul>
  <li><strong>Topic</strong>: Broad subject categories</li>
  <li><strong>Keyword</strong>: Specific subtopics</li>
</ul>

<p><img src="/assets/2024-07-20-voc-dashboard/6.png" alt="" /></p>

<p>2) I loaded the data from the BigQuery table into Python.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Load BigQuery `tickets` Table (to `df`)
</span>   <span class="n">query</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">SELECT * FROM </span><span class="si">{</span><span class="n">bigquery_tickets_table_id</span><span class="si">}</span><span class="sh">'</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
</code></pre></div>    </div>
  </div>
</details>

<p>3) I then filtered out only new entries.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Remove Rows Already in Target Table (Prevent Duplicates)
</span>   <span class="n">query</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">SELECT DISTINCT id FROM `</span><span class="si">{</span><span class="n">bigquery_tickets_topics_table_id</span><span class="si">}</span><span class="s">`</span><span class="sh">'</span>
   <span class="k">try</span><span class="p">:</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">])</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span>
         <span class="o">~</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">].</span><span class="nf">isin</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">)</span>
      <span class="p">].</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
   <span class="k">except</span><span class="p">:</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span>
</code></pre></div>    </div>
  </div>
</details>

<p>4) I created the prompt to be sent to OpenAI.</p>

<details>
<summary>System Prompt</summary>
<div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   Your task is to classify a single key keyword from the customer inquiry details. You must respond by selecting only from the provided list of topics. Below is the list of topics you can choose from:
      {Keyword List}
   Do not create or select any other topics.
</code></pre></div>    </div>
  </div>
</details>

<details>
<summary>User Prompt</summary>
<div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   Below is the customer inquiry details.
   Extract a single key topic from this text.

   Customer Inquiry Details:
      {Actual Text}

   Extraction Format: Topic
   Restrictions:
   1. Respond with only the topic.
   2. Choose only from the provided list of topics. Do not create or select any other topics.
   3. Make sure to select one from the list below:
   {Keyword List}
   
   Extraction Result:
</code></pre></div>    </div>
  </div>
</details>

<p>5) I then obtained the main topic by calling the OpenAI API.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Define the system prompt for OpenAI
</span>   <span class="n">prompt_system</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'''</span><span class="s">
   Your task is to classify a single key keyword from the customer inquiry details. You must respond by selecting only from the provided list of topics. Below is the list of topics you can choose from:
   </span><span class="si">{</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">topics2_list</span><span class="p">)</span><span class="si">}</span><span class="s">
   Do not create or select any other topics.
   </span><span class="sh">'''</span>

   <span class="c1"># Start the OpenAI API Request for each row
</span>   <span class="n">topic2_results_list</span> <span class="o">=</span> <span class="p">[]</span>

   <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">df</span><span class="p">)):</span>

      <span class="c1"># Subject + Description
</span>      <span class="n">text</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="sh">'</span><span class="s"> </span><span class="sh">'</span> <span class="o">+</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="sh">'</span><span class="s">description</span><span class="sh">'</span><span class="p">]</span>
      <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">[:</span><span class="mi">2000</span><span class="p">]</span> <span class="c1"># Limit length to 2,000 characters (to save costs)
</span>
      <span class="c1"># Define the individual prompt for API Request
</span>      <span class="n">prompt_individual</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'''</span><span class="s">
      Below is the customer inquiry details.
      Extract a single key topic from this text.

      Customer Inquiry Details:
      </span><span class="si">{</span><span class="n">text</span><span class="si">}</span><span class="s">

      Extraction Format: Topic
      Restrictions:
      1. Respond with only the topic.
      2. Choose only from the provided list of topics. Do not create or select any other topics.
      3. Make sure to select one from the list below:
      </span><span class="si">{</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">topics2_list</span><span class="p">)</span><span class="si">}</span><span class="s"> 
      
      Extraction Result:
      </span><span class="sh">'''</span>

      <span class="c1"># Start the API Request
</span>      <span class="n">result</span> <span class="o">=</span> <span class="n">openai_client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span> <span class="o">=</span> <span class="sh">'</span><span class="s">gpt-4</span><span class="sh">'</span><span class="p">,</span>
            <span class="n">max_tokens</span> <span class="o">=</span> <span class="mi">500</span><span class="p">,</span>
            <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
            <span class="n">temperature</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
            <span class="n">stop</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
            <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
               <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt_system</span><span class="p">},</span>
               <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt_individual</span><span class="p">}</span>
            <span class="p">]</span>
      <span class="p">)</span>

      <span class="c1"># Record the topic results into Empty Lists
</span>      <span class="n">topic2_result</span> <span class="o">=</span> <span class="n">result</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="se">\'</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="se">\"</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">[</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">]</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
      <span class="n">topic2_results_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">topic2_result</span><span class="p">)</span>

   <span class="c1"># Record the 'Topic 1' results using 'Topic 2' results
</span>   <span class="n">topic1_results_list</span> <span class="o">=</span> <span class="p">[]</span>
   <span class="k">for</span> <span class="n">topic2</span> <span class="ow">in</span> <span class="n">topic2_results_list</span><span class="p">:</span>
      <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">topics_list</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">topics_list</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">topic2</span><span class="p">:</span>
               <span class="n">topic1_results_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">topics_list</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
               <span class="k">break</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">topics_list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
               <span class="n">topic1_results_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">'</span><span class="s">Others</span><span class="sh">'</span><span class="p">)</span>
      
   <span class="c1"># Add 'Topic 1' and 'Topic 2' columns to the dataframe and select only the necessary columns
</span>   <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">openai_topic_1</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">topic1_results_list</span>
   <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">openai_topic_2</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">topic2_results_list</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[[</span>
      <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">openai_topic_1</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">openai_topic_2</span><span class="sh">'</span>
   <span class="p">]]</span>
</code></pre></div>    </div>
  </div>
</details>

<p>6) Finally, the topic categorization results were loaded into a BigQuery table.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Load Data into BigQuery Table
</span>   <span class="n">table</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">get_table</span><span class="p">(</span><span class="n">bigquery_tickets_topics_table_id</span><span class="p">)</span>
   <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">load_table_from_dataframe</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">table</span><span class="p">)</span>
</code></pre></div>    </div>
  </div>
</details>

<h5 id="13-summarization-openai-api">1.3. Summarization <code class="language-plaintext highlighter-rouge">(OpenAI API)</code></h5>

<p><img src="/assets/2024-07-20-voc-dashboard/7-en.png" alt="" /></p>

<p>1) I loaded the data from the BigQuery table into Python.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Load BigQuery `tickets` Table (to `df`)
</span>   <span class="n">query</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">SELECT * FROM </span><span class="si">{</span><span class="n">bigquery_tickets_table_id</span><span class="si">}</span><span class="sh">'</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
</code></pre></div>    </div>
  </div>
</details>

<p>2) I then filtered out only new entries.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Remove Rows Already in Target Table (Prevent Duplicates)
</span>   <span class="n">query</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">SELECT DISTINCT id FROM `</span><span class="si">{</span><span class="n">bigquery_tickets_summary_table_id</span><span class="si">}</span><span class="s">`</span><span class="sh">'</span>
   <span class="k">try</span><span class="p">:</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
      <span class="n">existing_ids</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">])</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span>
         <span class="o">~</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">].</span><span class="nf">isin</span><span class="p">(</span><span class="n">existing_ids</span><span class="p">)</span>
      <span class="p">].</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
   <span class="k">except</span><span class="p">:</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">df</span>
</code></pre></div>    </div>
  </div>
</details>

<p>3) I created the prompt to be sent to OpenAI.</p>

<details>
<summary>System Prompt</summary>
<div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   our task is to summarize customer inquiry details into a single sentence in Korean.
   Keep in mind that the customer is from a blockchain hardware and app wallet service company.
   The summary must be provided in a single sentence in Korean, and sensitive personal information or links must be removed.
</code></pre></div>    </div>
  </div>
</details>

<details>
<summary>User Prompt</summary>
<div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Below is a customer inquiry.
      Summarize this text into a single sentence in Korean.

      Customer inquiry:
      {text}

      Format of extraction: One sentence in Korean
      Constraints:

      1. Remember that the customer is from a blockchain hardware and app wallet service company.
      2. Summarize in Korean only. (However, proper nouns that cannot be translated may remain in English.)
      3. Respond in only one sentence.
      4. Ensure that sensitive personal information is removed. (e.g., personal details, wallet addresses, contact information, passwords, private keys, mnemonic phrases, email addresses, IP addresses, URLs, social media accounts, etc.)

      Extraction result:
</code></pre></div>    </div>
  </div>
</details>

<p>4) I performed the OpenAI summarization task by iterating over each ticket.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Define the system prompt for OpenAI
</span>   <span class="n">prompt_system</span> <span class="o">=</span> <span class="sh">'''</span><span class="s">
   our task is to summarize customer inquiry details into a single sentence in Korean.
   Keep in mind that the customer is from a blockchain hardware and app wallet service company.
   The summary must be provided in a single sentence in Korean, and sensitive personal information or links must be removed.
   </span><span class="sh">'''</span>

   <span class="c1"># Start the OpenAI API Request for each row
</span>   <span class="n">summaries_list</span> <span class="o">=</span> <span class="p">[]</span>

   <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">df</span><span class="p">)):</span>

      <span class="c1"># Subject + Description
</span>      <span class="n">text</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="sh">'</span><span class="s">subject</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="sh">'</span><span class="s"> </span><span class="sh">'</span> <span class="o">+</span> <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="sh">'</span><span class="s">description</span><span class="sh">'</span><span class="p">]</span>
      <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">[:</span><span class="mi">2000</span><span class="p">]</span> <span class="c1"># Limit length to 2,000 characters (to save costs)
</span>
      <span class="c1"># Define the individual prompt for API Request
</span>      <span class="n">prompt_individual</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'''</span><span class="s">
      Below is a customer inquiry.
      Summarize this text into a single sentence in Korean.

      Customer inquiry:
      </span><span class="si">{</span><span class="n">text</span><span class="si">}</span><span class="s">

      Format of extraction: One sentence in Korean
      Constraints:

      1. Remember that the customer is from a blockchain hardware and app wallet service company.
      2. Summarize in Korean only. (However, proper nouns that cannot be translated may remain in English.)
      3. Respond in only one sentence.
      4. Ensure that sensitive personal information is removed. (e.g., personal details, wallet addresses, contact information, passwords, private keys, mnemonic phrases, email addresses, IP addresses, URLs, social media accounts, etc.)

      Extraction result:
      </span><span class="sh">'''</span>

      <span class="c1"># Start the API Request
</span>      <span class="n">result</span> <span class="o">=</span> <span class="n">openai_client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span> <span class="o">=</span> <span class="sh">'</span><span class="s">gpt-4</span><span class="sh">'</span><span class="p">,</span>
            <span class="n">max_tokens</span> <span class="o">=</span> <span class="mi">200</span><span class="p">,</span>
            <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
            <span class="n">temperature</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
            <span class="n">stop</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
            <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
               <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt_system</span><span class="p">},</span>
               <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt_individual</span><span class="p">}</span>
            <span class="p">]</span>
      <span class="p">)</span>

      <span class="c1"># Record the topic results into empty lists
</span>      <span class="n">summary_result</span> <span class="o">=</span> <span class="n">result</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="se">\'</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="se">\"</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">[</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">]</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
      <span class="n">summaries_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">summary_result</span><span class="p">)</span>

   <span class="c1"># Add the summary column to the dataframe and select only the required columns
</span>   <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">openai_summary</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">summaries_list</span>
   <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[[</span>
      <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">created_datetime</span><span class="sh">'</span><span class="p">,</span>
      <span class="sh">'</span><span class="s">openai_summary</span><span class="sh">'</span>
   <span class="p">]]</span>
</code></pre></div>    </div>
  </div>
</details>

<p>5) Finally, the summarized results were loaded into a BigQuery table.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1"># Load Data into BigQuery Table
</span>   <span class="n">table</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">get_table</span><span class="p">(</span><span class="n">bigquery_tickets_summary_table_id</span><span class="p">)</span>
   <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">load_table_from_dataframe</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">table</span><span class="p">)</span>
</code></pre></div>    </div>
  </div>
</details>

<h3 id="2-dashboard-and-notification-bot">2. <strong>Dashboard and Notification Bot</strong></h3>

<h5 id="21-creating-the-dashboard-bigquery--redash">2.1. Creating the Dashboard <code class="language-plaintext highlighter-rouge">(BigQuery → Redash)</code></h5>

<p>1) I created a Redash dashboard with the following contents.</p>

<p><img src="/assets/2024-07-20-voc-dashboard/11.png" alt="" /></p>

<details>
<summary>Proportion by Topic</summary>
<div>
    <p><img src="/assets/2024-07-20-voc-dashboard/12.png" alt="" /></p>
  </div>
</details>

<details>
<summary>Trends by Topic</summary>
<div>
    <p><img src="/assets/2024-07-20-voc-dashboard/13.png" alt="" /></p>
  </div>
</details>

<details>
<summary>Trends by Keyword</summary>
<div>
    <p><img src="/assets/2024-07-20-voc-dashboard/14.png" alt="" /></p>
  </div>
</details>

<details>
<summary>Summary of Inquiries by Keyword</summary>
<div>
    <p><img src="/assets/2024-07-20-voc-dashboard/15.png" alt="" /></p>
  </div>
</details>

<details>
<summary>All Datasets</summary>
<div>
    <p><img src="/assets/2024-07-20-voc-dashboard/16.png" alt="" /></p>
  </div>
</details>

<h5 id="22-building-the-notification-bot-bigquery--slack-api">2.2. Building the Notification Bot <code class="language-plaintext highlighter-rouge">(BigQuery → Slack API)</code></h5>

<p>1) First, I wrote a BigQuery query.</p>

<details>
<summary>Extracting the detailed topics (Keywords) with the most significant increase in customer inquiries from the previous week (compared to the week before)</summary>
<div>
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="k">WITH</span>
   <span class="n">CTE_1w_ago_raw</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">openai_topic_2</span><span class="p">,</span>
         <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">tickets_cnt</span>
      <span class="k">FROM</span>
         <span class="nv">`bigquery_tickets_topics_table_id`</span>
      <span class="k">WHERE</span>
         <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="n">DATE_ADD</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">(),</span> <span class="n">INTERVAL</span> <span class="o">-</span><span class="mi">1</span> <span class="n">WEEK</span><span class="p">),</span> <span class="n">WEEK</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="nb">DATE</span><span class="p">(</span><span class="n">created_datetime</span><span class="p">)</span>
         <span class="k">AND</span> <span class="nb">DATE</span><span class="p">(</span><span class="n">created_datetime</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">(),</span> <span class="n">WEEK</span><span class="p">)</span>
         <span class="k">AND</span> <span class="n">openai_topic_1</span> <span class="o">!=</span> <span class="s1">'Others'</span>
      <span class="k">GROUP</span> <span class="k">BY</span>
         <span class="mi">1</span>
   <span class="p">),</span>
   <span class="n">CTE_2w_ago_raw</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">openai_topic_2</span><span class="p">,</span>
         <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">tickets_cnt</span>
      <span class="k">FROM</span>
         <span class="nv">`bigquery_tickets_topics_table_id`</span>
      <span class="k">WHERE</span>
         <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="n">DATE_ADD</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">(),</span> <span class="n">INTERVAL</span> <span class="o">-</span><span class="mi">2</span> <span class="n">WEEK</span><span class="p">),</span> <span class="n">WEEK</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="nb">DATE</span><span class="p">(</span><span class="n">created_datetime</span><span class="p">)</span>
         <span class="k">AND</span> <span class="nb">DATE</span><span class="p">(</span><span class="n">created_datetime</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="n">DATE_ADD</span><span class="p">(</span><span class="k">CURRENT_DATE</span><span class="p">(),</span> <span class="n">INTERVAL</span> <span class="o">-</span><span class="mi">1</span> <span class="n">WEEK</span><span class="p">),</span> <span class="n">WEEK</span><span class="p">)</span>
         <span class="k">AND</span> <span class="n">openai_topic_1</span> <span class="o">!=</span> <span class="s1">'Others'</span>
      <span class="k">GROUP</span> <span class="k">BY</span>
         <span class="mi">1</span>
   <span class="p">),</span>
   <span class="n">CTE_diff</span> <span class="k">AS</span> <span class="p">(</span>
      <span class="k">SELECT</span>
         <span class="n">COALESCE</span><span class="p">(</span><span class="n">MAIN</span><span class="p">.</span><span class="n">openai_topic_2</span><span class="p">,</span> <span class="n">COMP</span><span class="p">.</span><span class="n">openai_topic_2</span><span class="p">)</span> <span class="k">AS</span> <span class="n">openai_topic_2</span><span class="p">,</span>
         <span class="n">MAIN</span><span class="p">.</span><span class="n">tickets_cnt</span> <span class="k">AS</span> <span class="n">tickets_cnt_1w_ago</span><span class="p">,</span>
         <span class="n">COALESCE</span><span class="p">(</span><span class="n">COMP</span><span class="p">.</span><span class="n">tickets_cnt</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="k">AS</span> <span class="n">tickets_cnt_2w_ago</span><span class="p">,</span>
         <span class="n">COALESCE</span><span class="p">(</span><span class="n">MAIN</span><span class="p">.</span><span class="n">tickets_cnt</span> <span class="o">-</span> <span class="n">COMP</span><span class="p">.</span><span class="n">tickets_cnt</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="k">AS</span> <span class="n">tickets_cnt_diff</span>
      <span class="k">FROM</span>
         <span class="n">CTE_1w_ago_raw</span> <span class="n">MAIN</span>
      <span class="k">LEFT</span> <span class="k">JOIN</span>
         <span class="n">CTE_2w_ago_raw</span> <span class="n">COMP</span>
         <span class="k">ON</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">openai_topic_2</span> <span class="o">=</span> <span class="n">COMP</span><span class="p">.</span><span class="n">openai_topic_2</span>
   <span class="p">)</span>
   <span class="k">SELECT</span>
      <span class="n">openai_topic_2</span><span class="p">,</span>
      <span class="n">tickets_cnt_1w_ago</span><span class="p">,</span>
      <span class="n">tickets_cnt_2w_ago</span><span class="p">,</span>
      <span class="n">tickets_cnt_diff</span>
   <span class="k">FROM</span>
      <span class="n">CTE_diff</span>
   <span class="k">WHERE</span>
      <span class="n">tickets_cnt_diff</span> <span class="o">=</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">MAX</span><span class="p">(</span><span class="n">tickets_cnt_diff</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">CTE_diff</span><span class="p">)</span>
      <span class="k">AND</span> <span class="n">tickets_cnt_diff</span> <span class="o">&gt;</span> <span class="mi">0</span>
   <span class="k">ORDER</span> <span class="k">BY</span>
      <span class="mi">1</span>
</code></pre></div>    </div>
  </div>
</details>

<p>2) I created a Slack message object.</p>

<details>
<summary>View Code</summary>
<div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="n">df</span> <span class="o">=</span> <span class="n">bigquery_client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>

   <span class="c1"># Slack Message Title
</span>   <span class="n">message</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">:phone: *Weekly Zendesk Summary* </span><span class="se">\n\n</span><span class="sh">'</span>
   <span class="n">message</span> <span class="o">+=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">*Here are the customer inquiry topics that increased the most in the past week.* </span><span class="se">\n</span><span class="sh">'</span>

   <span class="c1"># If data exists
</span>   <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">df</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
      <span class="n">topics</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">openai_topic_2</span><span class="sh">'</span><span class="p">].</span><span class="nf">tolist</span><span class="p">()</span>
      <span class="n">tickets_cnt_1w_agos</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">tickets_cnt_1w_ago</span><span class="sh">'</span><span class="p">].</span><span class="nf">tolist</span><span class="p">()</span>
      <span class="n">tickets_cnt_diffs</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">tickets_cnt_diff</span><span class="sh">'</span><span class="p">].</span><span class="nf">tolist</span><span class="p">()</span>
      <span class="c1"># Create Slack message
</span>      <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">topic</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">topics</span><span class="p">):</span>
         <span class="n">message</span> <span class="o">+=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">- *</span><span class="si">{</span><span class="n">topic</span><span class="si">}</span><span class="s">*: Total </span><span class="si">{</span><span class="n">tickets_cnt_1w_agos</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">}</span><span class="s"> cases (Compared to the previous week +</span><span class="si">{</span><span class="n">tickets_cnt_diffs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">}</span><span class="s">) </span><span class="se">\n</span><span class="sh">'</span>

   <span class="c1"># If no data exists
</span>   <span class="k">else</span><span class="p">:</span>
      <span class="n">message</span> <span class="o">+=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">- *There are no topics that increased.*:smile: </span><span class="se">\n\n</span><span class="sh">'</span>
</code></pre></div>    </div>
  </div>
</details>

<p>3) Every Monday at 9:00 AM, the following Slack notification was sent.</p>

<p><img src="/assets/2024-07-20-voc-dashboard/10-en.png" alt="" /></p>

<hr />

<h1 id="5-results">5. Results</h1>

<blockquote>
  <ol>
    <li><strong>Cost Savings</strong>
      <ul>
        <li>We solved the problem internally at a cost of $25 per month, avoiding the need for an external service that would have cost $300 per month.</li>
      </ul>
    </li>
    <li><strong>Time Savings</strong>
      <ul>
        <li>The time required for internal team members to follow up on VOC, identify issues, and respond was significantly reduced.</li>
      </ul>
    </li>
  </ol>
</blockquote>

<h3 id="1-cost-savings">1. <strong>Cost Savings</strong></h3>

<p>Conclusion)  By developing internally, we were able to eliminate approximately $275 in opportunity costs each month.</p>

<table>
  <tbody>
    <tr>
      <td> </td>
      <td><strong>External VOC Analysis Service</strong></td>
      <td><strong>Internal Development</strong></td>
    </tr>
    <tr>
      <td>Monthly Cost</td>
      <td><code class="language-plaintext highlighter-rouge">$300</code></td>
      <td><code class="language-plaintext highlighter-rouge">$25</code></td>
    </tr>
  </tbody>
</table>

<p>1) External VOC Analysis Service</p>
<ul>
  <li>The <a href="https://www.syncly.kr/">syncly</a> service we considered adopting required a minimum monthly cost of $299.</li>
</ul>

<p><img src="/assets/2024-07-20-voc-dashboard/8.png" alt="" /></p>

<p>2) Internal Development</p>
<ul>
  <li>However, internal development required the following costs:</li>
</ul>

<table>
  <tbody>
    <tr>
      <td><strong>Resource</strong></td>
      <td><strong>Monthly Cost</strong></td>
    </tr>
    <tr>
      <td>1. OpenAI API</td>
      <td><code class="language-plaintext highlighter-rouge">$25</code></td>
    </tr>
    <tr>
      <td>2. BigQuery Storage</td>
      <td>Minimal</td>
    </tr>
    <tr>
      <td>3. BigQuery Query Usage</td>
      <td>Negligible</td>
    </tr>
    <tr>
      <td>4. VM Instance Operation</td>
      <td>Minimal, as we used existing instances</td>
    </tr>
    <tr>
      <td><strong>TOTAL</strong></td>
      <td><code class="language-plaintext highlighter-rouge">$25</code> + e</td>
    </tr>
  </tbody>
</table>

<p><img src="/assets/2024-07-20-voc-dashboard/9.png" alt="ㅇㅇㅇ" /></p>
<blockquote>
  <p>Daily OpenAI API Costs</p>
</blockquote>

<h3 id="2-time-savings">2. <strong>Time Savings</strong></h3>

<p>1) Redash VOC Dashboard (Topic Categorization)</p>
<ul>
  <li>Improved <u>the ease of identifying</u> VOC issues for internal team members.</li>
</ul>

<p>2) Redash VOC Dashboard (Summarization)</p>
<ul>
  <li>Enhanced <u>the follow-up speed</u> on VOC and improved <u>accessibility</u> for internal team members.</li>
</ul>

<p>3) Slack Notification Bot</p>
<ul>
  <li>Improved issue <u>identification</u> and <u>response speed</u> by sharing the topics with the highest increase in inquiries with internal team members each week, contributing to <u>a shared understanding of the context</u>.</li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="Python" /><category term="BigQuery" /><category term="Redash" /><category term="Data Visualization" /><category term="LLM" /><summary type="html"><![CDATA[“I learned that internal team members were facing difficulties in following up on Zendesk customer inquiries, so I developed a Redash VOC dashboard to address this issue. The system automatically collected and preprocessed Zendesk data, then used the OpenAI API to categorize and summarize customer inquiries by topic. Additionally, a Slack notification was set up to alert the team each Monday about the topics with the highest increase in inquiries, helping identify and respond to customer issues more efficiently. As a result, we were able to eliminate about $275 in opportunity costs each month and reduce the time spent by team members on VOC follow-ups.”]]></summary></entry><entry><title type="html">Data Warehouse #14</title><link href="http://localhost:4000/data-warehouse-14/" rel="alternate" type="text/html" title="Data Warehouse #14" /><published>2024-01-14T00:00:00+09:00</published><updated>2024-01-14T00:00:00+09:00</updated><id>http://localhost:4000/data-warehouse-14</id><content type="html" xml:base="http://localhost:4000/data-warehouse-14/"><![CDATA[<blockquote>
  <p>In this article, I’ll summarize key takeaways from:</p>
  <ul>
    <li>SECTION 14. The Modern Data Warehouses</li>
  </ul>
</blockquote>

<h3 id="disclaimer">DISCLAIMER</h3>
<blockquote>
  <p>This article is a compilation of key takeaways after completing <a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Data Warehouse — The Ultimate Guide</a> on Udemy. However, it may be challenging to achieve a comprehensive and deep understanding of Data Warehouse solely through this article. For your in-depth learning, please take the course, which is an excellent resource, and I personally highly recommend it to those who are eager to master data warehousing, dimensional modeling, and the ETL process.</p>
</blockquote>

<p><img src="/assets/2023-12-19-data-warehouse-06/data-warehouse.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Source</a></p>
</blockquote>

<h1 id="cloud-vs-on-premise">Cloud vs. On-premise</h1>

<table>
  <thead>
    <tr>
      <th><strong>Cloud</strong></th>
      <th><strong>On-premise</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Fully Managed</td>
      <td>Full Control</td>
    </tr>
    <tr>
      <td>Scalable</td>
      <td>Data Governance &amp; Compliance</td>
    </tr>
    <tr>
      <td>Cost Efficiency ⬆️</td>
      <td>Cost Efficiency ⬇️</td>
    </tr>
    <tr>
      <td>Regulations</td>
      <td>Flexibility ⬇️</td>
    </tr>
  </tbody>
</table>

<p>In most cases, <strong>Cloud Data Warehouse</strong> is the better choice nowadays!</p>
<ul>
  <li>Snowflake</li>
  <li>Amazon Redshift</li>
  <li>Azure Synapse</li>
  <li>Google BigQuery</li>
</ul>

<h1 id="mpp-massive-parallel-processing">MPP (Massive Parallel Processing)</h1>

<p><img src="/assets/2024-01-14-data-warehouse-14/1.png" alt="" /></p>
<blockquote>
  <p><a href="https://www.tibco.com/reference-center/what-is-massively-parallel-processing">Source</a></p>
</blockquote>

<ul>
  <li><strong>“Shared Nothing”</strong> Architecture
    <ul>
      <li>Independent Resources</li>
      <li>The workload is split up &amp; processed individually.</li>
    </ul>
  </li>
  <li>The modern way of solving performance issues</li>
  <li>Millions of rows can be processed faster.</li>
  <li>Many people can run queries at the same time with good performance.</li>
  <li>Helpful with centralizing massive amounts of data</li>
</ul>

<h1 id="columnar-databases">Columnar Databases</h1>

<p><img src="/assets/2024-01-14-data-warehouse-14/2.png" alt="" /></p>
<blockquote>
  <p><a href="https://en.wikipedia.org/wiki/Column-oriented_DBMS">Source</a></p>
</blockquote>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>
	<span class="n">Lastname</span>
<span class="k">FROM</span>
	<span class="n">emp</span>
<span class="p">;</span>
</code></pre></div></div>

<h3 id="row-oriented-databases">Row-oriented Databases</h3>
<p><img src="/assets/2024-01-14-data-warehouse-14/3.png" alt="" /></p>
<blockquote>
  <p><a href="https://en.wikipedia.org/wiki/Column-oriented_DBMS">Source</a></p>
</blockquote>

<ul>
  <li>All have to be scanned.
    <ul>
      <li>Bad for fast data retrieval.</li>
    </ul>
  </li>
  <li>Good for Transactional Databases.</li>
</ul>

<h3 id="column-oriented-databases">Column-oriented Databases</h3>
<p><img src="/assets/2024-01-14-data-warehouse-14/4.png" alt="" /></p>
<blockquote>
  <p><a href="https://en.wikipedia.org/wiki/Column-oriented_DBMS">Source</a></p>
</blockquote>

<ul>
  <li>Less data needs to be processed.</li>
  <li>Better compression, Less storage</li>
</ul>

<p><img src="/assets/2024-01-14-data-warehouse-14/5.png" alt="" /></p>

<h1 id="tips">Tips</h1>

<ul>
  <li>Use Indexes
    <ul>
      <li>if you frequently want to retrieve less than 15% of the rows in a large table.</li>
      <li>If you frequently use joins to improve join performance.</li>
    </ul>
  </li>
  <li>Small tables do not require indexes.</li>
  <li>Wide Range of Values (<strong>High Cardinality</strong>) → Good for <strong>B-tree Indexes</strong></li>
  <li>Small Range of Values (<strong>Low Cardinality</strong>) → Good for <strong>Bitmap Indexes</strong></li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="SQL" /><category term="Data Warehouse" /><summary type="html"><![CDATA[In this article, I’ll summarize key takeaways from: SECTION 14. The Modern Data Warehouses]]></summary></entry><entry><title type="html">Data Warehouse #12-13</title><link href="http://localhost:4000/data-warehouse-12-13/" rel="alternate" type="text/html" title="Data Warehouse #12-13" /><published>2024-01-14T00:00:00+09:00</published><updated>2024-01-14T00:00:00+09:00</updated><id>http://localhost:4000/data-warehouse-12-13</id><content type="html" xml:base="http://localhost:4000/data-warehouse-12-13/"><![CDATA[<blockquote>
  <p>In this article, I’ll summarize key takeaways from:</p>
  <ul>
    <li>SECTION 12. Using a Data Warehouse</li>
    <li>SECTION 13. Optimizing a Data Warehouse</li>
  </ul>
</blockquote>

<h3 id="disclaimer">DISCLAIMER</h3>
<blockquote>
  <p>This article is a compilation of key takeaways after completing <a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Data Warehouse — The Ultimate Guide</a> on Udemy. However, it may be challenging to achieve a comprehensive and deep understanding of Data Warehouse solely through this article. For your in-depth learning, please take the course, which is an excellent resource, and I personally highly recommend it to those who are eager to master data warehousing, dimensional modeling, and the ETL process.</p>
</blockquote>

<p><img src="/assets/2023-12-19-data-warehouse-06/data-warehouse.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Source</a></p>
</blockquote>

<h1 id="using-indexes">Using Indexes</h1>

<p><img src="/assets/2024-01-14-data-warehouse-12-13/1.png" alt="" /></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>
	<span class="n">product_id</span>
<span class="k">FROM</span>
	<span class="n">sales</span>
<span class="k">WHERE</span>
	<span class="n">customer_id</span> <span class="o">=</span> <span class="mi">5</span>
</code></pre></div></div>

<h3 id="without-indexes">WITHOUT Indexes</h3>
<ul>
  <li>Table Scan</li>
  <li>Read Efficiency ⬇️</li>
  <li>Write Efficiency ⬆️</li>
</ul>

<h3 id="with-indexes">WITH Indexes</h3>
<ul>
  <li>Read Efficiency ⬆️</li>
  <li>Write Efficiency ⬇️</li>
  <li>How It Works:
    <ul>
      <li>Write Data in a Specific Order</li>
      <li>Create a Lookup Table (to find a pointer to read later)</li>
    </ul>
  </li>
</ul>

<p><img src="/assets/2024-01-14-data-warehouse-12-13/2.png" alt="" /></p>
<blockquote>
  <p>Write Data in a Specific Order</p>
</blockquote>

<p><img src="/assets/2024-01-14-data-warehouse-12-13/3.png" alt="" /></p>
<blockquote>
  <p>Create a Lookup Table</p>
</blockquote>

<p><img src="/assets/2024-01-14-data-warehouse-12-13/4.png" alt="" /></p>

<h1 id="b-tree-indexes">B-tree Indexes</h1>

<p><img src="/assets/2024-01-14-data-warehouse-12-13/5.png" alt="" /></p>
<blockquote>
  <p><a href="https://velog.io/@gayeong39/B-%ED%8A%B8%EB%A6%AC-%EC%9D%B8%EB%8D%B1%EC%8A%A4">Source</a></p>
</blockquote>

<ul>
  <li>Multi-level Tree Structure</li>
  <li>It breaks data down into pages or blocks.</li>
  <li>Columns should be High Cardinality</li>
  <li>Not Entire Table</li>
  <li>Storage Cost ⬆️</li>
</ul>

<h1 id="bitmap-indexes">Bitmap Indexes</h1>

<p><img src="/assets/2024-01-14-data-warehouse-12-13/6.png" alt="" /></p>
<blockquote>
  <p><a href="https://velog.io/@gayeong39/%EB%B9%84%ED%8A%B8%EB%A7%B5-%EC%9D%B8%EB%8D%B1%EC%8A%A4BitMap-Index">Source</a></p>
</blockquote>

<ul>
  <li>Particularly Good for Data Warehouses</li>
  <li>Columns should be <strong>Low Cardinality</strong> + <strong>Large Amounts of Data</strong></li>
  <li>Storage Cost ⬇️</li>
  <li>Read Optimization ⬆️</li>
  <li>DML Operation ⬆️</li>
</ul>

<h1 id="guidelines">Guidelines</h1>

<table>
  <thead>
    <tr>
      <th><strong>B-tree Index</strong></th>
      <th><strong>Bitmap Index</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Default Index</td>
      <td>Slow Update</td>
    </tr>
    <tr>
      <td>Unique Columns</td>
      <td>Storage Efficiency</td>
    </tr>
    <tr>
      <td>(Surrogate Key, Names)</td>
      <td>Read Performance ⬆️</td>
    </tr>
  </tbody>
</table>

<p><img src="/assets/2024-01-14-data-warehouse-12-13/7.png" alt="" /></p>

<h3 id="fact-tables">Fact Tables</h3>
<ul>
  <li>Choose Columns that are used as <code class="language-plaintext highlighter-rouge">Filters</code>.</li>
  <li>Surrogate Key → <strong>B-tree Index</strong></li>
  <li>Foreign Keys → <strong>Bitmap Index</strong></li>
</ul>

<h3 id="dimension-tables">Dimension Tables</h3>
<ul>
  <li>Are they used in searches a lot?</li>
  <li>Choose based on <code class="language-plaintext highlighter-rouge">Cardinality</code>.</li>
</ul>

<h3 id="create-index-examples">Create Index Examples</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">INDEX</span>
	<span class="n">index_name</span> <span class="k">ON</span> <span class="k">table_name</span> <span class="p">[</span><span class="k">USING</span> <span class="k">method</span><span class="p">]</span>
	<span class="p">(</span>
		<span class="k">column_name</span> <span class="p">[</span><span class="k">ASC</span> <span class="o">|</span> <span class="k">DESC</span><span class="p">],</span>
		<span class="p">...</span>
	<span class="p">)</span>
<span class="p">;</span>
</code></pre></div></div>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="SQL" /><category term="Data Warehouse" /><summary type="html"><![CDATA[In this article, I’ll summarize key takeaways from: SECTION 12. Using a Data Warehouse SECTION 13. Optimizing a Data Warehouse]]></summary></entry><entry><title type="html">Data Warehouse #10</title><link href="http://localhost:4000/data-warehouse-10/" rel="alternate" type="text/html" title="Data Warehouse #10" /><published>2024-01-13T00:00:00+09:00</published><updated>2024-01-13T00:00:00+09:00</updated><id>http://localhost:4000/data-warehouse-10</id><content type="html" xml:base="http://localhost:4000/data-warehouse-10/"><![CDATA[<blockquote>
  <p>In this article, I’ll summarize key takeaways from:</p>
  <ul>
    <li>SECTION 10. Case Study: Creating a Data Warehouse</li>
  </ul>
</blockquote>

<h3 id="disclaimer">DISCLAIMER</h3>
<blockquote>
  <p>This article is a compilation of key takeaways after completing <a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Data Warehouse — The Ultimate Guide</a> on Udemy. However, it may be challenging to achieve a comprehensive and deep understanding of Data Warehouse solely through this article. For your in-depth learning, please take the course, which is an excellent resource, and I personally highly recommend it to those who are eager to master data warehousing, dimensional modeling, and the ETL process.</p>
</blockquote>

<p><img src="/assets/2023-12-19-data-warehouse-06/data-warehouse.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Source</a></p>
</blockquote>

<h1 id="guidelines">Guidelines</h1>
<ol>
  <li>Look at the problem and plan</li>
  <li>Set up tables &amp; schema</li>
  <li>Staging</li>
  <li>Core (Dimension Tables)</li>
  <li>Core (Fact Tables)</li>
  <li>Set up Jobs &amp; Testing</li>
</ol>

<h1 id="fact-table-design">Fact Table Design</h1>
<ol>
  <li><code class="language-plaintext highlighter-rouge">date_FK</code></li>
  <li><code class="language-plaintext highlighter-rouge">product_FK</code></li>
  <li><code class="language-plaintext highlighter-rouge">payment_FK</code></li>
  <li>Additional Columns:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">total_price</code></li>
      <li><code class="language-plaintext highlighter-rouge">total_cost</code></li>
      <li><code class="language-plaintext highlighter-rouge">profit</code></li>
    </ul>
  </li>
</ol>

<p><img src="/assets/2024-01-13-data-warehouse-10/1.png" alt="" /></p>

<h1 id="processing-order">Processing Order</h1>

<p><img src="/assets/2024-01-13-data-warehouse-10/2.png" alt="" /></p>

<h3 id="source--staging">Source → Staging</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Extract</code>
    <ul>
      <li>Add Surrogate Key</li>
      <li>Delta Logic
        <h3 id="staging--core">Staging → Core</h3>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Transform</code> + <code class="language-plaintext highlighter-rouge">Load</code>
    <ul>
      <li>Clean Data</li>
      <li>Add Additional Columns</li>
    </ul>
  </li>
</ul>

<h1 id="scheduling">Scheduling</h1>
<ul>
  <li>Jobs or Packages</li>
  <li>Scheduling at:
    <ul>
      <li>Specific Times</li>
      <li>Frequencies</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="SQL" /><category term="Data Warehouse" /><summary type="html"><![CDATA[In this article, I’ll summarize key takeaways from: SECTION 10. Case Study: Creating a Data Warehouse]]></summary></entry><entry><title type="html">Data Warehouse #11</title><link href="http://localhost:4000/data-warehouse-11/" rel="alternate" type="text/html" title="Data Warehouse #11" /><published>2024-01-13T00:00:00+09:00</published><updated>2024-01-13T00:00:00+09:00</updated><id>http://localhost:4000/data-warehouse-11</id><content type="html" xml:base="http://localhost:4000/data-warehouse-11/"><![CDATA[<blockquote>
  <p>In this article, I’ll summarize key takeaways from:</p>
  <ul>
    <li>SECTION 11. ETL vs. ELT</li>
  </ul>
</blockquote>

<h3 id="disclaimer">DISCLAIMER</h3>
<blockquote>
  <p>This article is a compilation of key takeaways after completing <a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Data Warehouse — The Ultimate Guide</a> on Udemy. However, it may be challenging to achieve a comprehensive and deep understanding of Data Warehouse solely through this article. For your in-depth learning, please take the course, which is an excellent resource, and I personally highly recommend it to those who are eager to master data warehousing, dimensional modeling, and the ETL process.</p>
</blockquote>

<p><img src="/assets/2023-12-19-data-warehouse-06/data-warehouse.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Source</a></p>
</blockquote>

<h1 id="what-is-elt">What is ELT?</h1>

<p><img src="/assets/2024-01-13-data-warehouse-11/1.png" alt="" /></p>

<h3 id="data-sources--data-warehouse">Data Sources → Data Warehouse</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Extract</code> + <code class="language-plaintext highlighter-rouge">Load</code>
    <ul>
      <li>Real-time ⬆️</li>
    </ul>
  </li>
</ul>

<h3 id="data-warehouse--">Data Warehouse → …</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Transform</code>
    <ul>
      <li>Leverage Database</li>
      <li>More Flexible!</li>
    </ul>
  </li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>
    <span class="n">category</span><span class="p">,</span>
    <span class="k">SUM</span><span class="p">(</span><span class="n">sales_amount</span><span class="p">)</span>
<span class="k">FROM</span>
    <span class="n">sales</span>
<span class="k">GROUP</span> <span class="k">BY</span>
    <span class="n">category</span>
</code></pre></div></div>

<h1 id="etl-vs-elt">ETL vs. ELT</h1>

<table>
  <thead>
    <tr>
      <th><strong>ETL</strong></th>
      <th><strong>ELT</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>More Stable with Defined Transformations</td>
      <td>Requires High Performing DB</td>
    </tr>
    <tr>
      <td>More Generic Use Cases</td>
      <td>More Flexible</td>
    </tr>
    <tr>
      <td>Security ⬆️</td>
      <td>Transformations can be Changed Quickly!</td>
    </tr>
    <tr>
      <td>Reporting</td>
      <td>Real-time ⬆️</td>
    </tr>
    <tr>
      <td>Easy to Use</td>
      <td>Data Science, ML</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="SQL" /><category term="Data Warehouse" /><summary type="html"><![CDATA[In this article, I’ll summarize key takeaways from: SECTION 11. ETL vs. ELT]]></summary></entry><entry><title type="html">Data Warehouse #09</title><link href="http://localhost:4000/data-warehouse-09/" rel="alternate" type="text/html" title="Data Warehouse #09" /><published>2024-01-12T00:00:00+09:00</published><updated>2024-01-12T00:00:00+09:00</updated><id>http://localhost:4000/data-warehouse-09</id><content type="html" xml:base="http://localhost:4000/data-warehouse-09/"><![CDATA[<blockquote>
  <p>In this article, I’ll summarize key takeaways from:</p>
  <ul>
    <li>SECTION 09. ETL Tools</li>
  </ul>
</blockquote>

<h3 id="disclaimer">DISCLAIMER</h3>
<blockquote>
  <p>This article is a compilation of key takeaways after completing <a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Data Warehouse — The Ultimate Guide</a> on Udemy. However, it may be challenging to achieve a comprehensive and deep understanding of Data Warehouse solely through this article. For your in-depth learning, please take the course, which is an excellent resource, and I personally highly recommend it to those who are eager to master data warehousing, dimensional modeling, and the ETL process.</p>
</blockquote>

<p><img src="/assets/2023-12-19-data-warehouse-06/data-warehouse.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Source</a></p>
</blockquote>

<h1 id="etl-tools">ETL Tools</h1>

<table>
  <thead>
    <tr>
      <th><strong>Enterprise</strong></th>
      <th><strong>Open-source</strong></th>
      <th><strong>Cloud-native</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Alteryx</td>
      <td>Talend Open Studio</td>
      <td>Azure Data Factory</td>
    </tr>
    <tr>
      <td>Informatica</td>
      <td>Pentaho Data Integration</td>
      <td>AWS Glue</td>
    </tr>
    <tr>
      <td>Oracle Data Integrator</td>
      <td>Hadoop</td>
      <td>Google Cloud Data Flow</td>
    </tr>
    <tr>
      <td>Microsoft SSIS</td>
      <td>-</td>
      <td>Stitch</td>
    </tr>
  </tbody>
</table>

<h1 id="chosing-etl-tools">Chosing ETL Tools</h1>

<h3 id="1-evaluate-current-situation--needs">1. Evaluate Current Situation &amp; Needs</h3>
<ul>
  <li>What do you want to improve?</li>
  <li>Data sources &amp; other tools?</li>
  <li>Define your requirements.</li>
  <li>Define responsibilities.</li>
  <li>Who are the users?</li>
</ul>

<h3 id="2-evaluate-tools">2. Evaluate Tools</h3>
<ul>
  <li>Cost, Connectors, Capabilities, Ease of Use, Reviews, Support, and Extras</li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="SQL" /><category term="Data Warehouse" /><summary type="html"><![CDATA[In this article, I’ll summarize key takeaways from: SECTION 09. ETL Tools]]></summary></entry><entry><title type="html">Data Warehouse #08</title><link href="http://localhost:4000/data-warehouse-08/" rel="alternate" type="text/html" title="Data Warehouse #08" /><published>2024-01-11T00:00:00+09:00</published><updated>2024-01-11T00:00:00+09:00</updated><id>http://localhost:4000/data-warehouse-08</id><content type="html" xml:base="http://localhost:4000/data-warehouse-08/"><![CDATA[<blockquote>
  <p>In this article, I’ll summarize key takeaways from:</p>
  <ul>
    <li>SECTION 08. ETL Process</li>
  </ul>
</blockquote>

<h3 id="disclaimer">DISCLAIMER</h3>
<blockquote>
  <p>This article is a compilation of key takeaways after completing <a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Data Warehouse — The Ultimate Guide</a> on Udemy. However, it may be challenging to achieve a comprehensive and deep understanding of Data Warehouse solely through this article. For your in-depth learning, please take the course, which is an excellent resource, and I personally highly recommend it to those who are eager to master data warehousing, dimensional modeling, and the ETL process.</p>
</blockquote>

<p><img src="/assets/2023-12-19-data-warehouse-06/data-warehouse.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Source</a></p>
</blockquote>

<h1 id="understanding-the-etl-process">Understanding the ETL Process</h1>

<h3 id="the-layer-of-a-data-warehouse">The Layer of a Data Warehouse</h3>

<p><img src="/assets/2024-01-11-data-warehouse-08/1.png" alt="" /></p>

<p><strong>ETL Setup</strong></p>
<ul>
  <li>1️⃣ Building Workflows
    <ul>
      <li>Staging Workflow</li>
      <li>Core Workflow</li>
      <li>Data Mart Workflow</li>
    </ul>
  </li>
  <li>2️⃣ Jobs
    <ul>
      <li>Run the Workflows</li>
      <li>Scheduled based on Defined Rules</li>
    </ul>
  </li>
</ul>

<h1 id="extracting-data-sources--staging">Extracting (Data Sources → Staging)</h1>

<p><img src="/assets/2024-01-11-data-warehouse-08/2.png" alt="" /></p>

<ul>
  <li>Transient, most commonly.
    <ul>
      <li>All the data is copied and then deleted.</li>
    </ul>
  </li>
  <li>Types of Extracting</li>
</ul>

<table>
  <thead>
    <tr>
      <th><strong>Initial Load</strong></th>
      <th><strong>Delta Load</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>First (real) Run</td>
      <td>Subsequent Runs</td>
    </tr>
    <tr>
      <td>All Data</td>
      <td>Only Additional Data</td>
    </tr>
  </tbody>
</table>

<h1 id="extracting-data-sources--staging-1️⃣-initial-load">Extracting (Data Sources → Staging): 1️⃣ Initial Load</h1>

<ul>
  <li>First Initial Extraction from Source Data</li>
  <li>Followings should be discussed:
    <ul>
      <li>What data is needed?</li>
      <li>When is a good time to load the data? (Night? Weekend?)</li>
      <li>Test with smaller extractions.</li>
      <li>All the transformation steps should have been designed. (up to Core and Data Marts)</li>
    </ul>
  </li>
</ul>

<h1 id="extracting-data-sources--staging-2️⃣-delta-load">Extracting (Data Sources → Staging): 2️⃣ Delta Load</h1>

<ul>
  <li>Incremental Periodic Extraction &amp; Load</li>
  <li><strong>Delta Column</strong>
    <ul>
      <li>Remember <code class="language-plaintext highlighter-rouge">MAX(sales_key)</code></li>
    </ul>
  </li>
</ul>

<pre><code class="language-plain">Variable X = MAX(sales_key)
Next Run: sales_key &gt; X
</code></pre>

<p><img src="/assets/2024-01-11-data-warehouse-08/3.png" alt="" /></p>

<p>What if there is no <strong>Delta Column</strong>?</p>
<ul>
  <li>Some tools can capture automatically which data has already been loaded.</li>
  <li>Just full-load every time and compare the data with data that is already loaded.</li>
  <li>Depending on the data volume → Performance Issue!</li>
</ul>

<h1 id="loading-staging--core-insert--update">Loading (Staging → Core): INSERT &amp; UPDATE</h1>

<p><img src="/assets/2024-01-11-data-warehouse-08/4.png" alt="" /></p>

<ul>
  <li><strong>INSERT or APPEND</strong>
    <ul>
      <li>add new values</li>
    </ul>
  </li>
  <li><strong>UPDATE</strong>
    <ul>
      <li>change the existing values</li>
    </ul>
  </li>
  <li><strong>DELETE</strong>?
    <ul>
      <li>typically, we don’t delete data.</li>
    </ul>
  </li>
</ul>

<h1 id="demo-extracting-data-sources--staging">[DEMO] Extracting (Data Sources → Staging)</h1>

<h3 id="create-table">Create Table</h3>

<p><img src="/assets/2024-01-11-data-warehouse-08/5.png" alt="" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">dim_products</code> in Staging Layer</li>
</ul>

<table>
  <thead>
    <tr>
      <th><strong>column</strong></th>
      <th><strong>type</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">product_PK</code></td>
      <td>Surrogate Key</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">product_id</code></td>
      <td>Natural Key</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">product_name</code></td>
      <td> </td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">category</code></td>
      <td> </td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">subcategory</code></td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="initial-load">Initial Load</h3>

<p><img src="/assets/2024-01-11-data-warehouse-08/6.png" alt="" /></p>

<ul>
  <li>Table input
    <ul>
      <li>from <code class="language-plaintext highlighter-rouge">products</code> in Source</li>
    </ul>
  </li>
  <li>Table output
    <ul>
      <li>to <code class="language-plaintext highlighter-rouge">dim_products</code> in Staging Layer</li>
    </ul>
  </li>
</ul>

<h3 id="delta-load">Delta Load</h3>

<p><img src="/assets/2024-01-11-data-warehouse-08/7.png" alt="" /></p>

<ul>
  <li>Table input
    <ul>
      <li>from <code class="language-plaintext highlighter-rouge">dim_products</code> in Staging Layer</li>
      <li><code class="language-plaintext highlighter-rouge">SELECT MAX(product_id) FROM "Staging".dim_products</code></li>
    </ul>
  </li>
  <li>Set variables
    <ul>
      <li>Save As <code class="language-plaintext highlighter-rouge">LastLoad</code></li>
    </ul>
  </li>
  <li>Get variables
    <ul>
      <li><code class="language-plaintext highlighter-rouge">${LastLoad}</code></li>
    </ul>
  </li>
  <li>Table input
    <ul>
      <li>from <code class="language-plaintext highlighter-rouge">products</code> in Source</li>
      <li><code class="language-plaintext highlighter-rouge">SELECT * FROM "public".products WHERE product_id &gt; ${LastLoad}</code></li>
    </ul>
  </li>
  <li>Table output
    <ul>
      <li>to <code class="language-plaintext highlighter-rouge">dim_products</code> in Staging Layer</li>
    </ul>
  </li>
</ul>

<h1 id="transformations">Transformations</h1>

<h3 id="basic">Basic</h3>

<ul>
  <li>
    <p>Deduplication
<img src="/assets/2024-01-11-data-warehouse-08/8.png" alt="" /></p>
  </li>
  <li>
    <p>Filtering Rows
<img src="/assets/2024-01-11-data-warehouse-08/9.png" alt="" /></p>
  </li>
  <li>
    <p>Filtering Columns
<img src="/assets/2024-01-11-data-warehouse-08/10.png" alt="" /></p>
  </li>
  <li>
    <p>Cleaning &amp; Mapping
<img src="/assets/2024-01-11-data-warehouse-08/11.png" alt="" /></p>
  </li>
  <li>
    <p>Value Standardization
<img src="/assets/2024-01-11-data-warehouse-08/12.png" alt="" /></p>
  </li>
  <li>
    <p>Key Generation
<img src="/assets/2024-01-11-data-warehouse-08/13.png" alt="" /></p>
  </li>
</ul>

<h3 id="advanced">Advanced</h3>

<ul>
  <li>
    <p>Joining
<img src="/assets/2024-01-11-data-warehouse-08/14.png" alt="" /></p>
  </li>
  <li>
    <p>Splitting
<img src="/assets/2024-01-11-data-warehouse-08/15.png" alt="" /></p>
  </li>
  <li>Aggregating
    <ul>
      <li><code class="language-plaintext highlighter-rouge">SUM</code>, <code class="language-plaintext highlighter-rouge">COUNT</code>, <code class="language-plaintext highlighter-rouge">DISTINCT COUNT</code>, <code class="language-plaintext highlighter-rouge">AVERAGE</code>
<img src="/assets/2024-01-11-data-warehouse-08/16.png" alt="" /></li>
    </ul>
  </li>
  <li>Deriving New Values
<img src="/assets/2024-01-11-data-warehouse-08/17.png" alt="" /></li>
</ul>

<h1 id="summary">Summary</h1>

<p><img src="/assets/2024-01-11-data-warehouse-08/18.png" alt="" /></p>

<ul>
  <li><strong>Extract</strong>: Source → Staging
    <ul>
      <li>Add Surrogate Key</li>
      <li>Delta Logic</li>
    </ul>
  </li>
  <li><strong>Transform + Load</strong>: Staging → Core
    <ul>
      <li>Clean Data</li>
      <li>Add Additional Columns</li>
    </ul>
  </li>
</ul>

<h1 id="scheduling">Scheduling</h1>

<h3 id="can-be-done-either">Can be done either:</h3>

<ul>
  <li>directly from the ETL Tool,</li>
  <li>or using External Tool
    <ul>
      <li>e.g., Windows Task Scheduler, Server, etc.</li>
    </ul>
  </li>
</ul>

<h3 id="guidelines">Guidelines</h3>

<ul>
  <li>What are the requirements?
    <ul>
      <li>3 times a day?</li>
      <li>1 time a day?</li>
      <li>Every 30 mins?</li>
    </ul>
  </li>
  <li>How long does it take?
    <ul>
      <li>5 mins?</li>
      <li>1 hour?</li>
    </ul>
  </li>
  <li>What is a good time?
    <ul>
      <li>Initial Load vs. Delta Load</li>
      <li>Effect on the Productive System</li>
      <li>Short Read Access</li>
      <li>Night? Morning?</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="SQL" /><category term="Data Warehouse" /><summary type="html"><![CDATA[In this article, I’ll summarize key takeaways from: SECTION 08. ETL Process]]></summary></entry><entry><title type="html">Data Warehouse #07</title><link href="http://localhost:4000/data-warehouse-07/" rel="alternate" type="text/html" title="Data Warehouse #07" /><published>2024-01-02T00:00:00+09:00</published><updated>2024-01-02T00:00:00+09:00</updated><id>http://localhost:4000/data-warehouse-07</id><content type="html" xml:base="http://localhost:4000/data-warehouse-07/"><![CDATA[<blockquote>
  <p>In this article, I’ll summarize key takeaways from:</p>
  <ul>
    <li>SECTION 07. Slowly Changing Dimensions</li>
  </ul>
</blockquote>

<h3 id="disclaimer">DISCLAIMER</h3>
<blockquote>
  <p>This article is a compilation of key takeaways after completing <a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Data Warehouse — The Ultimate Guide</a> on Udemy. However, it may be challenging to achieve a comprehensive and deep understanding of Data Warehouse solely through this article. For your in-depth learning, please take the course, which is an excellent resource, and I personally highly recommend it to those who are eager to master data warehousing, dimensional modeling, and the ETL process.</p>
</blockquote>

<p><img src="/assets/2023-12-19-data-warehouse-06/data-warehouse.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Source</a></p>
</blockquote>

<h1 id="slowly-changing-dimensions">Slowly Changing Dimensions</h1>

<p>Dimensions are rather static than Facts, but they do change in the real world.</p>

<p>Types of Slowly Changing Dimensions (SCDs)</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Type 0</code>: Retain Original</li>
  <li><code class="language-plaintext highlighter-rouge">Type 1</code>: Overwrite</li>
  <li><code class="language-plaintext highlighter-rouge">Type 2</code>: New Row
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Type 2'</code>: Administrative New Row</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Type 3</code>: Additional Attributes</li>
</ul>

<h1 id="type-0-retain-original">Type 0: Retain Original</h1>
<ul>
  <li>No changes at all.</li>
  <li>Very simple and easy to maintain.</li>
  <li><code class="language-plaintext highlighter-rouge">Dates Table</code> is a great example.</li>
</ul>

<h1 id="type-1-overwrite">Type 1: Overwrite</h1>

<p><img src="/assets/2024-01-02-data-warehouse-07/overwrite.png" alt="" /></p>

<ul>
  <li>Old attributes are just <strong>Overwritten</strong>.</li>
  <li>Only the <strong>Current State</strong> is reflected.</li>
  <li>👍 <strong>Advantages</strong>
    <ul>
      <li>Very simple</li>
      <li>Facts don’t need to be modified.</li>
    </ul>
  </li>
  <li>👎 <strong>Disadvantages</strong>
    <ul>
      <li>History is lost.</li>
      <li>Insignificant Changes ➡️ Do not affect existing queries.
        <ul>
          <li>i.e., product name</li>
        </ul>
      </li>
      <li>Significant Changes ➡️ Affect or break existing queries.
        <ul>
          <li>i.e., category</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="type-2-new-row">Type 2: New Row</h1>

<p><img src="/assets/2024-01-02-data-warehouse-07/new-row.png" alt="" /></p>

<ul>
  <li>Perfectly partitions <strong>history</strong>.</li>
  <li>Changes are reflected in <strong>history</strong>.</li>
  <li>👎 <strong>Disadvantages</strong>
    <ul>
      <li>Difficult to calculate the total number of products in the current view.</li>
    </ul>
  </li>
</ul>

<h1 id="type-2-administrative-new-row">Type 2’: Administrative New Row</h1>

<p><img src="/assets/2024-01-02-data-warehouse-07/administrative-new-row.png" alt="" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">effective_date</code> &amp; <code class="language-plaintext highlighter-rouge">expiration_date</code>
    <ul>
      <li>The period in which values are valid.</li>
      <li><code class="language-plaintext highlighter-rouge">expiration_date</code>
        <ul>
          <li>Avoid <strong>Null</strong> values, and fill in a date far in the future instead.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Requires <strong>Surrogate Key</strong> instead of <strong>Natural Key</strong>.</li>
  <li>Lookup from the Query
    <ul>
      <li>Step 1) Find the Natural Key. (<code class="language-plaintext highlighter-rouge">product_PK</code>)</li>
      <li>Step 2) Then, find the Valid Period. (<code class="language-plaintext highlighter-rouge">effective_date</code> &amp; <code class="language-plaintext highlighter-rouge">expiration_date</code>)</li>
      <li>Step 3) <code class="language-plaintext highlighter-rouge">is_current</code> column is optional.</li>
    </ul>
  </li>
</ul>

<h1 id="type-3-additional-attributes">Type 3: Additional Attributes</h1>

<p><img src="/assets/2024-01-02-data-warehouse-07/additional-attributes.png" alt="" /></p>

<ul>
  <li>Instead of adding a row, we <strong>add a column</strong>.</li>
  <li>Enables to switch between historical &amp; current views.</li>
  <li>It’s typically used for significant changes at a time.
    <ul>
      <li>i.e., Restructuring in an organization</li>
    </ul>
  </li>
  <li>👎 <strong>Disadvantages</strong>
    <ul>
      <li>Minor Changes ➡️ Type 1 is better.</li>
      <li>Frequent or Unpredictable Changes ➡️ Type 2 is better.</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="SQL" /><category term="Data Warehouse" /><summary type="html"><![CDATA[In this article, I’ll summarize key takeaways from: SECTION 07. Slowly Changing Dimensions]]></summary></entry><entry><title type="html">데이터 분석가의 SQL 최적화 일기: 코호트 리텐션 Batch Query 만들기</title><link href="http://localhost:4000/retention-batch-query/" rel="alternate" type="text/html" title="데이터 분석가의 SQL 최적화 일기: 코호트 리텐션 Batch Query 만들기" /><published>2024-01-01T00:00:00+09:00</published><updated>2024-01-01T00:00:00+09:00</updated><id>http://localhost:4000/retention-batch-query</id><content type="html" xml:base="http://localhost:4000/retention-batch-query/"><![CDATA[<blockquote>
  <p>코호트 리텐션의 의미와 중요성에 대해 말씀드리고, Batch Query를 사용하여 회원가입 월 코호트 별로 Monthly Range Retention을 계산하는 방법을 제시해드릴게요.</p>
</blockquote>

<h3 id="contents">CONTENTS</h3>
<ol>
  <li>코호트 리텐션의 의미와 중요성
    <ul>
      <li>1.1. 리텐션</li>
      <li>1.2. 코호트</li>
      <li>1.3. 코호트 리텐션</li>
      <li>1.4. 코호트 리텐션의 중요성</li>
    </ul>
  </li>
  <li>쿼리 작업 목표</li>
  <li>일회성 쿼리문
    <ul>
      <li>3.1. 쿼리문 보기</li>
      <li>3.2. 문제점</li>
    </ul>
  </li>
  <li>해결 아이디어</li>
  <li>Batch Query를 통해 접근하기</li>
  <li>결론</li>
</ol>

<hr />

<h3 id="disclaimer">DISCLAIMER</h3>
<p>본 아티클은 필자의 전/현 재직 기업의 데이터 분석 현황과 관련이 없으며, 단지 평소에 문제 의식을 지녔던 점에 대한 해결 방법을 스스로 도출해본 내용입니다. 쿼리문 작성에 다른 외부 레퍼런스를 참고하지 않았으며, 분석 환경에 따라 본 내용이 적합하지 않을 수 있으므로 반드시 비판적 고찰을 해주시면 감사드리겠습니다.</p>

<h1 id="1-코호트-리텐션의-의미와-중요성">1. 코호트 리텐션의 의미와 중요성</h1>

<h3 id="11-리텐션">1.1. 리텐션</h3>

<p>먼저, 리텐션은 “시간이 흐름에 따라 얼마나 많은 사용자들이 우리 프로덕트에 재참여하는지”를 나타내는 지표입니다. 이미 많은 분들이 아시듯 리텐션은 PMF를 달성하기 위해 분석해야 할 중요한 지표입니다. 이 정의가 꽤나 간단해보이지만, 측정하는 과정에서 실상은 그렇지 않습니다. “재참여”를 “재”와 “참여”로 나누어 각각의 사전 정의가 이루어져야 하기 때문입니다.</p>

<p><strong>“참여” 개념 정의하기</strong></p>

<p>사용자가 우리 프로덕트에 “참여”한다는 것이 정확히 어떤 순간인지 정의해야 합니다. 예를 들어, 접속, 30초 이상 세션 유지, 특정 퍼널 단계 도달 등 여러 이벤트 중 하나가 “참여”로 간주될 수 있습니다. 저는 개인적으로 아래 3가지 측면 정의를 모두 사전에 준비하여 Target Metric에 따라 적시적소에 모니터링하는 것이 필요하다고 느꼈습니다.</p>

<p>(1) “접속”을 하는 것만으로 참여한 것으로 간주하자!</p>
<ul>
  <li>DAU, WAU, MAU, Stickiness 등의 지표와 직접적으로 연관된 정의 방법이며, 광고 노출 효과를 극대화하는 경우 유용합니다.</li>
</ul>

<p>(2) “구매”까지 해야 참여한 것으로 간주하자!</p>
<ul>
  <li>재구매율 등의 지표와 직접적으로 연관된 정의 방법이며, Recurring Revenue가 중요한 프로덕트에서 중요합니다.</li>
</ul>

<p>(3) “아하 모먼트”에 도달해야 참여한 것으로 간주하자!</p>
<ul>
  <li><a href="https://www.youtube.com/watch?v=0KgOCKJ1PG4">토스의 이승건 대표님에 따르면</a>, 아하 모먼트란 프로덕트의 핵심 가치의 경험하는 순간을 의미합니다.</li>
  <li>X, Y, Z의 조합으로 이루어진 여러 가지 “X 이벤트를 Y 기간 내에 Z번 수행한다” 중 리텐션이 극명하게 높은(가령, 95%) 항목을 사전에 발견하여, 빠르게 PMF를 달성해야 할 때 유용합니다.</li>
</ul>

<p><strong>“재” 개념 정의하기</strong></p>

<p>사용자가 복귀했다는 것을 어떻게 계산할 것인가에 대한 정의가 필요합니다. <a href="https://product.kyobobook.co.kr/detail/S000001766457">양승화님의 그로스해킹에 따르면</a>, Classic Retention, Range Retention, Rolling Retention 중 프로덕트의 특성에 따라 적절한 방법을 선택할 수 있습니다.</p>

<p>(1) Classic Retention: 사용자가 최초로 “참여”한 Day 0 이후, 각 Day N 별로 한 번 더 “참여”했는지 계산합니다.</p>

<p>(2) Range Retention: Day N이 아니라 Week N, Bi-week N, Month N 별로 한 번 더 “참여”했는지 계산합니다.</p>

<p>(3) Rolling Retention: Day N 이후에 한 번이라도 “참여”한 경우를 계산합니다. (이탈률의 반대 개념)</p>

<p><strong>이러한 정의와 측정 방법을 통해 효과적인 리텐션 지표 측정이 가능해질 것입니다.</strong></p>

<h3 id="12-코호트">1.2. 코호트</h3>

<p>코호트의 개념을 두 가지로 혼용하는 경향이 있습니다.</p>
<ol>
  <li><em>“코호트는 세그먼트다. 즉, 사용자가 지닌 여러 가지 Feature 조합을 통해 그룹화된 클러스터다.”</em></li>
  <li><em>“코호트는 세그먼트의 일부로서, 특정 이벤트의 최초 수행일시를 기준으로 그룹화된 클러스터다.” (최초 프로덕트 방문일, 회원가입일, 최초 결제일 등)</em></li>
</ol>

<p>개인적으로는 세그먼트와의 혼동을 줄이기 위해 2번의 개념을 선호하지만, 코호트를 융통성 있게 설정하기 위해 1번 개념에서 언급한 다른 Feature 조합도 선택적으로 추가할 수 있는 “열린 개념”으로 받아들이고 있습니다.</p>

<ul>
  <li>예시 1) 사용자를 최초 프로덕트 방문일 기준으로 그룹화한다. → 코호트 O</li>
  <li>예시 2) 사용자를 최초 접속 국가 기준으로 그룹화한다. → 코호트 X</li>
  <li>예시 3) 사용자를 최초 프로덕트 방문일 및 접속 국가 기준으로 그룹화한다. → 코호트 O</li>
</ul>

<p>이렇게 하면 특정 이벤트의 최초 수행일시를 중심으로 하면서도 다양한 특성을 고려할 수 있어서 코호트를 보다 유연하게 활용할 수 있을 것입니다.</p>

<h3 id="13-코호트-리텐션">1.3. 코호트 리텐션</h3>

<p>코호트 리텐션이란, 기존의 리텐션 개념을 코호트에 따라 시리즈를 달리하여 계산한 지표를 의미합니다. 예를 들면, 최초 프로덕트 방문일을 기준으로 사용자들의 리텐션이 상승 추세인지, 혹은 하락 추세인지를 알 수 있는 것이죠.</p>

<h3 id="14-코호트-리텐션의-중요성">1.4. 코호트 리텐션의 중요성</h3>

<p>아래의 리텐션 지표를 통해 PMF 달성 여부를 확인할 수 있지만, 문제를 파악하거나 액션 포인트를 도출하는 데는 그다지 도움이 되지 않습니다.</p>

<p><img src="/assets/2024-01-01-retention-batch-query/retention.webp" alt="" /></p>
<blockquote>
  <p><a href="https://mermaid.js.org/syntax/xyChart.html">mermaid</a>를 통해 필자가 직접 작성</p>
</blockquote>

<p>그러나 코호트 리텐션 값을 확인할 수 있다면, 프로덕트의 기능 업데이트나 캠페인 론칭 등에 따른 사후 효과를 확인하고, 리텐션 향상을 위해 우리가 어떤 액션에 좀 더 집중해야 하는지 확인하는 데 도움을 줄 수 있습니다.</p>

<p><img src="/assets/2024-01-01-retention-batch-query/cohort-retention.webp" alt="" /></p>
<blockquote>
  <p><a href="https://mermaid.js.org/syntax/xyChart.html">mermaid</a>를 통해 필자가 직접 작성</p>
</blockquote>

<h1 id="2-쿼리-작업-목표">2. 쿼리 작업 목표</h1>

<p>쿼리 작업 목표는 다음과 같습니다. 아래와 같은 테이블을 대시보드에 반영해보고자 합니다. 즉, 회원가입 연월(YYYY-MM) 코호트별 리텐션(Monthly Range)테이블을 배포하여 다양한 이해당사자 분들이 리텐션 지표의 시계열 추이를 확인하시는 데 도움을 드리려는 것입니다.</p>

<p><img src="/assets/2024-01-01-retention-batch-query/task-goal.webp" alt="" /></p>
<blockquote>
  <p>제가 직접 샘플로 만들어본 위 테이블에서는 시간이 흐를수록 리텐션이 향상되는 추이를 보여주고 있군요.</p>
</blockquote>

<p>그런데, 위와 같은 테이블을 만들기 위해서는 SQL의 최후 출력 상태가 다음과 같은 Unpivoted한 형태가 되어야 합니다. 물론 Pivoted한 형태로 직접 출력하는 방법도 있지만, 오늘의 토픽인 “Batch Query 만들기”를 위해서는 Unpivoted한 형태가 되어야 합니다. Table을 Update를 방지하고, 오로지 Insert 작업만 수행함으로써 연산 부하를 방지하기 위함인데요. 지금부터 차차 읽어가시면 이해가 되실 겁니다.</p>

<p><img src="/assets/2024-01-01-retention-batch-query/last-query-results.webp" alt="" /></p>
<blockquote>
  <p>필자가 직접 작성</p>
</blockquote>

<h1 id="3-일회성-쿼리문">3. 일회성 쿼리문</h1>

<h3 id="31-쿼리문-보기">3.1. 쿼리문 보기</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">WITH</span>

<span class="c1">-- 1. 사용자들의 "참여" (회원가입 및 로그인 이벤트) 소스 테이블을 불러온다.</span>
<span class="n">CTE_engagements</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
        <span class="n">user_id</span><span class="p">,</span>
        <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'DAY'</span><span class="p">,</span> <span class="nb">datetime</span><span class="p">)</span> <span class="k">AS</span> <span class="nb">date</span>
    <span class="k">FROM</span>
        <span class="n">signups_logins</span>
    <span class="k">GROUP</span> <span class="k">BY</span>
        <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
<span class="p">),</span>

<span class="c1">-- 2. 사용자들을 회원가입일 기준의 코호트로 Labeling해준다.</span>
<span class="n">CTE_cohorts</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
        <span class="n">user_id</span><span class="p">,</span>
        <span class="k">MIN</span><span class="p">(</span><span class="nb">date</span><span class="p">)</span> <span class="k">AS</span> <span class="n">cohort_date</span>
    <span class="k">FROM</span>
        <span class="n">CTE_engagements</span>
    <span class="k">GROUP</span> <span class="k">BY</span>
        <span class="mi">1</span>
<span class="p">),</span>

<span class="c1">-- 3. 사용자들의 "참여" 테이블과 "코호트 Labeling" 테이블을 조인하여 "Day N"도 함께 표시해준다.</span>
<span class="n">CTE_engagements_with_cohorts_daily</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
        <span class="n">ENG</span><span class="p">.</span><span class="n">user_id</span><span class="p">,</span>
        <span class="n">ENG</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span>
        <span class="n">COH</span><span class="p">.</span><span class="n">cohort_date</span><span class="p">,</span>
        <span class="n">DATE_DIFF</span><span class="p">(</span>
            <span class="n">ENG</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span>
            <span class="n">COH</span><span class="p">.</span><span class="n">cohort_date</span><span class="p">,</span>
            <span class="k">DAY</span>
        <span class="p">)</span> <span class="k">AS</span> <span class="n">day_n</span>
    <span class="k">FROM</span>
        <span class="n">CTE_engagements</span> <span class="n">ENG</span>
    <span class="k">LEFT</span> <span class="k">JOIN</span>
        <span class="n">CTE_cohorts</span> <span class="n">COH</span>
        <span class="k">USING</span> <span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
<span class="p">),</span>

<span class="c1">-- 4. "Day N"을 "Month N"으로 변환해준다.</span>
<span class="n">CTE_engagements_with_cohorts_monthly</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
        <span class="n">user_id</span><span class="p">,</span>
        <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="nb">date</span><span class="p">)</span> <span class="k">AS</span> <span class="n">yyyymm</span><span class="p">,</span>
        <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="n">cohort_date</span><span class="p">)</span> <span class="k">AS</span> <span class="n">cohort_yyyymm</span><span class="p">,</span>
        <span class="n">DATE_DIFF</span><span class="p">(</span>
            <span class="nb">date</span><span class="p">,</span>
            <span class="n">cohort_date</span><span class="p">,</span>
            <span class="k">MONTH</span>
        <span class="p">)</span> <span class="k">AS</span> <span class="n">month_n</span>
    <span class="k">FROM</span>
        <span class="n">CTE_engagements_with_cohorts_daily</span>
<span class="p">),</span>

<span class="c1">-- 5. 코호트 및 "Month N" 기준으로 사용자 수를 집계한다.</span>
<span class="n">CTE_month_n_cnt</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
        <span class="n">cohort_yyyymm</span><span class="p">,</span>
        <span class="n">month_n</span><span class="p">,</span>
        <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">users_cnt</span>
    <span class="k">FROM</span>
        <span class="n">CTE_engagements_with_cohorts_monthly</span>
    <span class="k">GROUP</span> <span class="k">BY</span>
        <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
<span class="p">),</span>

<span class="c1">-- 6. 최종 리텐션을 계산한다.</span>
<span class="n">CTE_monthly_retention</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
        <span class="n">cohort_yyyymm</span><span class="p">,</span>
        <span class="n">month_n</span><span class="p">,</span>
        <span class="k">CAST</span><span class="p">(</span><span class="n">users_cnt</span> <span class="k">AS</span> <span class="nb">DOUBLE</span><span class="p">)</span>
        <span class="o">/</span>
        <span class="k">CAST</span><span class="p">(</span><span class="n">FIRST_VALUE</span><span class="p">(</span><span class="n">users_cnt</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span>
            <span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">cohort_yyyymm</span>
            <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">month_n</span>
            <span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="n">UNBOUNDED</span> <span class="k">PRECEDING</span> <span class="k">AND</span> <span class="n">UNBOUNDED</span> <span class="k">FOLLOWING</span>
            <span class="p">)</span> <span class="k">AS</span> <span class="nb">DOUBLE</span>
        <span class="p">)</span> <span class="k">AS</span> <span class="n">monthly_retention</span>
    <span class="k">FROM</span>
        <span class="n">CTE_month_n_cnt</span>
    <span class="k">ORDER</span> <span class="k">BY</span>
        <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
<span class="p">)</span>
<span class="k">SELECT</span>
    <span class="o">*</span>
<span class="k">FROM</span>
    <span class="n">CTE_monthly_retention</span>
<span class="p">;</span>
</code></pre></div></div>

<h3 id="32-문제점">3.2. 문제점</h3>

<p>위 쿼리문의 출력 결과는 앞서 잠깐 보여드린 아래와 같은 형태의 테이블을 출력합니다. 그런데, 매번 전체 소스 테이블을 메모리에 올려 리텐션을 계산하려면 연산량이 과도하게 많이 들어 리소스 낭비로 이어지게 됩니다.</p>

<p><img src="/assets/2024-01-01-retention-batch-query/last-query-results.webp" alt="" /></p>
<blockquote>
  <p>필자가 직접 작성</p>
</blockquote>

<h1 id="4-해결-아이디어">4. 해결 아이디어</h1>

<p>마침, Cohort 칼럼과 Month 칼럼이 시계열 형식을 지니고 있으므로 미래의 데이터가 과거의 데이터에 영향을 끼칠 수 없습니다. 또한, 출력된 테이블은  <a href="https://www.kimballgroup.com/data-warehouse-business-intelligence-resources/kimball-techniques/dimensional-modeling-techniques/periodic-snapshot-fact-table/">Periodic Snapshot Fact Table</a>의 유형에 해당합니다. 바로 이 점으로부터 우리는 Batch Query를 활용할 수 있는 여지를 발견할 수 있습니다. 즉, 아래와 같이 매월 1일 00:01 UTC마다 새롭게 획득한 리텐션 값들을 Insert할 수 있는 Batch Query를 작성할 수 있는 것입니다. 특히 이벤트 로그 데이터의 크기가 매우 큰 프로덕트를 운영하고 있다면, 굳이 매번 일회성 쿼리문을 실행할 필요가 없는 셈이죠.</p>

<p><img src="/assets/2024-01-01-retention-batch-query/idea.webp" alt="" /></p>
<blockquote>
  <p>즉, 매월 초마다 좌측 테이블의 빨간색 영역들을 순차적으로 신규 계산하여 테이블 Insert 스케줄링을 구현할 수 있는 것이죠. (필자가 직접 작성)</p>
</blockquote>

<h1 id="5-batch-query를-통해-접근하기">5. Batch Query를 통해 접근하기</h1>

<p><strong>STEP 1) 사용자들의 “참여” 소스 테이블을 불러온다. (단, 현재 시점 기준으로 7개월 전의 월초부터 1개월 전의 월말까지 항목만)</strong></p>

<p><img src="/assets/2024-01-01-retention-batch-query/step1.webp" alt="" /></p>
<blockquote>
  <p>필자가 직접 작성</p>
</blockquote>

<ul>
  <li>로그인했을 때 사용자가 “참여”했다고 가정 하에, 로그인 이벤트를 불러온다.</li>
  <li>코호트는 “회원가입” 기준으로 정의할 것이므로, 회원가입 이벤트도 함께 불러온다.</li>
  <li>Monthly Range Retention은 Month 0부터 Month 6까지만 계산한다.</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">WITH</span>  
  
<span class="c1">-- 1. 사용자들의 "참여" (회원가입 및 로그인 이벤트) 소스 테이블을 불러온다.  </span>
<span class="c1">-- (단, 현재 시점 기준으로 7개월 전의 월초부터 1개월 전의 월말까지 항목만)  </span>
<span class="n">CTE_engagements</span> <span class="k">AS</span> <span class="p">(</span>  
    <span class="k">SELECT</span>  
        <span class="n">user_id</span><span class="p">,</span>  
        <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'DAY'</span><span class="p">,</span> <span class="nb">datetime</span><span class="p">)</span> <span class="k">AS</span>  <span class="nb">date</span>  
    <span class="k">FROM</span>
        <span class="k">source</span><span class="p">.</span><span class="n">signups_logins</span>
    <span class="nv">"if is_incremental()"</span>
    <span class="k">WHERE</span>  
        <span class="c1">-- 현재 시점 기준으로 7개월 전의 월초부터 ~  </span>
        <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'7'</span> <span class="k">MONTH</span>  
        <span class="o">&lt;=</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'DAY'</span><span class="p">,</span> <span class="nb">datetime</span><span class="p">)</span>  
        <span class="c1">-- ~ 현재 시점 기준으로 1개월 전의 월말까지  </span>
        <span class="k">AND</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'DAY'</span><span class="p">,</span> <span class="nb">datetime</span><span class="p">)</span>  
        <span class="o">&lt;=</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'1'</span> <span class="k">DAY</span>  
    <span class="nv">"endif"</span>
    <span class="k">GROUP</span> <span class="k">BY</span>  
        <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>  
<span class="p">),</span>
</code></pre></div></div>

<p><strong>STEP 2) 사용자들을 회원가입일 기준의 코호트로 Labeling해준다.</strong></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 2. 사용자들을 회원가입일 기준의 코호트로 Labeling해준다.  </span>
<span class="n">CTE_cohorts</span> <span class="k">AS</span> <span class="p">(</span>  
    <span class="k">SELECT</span>  
        <span class="n">user_id</span><span class="p">,</span>  
        <span class="k">MIN</span><span class="p">(</span><span class="nb">date</span><span class="p">)</span> <span class="k">AS</span> <span class="n">cohort_date</span>  
    <span class="k">FROM</span>  
        <span class="n">CTE_engagements</span>  
    <span class="k">GROUP</span> <span class="k">BY</span>  
        <span class="mi">1</span>  
<span class="p">),</span>
</code></pre></div></div>

<p><strong>STEP 3) 사용자들의 “참여” 테이블과 “코호트 Labeling” 테이블을 조인하여 “Day N”도 함께 표시해준다.</strong></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 3. 사용자들의 "참여" 테이블과 "코호트 Labeling" 테이블을 조인하여 "Day N"도 함께 표시해준다.  </span>
<span class="n">CTE_engagements_with_cohorts_daily</span> <span class="k">AS</span> <span class="p">(</span>  
    <span class="k">SELECT</span>  
        <span class="n">ENG</span><span class="p">.</span><span class="n">user_id</span><span class="p">,</span>  
        <span class="n">ENG</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span>  
        <span class="n">COH</span><span class="p">.</span><span class="n">cohort_date</span><span class="p">,</span>  
        <span class="n">DATE_DIFF</span><span class="p">(</span>  
            <span class="n">ENG</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span>  
            <span class="n">COH</span><span class="p">.</span><span class="n">cohort_date</span><span class="p">,</span>  
            <span class="k">DAY</span>  
        <span class="p">)</span> <span class="k">AS</span> <span class="n">day_n</span>  
    <span class="k">FROM</span>  
        <span class="n">CTE_engagements</span> <span class="n">ENG</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span>  
        <span class="n">CTE_cohorts</span> <span class="n">COH</span>  
        <span class="k">USING</span> <span class="p">(</span><span class="n">user_id</span><span class="p">)</span>  
<span class="p">),</span>
</code></pre></div></div>

<p><strong>STEP 4) “Day N”을 “Month N”으로 변환해준다.</strong></p>
<ul>
  <li>Monthly Range Retention을 계산해야 하기 때문이다.</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 4. "Day N"을 "Month N"으로 변환해준다.  </span>
<span class="n">CTE_engagements_with_cohorts_monthly</span> <span class="k">AS</span> <span class="p">(</span>  
    <span class="k">SELECT</span>  
        <span class="n">user_id</span><span class="p">,</span>  
        <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="nb">date</span><span class="p">)</span> <span class="k">AS</span> <span class="n">yyyymm</span><span class="p">,</span>  
        <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="n">cohort_date</span><span class="p">)</span> <span class="k">AS</span> <span class="n">cohort_yyyymm</span><span class="p">,</span>  
        <span class="n">DATE_DIFF</span><span class="p">(</span>  
            <span class="nb">date</span><span class="p">,</span>  
            <span class="n">cohort_date</span><span class="p">,</span>  
            <span class="k">MONTH</span>  
        <span class="p">)</span> <span class="k">AS</span> <span class="n">month_n</span>  
    <span class="k">FROM</span>  
        <span class="n">CTE_engagements_with_cohorts_daily</span>  
<span class="p">),</span>
</code></pre></div></div>

<p><strong>STEP 5) 코호트 및 “Month N” 기준으로 사용자 수를 집계한다.</strong></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 5. 코호트 및 "Month N" 기준으로 사용자 수를 집계한다.  </span>
<span class="n">CTE_month_n_cnt</span> <span class="k">AS</span> <span class="p">(</span>  
    <span class="k">SELECT</span>  
        <span class="n">cohort_yyyymm</span><span class="p">,</span>  
        <span class="n">month_n</span><span class="p">,</span>  
        <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">users_cnt</span>  
    <span class="k">FROM</span>  
        <span class="n">CTE_engagements_with_cohorts_monthly</span>  
    <span class="k">GROUP</span> <span class="k">BY</span>  
        <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>  
<span class="p">),</span>
</code></pre></div></div>

<p><strong>STEP 6) 최종 리텐션을 계산한다.</strong></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 6. 최종 리텐션을 계산한다.  </span>
<span class="n">CTE_monthly_retention</span> <span class="k">AS</span> <span class="p">(</span>  
    <span class="k">SELECT</span>  
        <span class="n">cohort_yyyymm</span><span class="p">,</span>  
        <span class="n">month_n</span><span class="p">,</span>  
        <span class="k">CAST</span><span class="p">(</span><span class="n">users_cnt</span> <span class="k">AS</span> <span class="nb">DOUBLE</span><span class="p">)</span>  
        <span class="o">/</span>  
        <span class="k">CAST</span><span class="p">(</span><span class="n">FIRST_VALUE</span><span class="p">(</span><span class="n">users_cnt</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span>  
            <span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">cohort_yyyymm</span>  
            <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">month_n</span>  
            <span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="n">UNBOUNDED</span> <span class="k">PRECEDING</span> <span class="k">AND</span> <span class="n">UNBOUNDED</span> <span class="k">FOLLOWING</span>  
        <span class="p">)</span>  
        <span class="k">AS</span> <span class="n">monthly_retention</span>  
    <span class="k">FROM</span>  
        <span class="n">CTE_month_n_cnt</span>  
    <span class="k">ORDER</span> <span class="k">BY</span>  
        <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>  
<span class="p">)</span>
</code></pre></div></div>

<p><strong>STEP 7) 중복되지 않은 신규 항목들만 Insert할 수 있도록 조건화한다.</strong></p>

<p><img src="/assets/2024-01-01-retention-batch-query/step7.webp" alt="" /></p>
<blockquote>
  <p>필자가 직접 작성</p>
</blockquote>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 7. 중복되지 않은 신규 항목들만 Insert할 수 있도록 조건화한다.  </span>
<span class="n">CTE_monthly_retention_inserted</span> <span class="k">AS</span> <span class="p">(</span>  
    <span class="k">SELECT</span>  
        <span class="o">*</span>  
    <span class="k">FROM</span>  
        <span class="n">CTE_monthly_retention</span>  
    <span class="nv">"if is_incremental()"</span>
    <span class="k">WHERE</span>  
        <span class="c1">-- 현재 시점 기준으로 1개월 전의 코호트: Month 0 리텐션 값만 Insert한다.  </span>
        <span class="p">(</span><span class="n">cohort_yyyymm</span> <span class="o">=</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'1'</span> <span class="k">MONTH</span> <span class="k">AND</span> <span class="n">month_n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>  
        <span class="c1">-- 현재 시점 기준으로 2개월 전의 코호트: Month 1 리텐션 값만 Insert한다.  </span>
        <span class="k">OR</span> <span class="p">(</span><span class="n">cohort_yyyymm</span> <span class="o">=</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'2'</span> <span class="k">MONTH</span> <span class="k">AND</span> <span class="n">month_n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>  
        <span class="c1">-- 현재 시점 기준으로 3개월 전의 코호트: Month 2 리텐션 값만 Insert한다.  </span>
        <span class="k">OR</span> <span class="p">(</span><span class="n">cohort_yyyymm</span> <span class="o">=</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'3'</span> <span class="k">MONTH</span> <span class="k">AND</span> <span class="n">month_n</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span>  
        <span class="c1">-- 현재 시점 기준으로 4개월 전의 코호트: Month 3 리텐션 값만 Insert한다.  </span>
        <span class="k">OR</span> <span class="p">(</span><span class="n">cohort_yyyymm</span> <span class="o">=</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'4'</span> <span class="k">MONTH</span> <span class="k">AND</span> <span class="n">month_n</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span>  
        <span class="c1">-- 현재 시점 기준으로 5개월 전의 코호트: Month 4 리텐션 값만 Insert한다.  </span>
        <span class="k">OR</span> <span class="p">(</span><span class="n">cohort_yyyymm</span> <span class="o">=</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'5'</span> <span class="k">MONTH</span> <span class="k">AND</span> <span class="n">month_n</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>  
        <span class="c1">-- 현재 시점 기준으로 6개월 전의 코호트: Month 5 리텐션 값만 Insert한다.  </span>
        <span class="k">OR</span> <span class="p">(</span><span class="n">cohort_yyyymm</span> <span class="o">=</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'6'</span> <span class="k">MONTH</span> <span class="k">AND</span> <span class="n">month_n</span> <span class="o">=</span> <span class="mi">5</span><span class="p">)</span>  
        <span class="c1">-- 현재 시점 기준으로 7개월 전의 코호트: Month 6 리텐션 값만 Insert한다.  </span>
        <span class="k">OR</span> <span class="p">(</span><span class="n">cohort_yyyymm</span> <span class="o">=</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'7'</span> <span class="k">MONTH</span> <span class="k">AND</span> <span class="n">month_n</span> <span class="o">=</span> <span class="mi">6</span><span class="p">)</span>  
    <span class="nv">"endif"</span>
    <span class="k">ORDER</span> <span class="k">BY</span>  
        <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>  
<span class="p">)</span>
</code></pre></div></div>

<p><strong>STEP 8) 출력한다.</strong></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>  
    <span class="o">*</span>  
<span class="k">FROM</span>  
    <span class="n">CTE_monthly_retention_inserted</span>  
<span class="p">;</span>
</code></pre></div></div>

<h1 id="6-결론">6. 결론</h1>

<p>Data Mart나 Batch Query에 대한 이론은 누구나 쉽게 온라인에서 공부할 수 있지만, 실제 Metrics 별로 모범이 될 만한 레퍼런스를 찾기가 어려운 것 같습니다. 특히, 리텐션의 경우 분명히 일회성 쿼리의 문제점을 해결해야 할 필요성이 클 것임에도 불구하고 저는 개인적으로 구글링을 통해서 적절한 레퍼런스를 전혀 찾지 못했습니다. 그래서 이참에 퍼블릭 레퍼런스를 제가 한 번 만들어보자는 결심이 들어 이렇게 글을 적어봤습니다.</p>

<p>그러나 저의 레퍼런스가 절대로 정답은 아닐 것입니다. Batch Query 모범 사례를 찾기 어렵다는 점은 그만큼 각 프로덕트의 도메인 특수성과 데이터의 형태가 극명하게 달라 절대불변의 정답이 없다는 의미일지도 모르겠습니다.</p>

<p>그러므로, 저의 사례는 가볍게 참고만 해주시고, 독자 분들께서 처한 다양한 특수성에 따라 가장 효율적인 리텐션 측정 환경을 구축하시길 바라겠습니다. 물론, 저의 논리적 오류나 개선 방향에 대한 피드백도 언제나 감사히 받겠습니다. 읽어주셔서 감사합니다.</p>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="Data Analysis" /><category term="SQL" /><category term="Data Warehouse" /><summary type="html"><![CDATA[코호트 리텐션의 의미와 중요성에 대해 말씀드리고, Batch Query를 사용하여 회원가입 월 코호트 별로 Monthly Range Retention을 계산하는 방법을 제시해드릴게요.]]></summary></entry></feed>