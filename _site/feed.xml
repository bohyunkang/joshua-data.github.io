<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-12-14T23:28:59+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Joshua Kim</title><subtitle>Data Analyst</subtitle><entry><title type="html">『마스터링 이더리움』 중요한 내용 모조리 요약</title><link href="http://localhost:4000/mastering-ethereum/" rel="alternate" type="text/html" title="『마스터링 이더리움』 중요한 내용 모조리 요약" /><published>2023-12-05T00:00:00+09:00</published><updated>2023-12-05T00:00:00+09:00</updated><id>http://localhost:4000/mastering-ethereum</id><content type="html" xml:base="http://localhost:4000/mastering-ethereum/"><![CDATA[<blockquote>
  <p>개발적인 용어가 난무해서 당시에는 도저히 펼쳐 볼 엄두가 안 났지만, 이 업계에서 약 3년 가까이 구르다보니 어느 정도 잘 읽히게 되었다. 그래서 2023년 1월 1일 새해 목표 중 하나로 “<strong>마스터링 이더리움 완독하고 정리하기</strong>”를 세우게 되었다. 그리고 약 1개월 만에 다 읽게 되었다.</p>
</blockquote>

<h3 id="contents">CONTENTS</h3>
<ol>
  <li>들어가는 글</li>
  <li>주의사항</li>
  <li><strong>[Chapter 01–02]</strong> What is Ethereum? &amp; Intro to Ethereum</li>
  <li><strong>[Chapter 03]</strong> Ethereum Clients</li>
  <li><strong>[Chapter 04]</strong> Cryptography</li>
  <li><strong>[Chapter 05]</strong> Wallets</li>
  <li><strong>[Chapter 06]</strong> Transactions</li>
  <li><strong>[Chapter 07]</strong> Smart Contracts &amp; Solidity</li>
  <li><strong>[Chapter 08]</strong> Smart Contracts &amp; Vyper</li>
  <li><strong>[Chapter 09]</strong> Smart Contracts &amp; Security</li>
  <li><strong>[Chapter 10]</strong> Tokens</li>
  <li><strong>[Chapter 11]</strong> Oracles</li>
  <li><strong>[Chapter 12]</strong> Decentralized Applications (dApps)</li>
  <li><strong>[Chapter 13]</strong> Ethereum Virtual Machine (EVM)</li>
  <li><strong>[Chapter 14]</strong> Consensus</li>
</ol>

<hr />

<h3 id="disclaimer">DISCLAIMER</h3>
<p>본 아티클은 작성자의 전/현직 기업의 사업 내용과 전혀 관련이 없으며, 개인적인 학습을 통해 작성한 것임을 밝힙니다.</p>

<p><img src="/assets/2023-12-05-mastering-ethereum/textbook.webp" alt="" /></p>
<blockquote>
  <p><a href="https://product.kyobobook.co.kr/detail/S000001916933">Source</a></p>
</blockquote>

<h1 id="1-들어가는-글">1. 들어가는 글</h1>

<p>때는 2021년 3월, 블록체인과 가상자산에 대해 무지몽매한 상태로 업계에 처음 발을 들였다. 생소한 블록체인 기술과 아키텍처를 이해하려고 노력해도 도무지 감이 안 잡혀서 고통스럽기도 했다. 많은 것을 의지했던 당시 옆 자리 선배님의 책상에는 마스터링 이더리움 책이 놓여 있었다.</p>

<blockquote>
  <p>“이 책이 제일 좋아요. 그런데 그만큼 엄청 어려워요.”</p>
</blockquote>

<p>개발적인 용어가 난무해서 당시에는 도저히 펼쳐 볼 엄두가 안 났지만, 이 업계에서 약 3년 가까이 구르다보니 어느 정도 잘 읽히게 되었다. 그래서 2023년 1월 1일 새해 목표 중 하나로 “<strong>마스터링 이더리움 완독하고 정리하기</strong>”를 세우게 되었다. 그리고 약 1개월 만에 다 읽게 되었다.</p>

<h1 id="2-주의사항">2. 주의사항</h1>

<ul>
  <li>개발을 위한 소스 코드 내용이나 암호학 이론 등 지나치게 깊은 내용은 Skimming하여 정리했다.</li>
  <li>개발자는 아니지만 프로그래밍과 데이터에 대한 이해를 하고 있는 입장에서, 완벽하지는 않지만 그래도 나름 잘 정리해봤다.</li>
  <li>이더리움의 바이블이라고 불리는 이 책을 직접 읽기에는 부담을 느끼시는 분들께서 빠르게 훑어보고 싶을 때 유용하게 쓰실 수 있기를 바란다.</li>
  <li>내용을 요약하는 과정에서 오류가 있을 수 있으므로, 정확한 레퍼런스는 반드시 본서를 참고해주시기를 바란다.</li>
</ul>

<h1 id="3-chapter-0102-what-is-ethereum--intro-to-ethereum">3. [Chapter 01–02] What is Ethereum? &amp; Intro to Ethereum</h1>

<p>비트코인의 스크립트(Script) 언어가 의도적으로 지불 조건에 대한 단순한 True/False 평가에만 제한되어 있는 반면, 이더리움 언어는 튜링 완전 언어다. 이것은 이더리움이 범용 컴퓨터로 직접 작동할 수 있음을 의미한다.</p>

<p>여러 블록체인의 성격을 파악하기 위해  <strong>개방성</strong>,  <strong>공공성</strong>,  <strong>국제화</strong>,  <strong>탈중앙화</strong>,  <strong>중립성</strong>,  <strong>검열저항성</strong>  등의 평가 기준이 필요하다.</p>

<p>이더리움은 탈중앙화된 State Machine으로서, Key-Value Tuple로 표현할 수 있는 모든 데이터를 저장할 수 있는 저장소의 상태 전이(State Change)를 추적한다.</p>

<p><img src="/assets/2023-12-05-mastering-ethereum/state-change.webp" alt="" /></p>
<blockquote>
  <p><a href="https://takenobu-hs.github.io/downloads/ethereum_evm_illustrated.pdf">Source</a></p>
</blockquote>

<p>이더리움 상태 전이는 Bytecode를 실행하는 스택 기반 가상머신인 EVM에 의해 처리된다.</p>

<p>스마트 컨트랙트라는 EVM 프로그램은:</p>

<ul>
  <li>고수준 언어인 Solidity로 작성되고,</li>
  <li>EVM에서 실행되도록 Bytecode로 컴파일된다.</li>
</ul>

<p>이더리움의 State는 트랜잭션 및 시스템 상태가 머클 패트리샤 트리(<a href="https://ethereum.org/en/developers/docs/data-structures-and-encoding/patricia-merkle-trie/">MERKLE PATRICIA TRIE</a>)라고 하는 시리얼라이즈된 해시 데이터 구조로, 각 노드의 DB에 저장된다.</p>

<p><img src="/assets/2023-12-05-mastering-ethereum/merkle-patricia-trie.webp" alt="" /></p>
<blockquote>
  <p><a href="https://medium.com/codechain/modified-merkle-patricia-trie-how-ethereum-saves-a-state-e6d7555078dd">Source</a></p>
</blockquote>

<p>사실 암호화폐 기능은 탈중앙화된 월드 컴퓨터로서의 이더리움 기능에 부차적인 것이다.</p>

<ul>
  <li>ETH는 EVM이라고 하는 에뮬레이트된 컴퓨터에서 실행되는 컴퓨터 프로그램인 스마트 컨트랙트를 실행하는 데 사용되기 위한 것이다.</li>
</ul>

<p>EOA만 트랜잭션를 시작(Initiate)할 수 있고, 컨트랙트는 복잡한 실행 경로를 구축하여 다른 컨트랙트를 호출해서 반응(React)할 수 있다. 이것을 사용하는 전형적인 방법은 Multi-sig 스마트 트랜잭션 지갑에 지급 요청 트랜잭션을 전송하여 일부 ETH를 다른 주소로 보내는 것이다.</p>

<p><img src="/assets/2023-12-05-mastering-ethereum/eoa-ca.webp" alt="" /></p>
<blockquote>
  <p><a href="https://takenobu-hs.github.io/downloads/ethereum_evm_illustrated.pdf">Source</a></p>
</blockquote>

<ul>
  <li><strong>EOA</strong>  (Externally Owned Account): 트랜잭션을 시작할 수 있음</li>
  <li><strong>CA</strong>  (Contract Account): EOA의 함수 호출에 의해 반응할 수 있음</li>
</ul>

<p>블록체인에 컨트랙트를 배포</p>
<ul>
  <li>목적지 주소가  <code class="language-plaintext highlighter-rouge">0x00…0</code>인 특수 트랜잭션을 만드는 것</li>
</ul>

<p>컨트랙트에서 시작된 Internal Transaction은 Message라고도 한다.</p>

<h1 id="4-chapter-03-ethereum-clients">4. [Chapter 03] Ethereum Clients</h1>

<p>블록체인의 건전성, 복원력, 검열저항 특성은 독립적으로 운용되고 지리적으로 분산된 Full Nodes가 얼마나 많은지에 달려 있다.</p>

<p><img src="/assets/2023-12-05-mastering-ethereum/clients.webp" alt="" /></p>
<blockquote>
  <p><a href="https://ethereum.org/en/developers/docs/nodes-and-clients/client-diversity/">Source</a></p>
</blockquote>

<h1 id="5-chapter-04-cryptography">5. [Chapter 04] Cryptography</h1>

<p>타원 곡선 산술에서 소수로 나눈 나머지를 곱하는 것은 간단하지만, 나눗셈은 사실상 불가능하다. 이것을 이산로그문제라고 하며, 현재는 알려진 트랩도어는 없다.</p>

<p>타원 곡선 암호화는 최신 컴퓨터 시스템에서 광범위하게 활용되며, 이더리움에서 개인키와 디지털 서명을 사용하는 기초가 된다.</p>

<p>이더리움 공개키는 타원 곡선에 있는 점으로, 타원 곡선 방정식을 만족하는 x와 y 좌표의 집합을 의미한다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">공개키(K) = 개인키(k) * G(generator point)</code>
    <ul>
      <li>(여기에서 *은 일반적인 곱셈이 아닌, 특수 타원 곡선 곱하기 연산)</li>
    </ul>
  </li>
</ul>

<h1 id="6-chapter-05-wallets">6. [Chapter 05] Wallets</h1>

<p><img src="/assets/2023-12-05-mastering-ethereum/key-flowchart.webp" alt="" /></p>
<blockquote>
  <p>작성자: Joshua</p>
</blockquote>

<p>지갑은 보유 중인 Private Key들이 서로 관련이 있느냐 없느냐에 따라 비결정적 지갑과 결정적 지갑으로 구분된다.</p>

<ul>
  <li><strong>비결정적 지갑</strong>: 각기 다른 무작위 수로부터 각 Private Key를 무작위적으로 추출한다.</li>
</ul>

<p><img src="/assets/2023-12-05-mastering-ethereum/비결정적-지갑.webp" alt="" /></p>
<blockquote>
  <p><a href="http://wiki.hash.kr/index.php/HD_%EC%A7%80%EA%B0%91">Source</a></p>
</blockquote>

<ul>
  <li><strong>결정적 지갑</strong>: 모든 Private Key가 단일 마스터 키인 seed로부터 파생된다. seed는 단어 목록인 니모닉 코드 단어로 인코딩되어 불의의 사고에 대비할 수 있다.</li>
</ul>

<p><img src="/assets/2023-12-05-mastering-ethereum/결정적-지갑.webp" alt="" /></p>
<blockquote>
  <p><a href="http://wiki.hash.kr/index.php/HD_%EC%A7%80%EA%B0%91">Source</a></p>
</blockquote>

<ul>
  <li>(참고) <a href="http://wiki.hash.kr/index.php/HD_%EC%A7%80%EA%B0%91"><strong>HD 지갑</strong></a>: 결정적 지갑은 단일 시드에서 많은 키를 쉽게 유도하기 위해 만들어졌다. 현재 가장 진보한 형태의 결정적 지갑은 비트코인의 BIP32 표준으로 정의된 HD 지갑이다. HD 지갑은 부모 키가 연속된 자식 키를 유도할 수 있고, 각각의 자식키는 손자 키를 유도할 수 있는 구조인 트리 구조로 파생된 키를 포함한다. 이러한 구조는 부모 키가 자식 키의 시퀀스를 유도할 수 있고, 각각의 자식은 다시 또 손자 키의 시퀀스를 유도할 수 있다. HD 지갑은 결정적 지갑에 비해 몇 가지 장점이 있다. 먼저 HD 지갑의 트리 구조는 예를 들어, 특정 서브 키의 특정 분기는 입금을 위해 사용하고, 다른 브랜치는 출금의 잔돈을 받기 위해 사용할 수 있다. 또한 부서, 자회사, 특정 기능 또는 회계 카테고리로 다른 분기를 할당하여 기업 설정과 같은 구조적인 의미를 표현하는 데도 사용할 수 있다. HD 지갑의 또 다른 장점은 사용자가 개인키에 접근하지 않고, 연속된 공개키를 생성할 수 있는 것이다. HD 지갑은 보안상 안전하지 않은 서버, 보기 전용, 수신 전용의 용도로 사용할 수 있는데, 이때 지갑에는 자금을 움직이는 개인키가 들어 있지 않게 만들 수 있다.</li>
</ul>

<p><img src="/assets/2023-12-05-mastering-ethereum/HD-지갑.webp" alt="" /></p>
<blockquote>
  <p><a href="http://wiki.hash.kr/index.php/HD_%EC%A7%80%EA%B0%91">Source</a></p>
</blockquote>

<h1 id="7-chapter-06-transactions">7. [Chapter 06] Transactions</h1>

<p>이더리움은 Global Singleton State Machine이며, 트랜잭션은 이 State Machine을 움직여서 상태를 변경할 수 있도록 만든다.</p>

<p>트랜잭션은 다음 데이터를 포함하는 serialized binary message다.</p>

<p><img src="/assets/2023-12-05-mastering-ethereum/transaction.webp" alt="" /></p>
<blockquote>
  <p><a href="https://takenobu-hs.github.io/downloads/ethereum_evm_illustrated.pdf">Source</a></p>
</blockquote>

<ul>
  <li><strong>nonce</strong>,  <strong>gas price</strong>,  <strong>gas limit</strong>,  <strong>recipient</strong>,  <strong>value</strong>,  <strong>data</strong>,  <strong>v</strong>,  <strong>r</strong>,  <strong>s</strong></li>
</ul>

<p>트랜잭션 메시지 구조는 RLP(Recursive Length Prefix) 인코딩 체계를 사용하여 serialize된다.</p>

<p><img src="/assets/2023-12-05-mastering-ethereum/rlp.webp" alt="" /></p>
<blockquote>
  <p>작성자: Joshua</p>
</blockquote>

<p>(1)  <strong>Nonce</strong>: 해당 address에서 보낸 tx 건수 OR 컨트랙트 생성 건수 (scalar value). 사용상의 기능 및 트랜잭션 복제 방지의 효과를 지님.</p>

<p>(2)  <strong>Gas Price &amp; Limit</strong>: DoS 공격이나 실수로 막대한 자원을 소모하는 tx를 피하기 위한 metering 역할을 함.</p>

<p><img src="/assets/2023-12-05-mastering-ethereum/gas.webp" alt="" /></p>
<blockquote>
  <p><a href="https://ethereum.org/en/developers/docs/transactions/">Source</a></p>
</blockquote>

<p>(3)  <strong>Recipient</strong>: 이더리움은 to_address의 유효성을 검증하지 않는다. 이 유효성 검정은 사용자 인터페이스 수준에서 수행되어야 함.</p>
<ul>
  <li>recipient를 zero address(<code class="language-plaintext highlighter-rouge">0x00…0</code>)로 두면, 컨트랙트 생성 트랜잭션을 의미함</li>
</ul>

<p>(4)  <strong>value &amp; data</strong>: value는 지급량, data는 호출. EOA나 CA에 지급량 혹은 호출에 필요한 data payload를 전달함.</p>

<p>(5)  <strong>v, r, s</strong>: r과 s는 tx 메시지에 private key로 서명한 결과값. v는 서명을 확인하는 데 도움이 되는 복구 식별자와 chain id.</p>

<p><strong>트랜잭션 서명 프로세스</strong></p>
<ul>
  <li>(1) nonce, gasPrice, gasLimit, to, value, data, chainID, 0, 0의 9개 필드를 포함하는 tx 데이터 구조를 만든다.</li>
  <li>(2) RLP로 인코딩하여 serialized message를 생성한다.</li>
  <li>(3) serialized message를 Keccak-256 해시를 리턴한다.</li>
  <li>(4) 리턴된 해시를 private key로 ECDSA 서명을 계산한다.</li>
  <li>(5) 계산된 결과를 message의 v, r, s에 추가한다.</li>
</ul>

<p><strong>서명 및 전송 분리 (Offline Signing)</strong></p>

<ul>
  <li>Unsigned tx msg를 온라인에서 생성, 오프라인에서 private key를 통해 Sign하여 Signed tx msg를 온라인에 전달, 온라인에서 네트워크로 flood.</li>
</ul>

<p><img src="/assets/2023-12-05-mastering-ethereum/offline-signing.webp" alt="" /></p>
<blockquote>
  <p>작성자: Joshua</p>
</blockquote>

<p><strong>트랜잭션 전파</strong></p>
<ul>
  <li>(1) flood routing 프로토콜을 사용한다.</li>
  <li>(2) 각 노드는 적어도 13개의 다른 노드에 대한 연결을 유지한다.</li>
  <li>(3) 트랜잭션을 생성한 ‘직접’ 연결된 다른 모든 노드로 전송된다.</li>
  <li>(4) 각 노드의 관점에서 보면, 수신된 tx의 출처를 식별할 수 없다. 발신한 노드는 tx의 생성자일 수도 있고, 똑같은 tx 수신자일 수도 있기 때문이다.</li>
  <li>(5) 비트코인은 multi-sig 계정을 만들 수 있지만, 이더리움의 기본 EOA에는 multi-sig 기능이 없다. 컨트랙트 계정을 생성하여 multi-sig을 구현해야 한다.</li>
  <li>(6) 컨트랙트를 통해 더욱 다양한 형태의 multi-sig를 구현할 수 있다는 측면에서 유연성이 있지만, 컨트랙트 코드 자체에 의해 보안 취약점이 발생할 수 있으므로, multi-sig를 컨트랙트 수준이 아닌, EVM 수준에서 처리하게 하자는 제안이 많다.</li>
</ul>

<h1 id="8-chapter-07-smart-contracts--solidity">8. [Chapter 07] Smart Contracts &amp; Solidity</h1>

<p>컨트랙트 계정은 개인키를 갖지 않으므로 스마트 컨트랙트에 규정된 미리 결정된 방식으로 ‘스스로 제어’하는 반면, EOA는 프로토콜의 외부의 독립적인 ‘실제 세계’의 개인키로 생성되고 암호로 서명된 거래에 의해 제어된다.</p>
<ul>
  <li><strong>스마트 컨트랙트</strong>: 이더리움 네트워크 프로토콜(탈중앙화된 이더리움 월드 컴퓨터)의 일부인 EVM 컨텍스트 상에서 결정론적으로(deterministically) 작동하는 불변적인(immutable) 컴퓨터 프로그램</li>
</ul>

<p><strong>컨트랙트 생성</strong></p>
<ul>
  <li>컨트랙트 생성 트랜잭션은 고유한 컨트랙트 생성 주소, 즉  <code class="language-plaintext highlighter-rouge">0x0</code>으로 전송된다.</li>
  <li>컨트랙트 생성자는 프로토콜 수준에서 특별한 권한을 얻지 못한다. (스마트 컨트랙트 계정을 위한 개인키가 없기 때문)</li>
</ul>

<p>오류로 인해 컨트랙트 실행이 실패하면 모든 상태 변경은 트랜잭션이 실행되지 않은 것처럼 롤백(rolled back)된다.</p>

<p><strong>컨트랙트 삭제</strong></p>
<ul>
  <li>컨트랙트를 ‘삭제’하여 해당 주소에서 코드와 내부 상태를 제거하고 빈 계정으로 남길 수 있다. (<strong>SELFDESTRUCT</strong>) 이 작업은 Negative Gas, 즉 가스 환불이 일어나기 때문에 저장된 상태의 삭제로 인한 네트워크 클라이언트 자원을 반환하도록 하는 동기부여를 만든다.</li>
</ul>

<p>EVM은 x86_64 같은 머신 코드를 실행하는 컴퓨터의 CPU와 유사한 EVM Bytecode라는 특수한 형태의 코드를 실행하는 가상 머신이다.</p>

<p><img src="/assets/2023-12-05-mastering-ethereum/evm.webp" alt="" /></p>
<blockquote>
  <p><a href="https://takenobu-hs.github.io/downloads/ethereum_evm_illustrated.pdf">Source</a></p>
</blockquote>

<p><strong>Solidity 프로젝트의 주된 기능</strong></p>
<ul>
  <li>Solidity 언어로 작성된 프로그램을 EVM Bytecode로 변환하는 컴파일러인 solc이다.</li>
  <li>이더리움 스마트 컨트랙트를 위한 중요한 ABI(Application Binary Interface) 표준을 관리한다.</li>
</ul>

<p><strong>ABI (Application Binary Interface)</strong></p>
<ul>
  <li>ABI는 데이터 구조와 함수가 어떻게 기계 코드에서 사용되는지 그 방법을 정의한다. 즉, 기계 코드와 데이터를 교환하기 위해 인코딩 및 디코딩하는 기본 방법이다.</li>
  <li>이더리움에서 ABI는 EVM에서 컨트랙트 호출을 인코딩하고 트랜잭션에서 데이터를 읽는 데 사용된다.</li>
  <li>ABI의 목적은 컨트랙트에서 호출할 수 있는 함수를 정의하고 각 함수가 인수를 받아들이고 결과를 반환하는 방법을 설명하는 것이다.</li>
  <li>컨트랙트의 ABI는 함수 설명 및 이벤트의 JSON 배열로 지정된다.</li>
  <li>애플리케이션이 컨트랙트와 상호작용하는 데 필요한 것: ABI + 컨트랙트 주소</li>
</ul>

<p><strong>스마트 컨트랙트를 만들 때 함수 호출의 가스 비용을 최소화하기 위해 권장하는 지침</strong></p>
<ul>
  <li>(1) Dynamic Array 피하기</li>
  <li>(2) 다른 컨트랙트 호출 피하기</li>
</ul>

<h1 id="9-chapter-08-smart-contracts--vyper">9. [Chapter 08] Smart Contracts &amp; Vyper</h1>
<p>Chapter 07 솔리디티 편을 정독하는 것만으로 충분하다고 판단하여 과감히 생략함</p>

<h1 id="10-chapter-09-smart-contracts--security">10. [Chapter 09] Smart Contracts &amp; Security</h1>
<p>지나치게 개발과 보안적인 내용이라고 판단하여 과감히 생략함</p>

<h1 id="11-chapter-10-tokens">11. [Chapter 10] Tokens</h1>

<p><strong>ETH vs Token 잔액 비교</strong></p>
<ul>
  <li>이더리움 계정의 ETH 잔액은  <strong>프로토콜 수준</strong>에서 처리되는 반면,</li>
  <li>이더리움 계정의 Token 잔액은  <strong>컨트랙트 수준</strong>에서 처리된다.</li>
  <li>따라서 이더리움 프로토콜은 Token에 대해 아무것도 모른다.</li>
</ul>

<p>이더리움에서 새 Token을 만들려면 새로운 컨트랙트를 만들어야 한다. 배포된 컨트랙트는 Token의 소유권, 이전 및 접근 권한을 포함한 모든 것을 처리한다.</p>

<h2 id="erc20-tokens"><strong>ERC20 Tokens</strong></h2>

<p>ERC20을 준수한 토큰 컨트랙트는 최소한 다음 Function &amp; Events를 제공해야 한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 필수 Functions</span>

<span class="kd">function</span> <span class="nf">totalSupply</span><span class="p">()</span>
   <span class="c1">// 현재 존재하는 이 토큰의 전체 개수를 리턴한다. (ERC20 토큰의 공급량은 고정 or 가변)</span>
<span class="kd">function</span> <span class="nf">balanceOf</span><span class="p">(</span><span class="nx">account</span><span class="p">)</span>
   <span class="c1">// 해당 주소의 토큰 잔액을 리턴한다.</span>
<span class="kd">function</span> <span class="nf">transfer</span><span class="p">(</span><span class="nx">to</span><span class="p">,</span> <span class="nx">amount</span><span class="p">)</span>
   <span class="c1">// 해당 주소로 주어진 금액의 토큰을 전송한다. 그리고 성공 여부를 bool로 리턴한다.</span>
<span class="kd">function</span> <span class="nf">approve</span><span class="p">(</span><span class="nx">spender</span><span class="p">,</span> <span class="nx">amount</span><span class="p">)</span>
   <span class="c1">// 해당 주소로 주어진 최대 금액까지 여러 번 송금할 수 있도록 승인한다. 그리고 성공 여부를 bool로 리턴한다.</span>
<span class="kd">function</span> <span class="nf">transferFrom</span><span class="p">(</span><span class="k">from</span><span class="p">,</span> <span class="nx">to</span><span class="p">,</span> <span class="nx">amount</span><span class="p">)</span>
   <span class="c1">// 보내는 주소에서 받는 주소로 주어진 금액의 토큰을 전송한다. 보내는 주소로부터 approve를 받은 상태에서 최대 금액까지 가능하다. 그리고 성공 여부를 bool로 리턴한다.</span>
<span class="kd">function</span> <span class="nf">allowance</span><span class="p">(</span><span class="nx">owner</span><span class="p">,</span> <span class="nx">spender</span><span class="p">)</span>
   <span class="c1">// approve로 승인된 주소에서 송금할 수 있는 잔액을 리턴한다.</span>

<span class="c1">// 필수 Events</span>

<span class="nx">event</span> <span class="nc">Transfer</span><span class="p">(</span><span class="k">from</span><span class="p">,</span> <span class="nx">to</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
   <span class="c1">// transfer나 transferFrom이 성공되면 Transfer 이벤트가 트리거된다.</span>
<span class="nx">event</span> <span class="nc">Approval</span><span class="p">(</span><span class="nx">owner</span><span class="p">,</span> <span class="nx">spender</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
   <span class="c1">// approve가 성공되면 Approval 이벤트가 트리거된다.</span>

<span class="c1">// 선택 Functions</span>

<span class="kd">function</span> <span class="nf">name</span><span class="p">()</span>
   <span class="c1">// 토큰의 이름을 리턴한다.</span>
<span class="kd">function</span> <span class="nf">symbol</span><span class="p">()</span>
   <span class="c1">// 토큰의 심볼을 리턴한다.</span>
<span class="kd">function</span> <span class="nf">decimals</span><span class="p">()</span>
   <span class="c1">// 토큰을 나눌 수 있는 소수 자릿수를 리턴한다.</span>
</code></pre></div></div>
<blockquote>
  <p>작성자: Joshua</p>
</blockquote>

<p>ERC20 컨트랙트는 2개의 데이터 구조를 포함하고 있다.</p>
<ul>
  <li>(1) 잔고 추적하기 (<strong>balance</strong>)</li>
  <li>(2) 허용량을 추적하기 (<strong>approve</strong>)</li>
</ul>

<p><strong>approve → transferFrom</strong>  구조는 거래소에서 사용할 수 있다.</p>
<ul>
  <li>예를 들어, 회사가 ICO를 위해 토큰을 판매하는 경우, 크라우드세일 컨트랙트를 approve할 수 있다.</li>
</ul>

<p><img src="/assets/2023-12-05-mastering-ethereum/josh-ico-1.webp" alt="" /></p>
<blockquote>
  <p>작성자: Joshua</p>
</blockquote>

<p><img src="/assets/2023-12-05-mastering-ethereum/josh-ico-2.webp" alt="" /></p>
<blockquote>
  <p>작성자: Joshua</p>
</blockquote>

<p>일반적으로 컨트랙트의  <code class="language-plaintext highlighter-rouge">transfer(from, to, 100 JOSH)</code>를 실행할 때, 받는 주소를 컨트랙트 자체의 주소로 입력할 경우 토큰이 영원히 갇혀 손실된다.</p>
<ul>
  <li>이를 해결할 수 있는 유일한 방법은 해당 컨트랙트가  <strong>approve &amp; transferFrom</strong>  워크플로 함수를 통해 보내는 주소가 transferFrom을 사용하여 반환하도록 하는 코드도 내장된 상태가 되어야 하는 것이다. 물론, 이는 보내는 주소의 지갑 앱이 transferFrom 함수 호출 기능을 보유해야 한다.</li>
</ul>

<p>토큰 전송에서 트랜잭션이 토큰 수신자에게 실제로 보내는 것이 아니다. 대신, 받는 사람의 주소가 토큰 컨트랙트 자체의 맵에 추가된다.</p>

<p><strong>상태 변경</strong></p>
<ul>
  <li>ETH를 주소로 보내는 트랜잭션: 주소의 상태를 변경</li>
  <li>토큰을 주소로 전송하는 트랜잭션: 토큰 컨트랙트의 상태를 변경 (주소의 상태는 변경하지 않는다.)</li>
</ul>

<p><strong>ERC20 토큰의 문제점</strong></p>
<ul>
  <li>ERC20 토큰을 지원하는 지갑조차도 사용자가 토큰 컨트랙트를 명시적으로 추가하지 않는 한 토큰 잔액을 인식하지 못한다.</li>
</ul>

<p><img src="/assets/2023-12-05-mastering-ethereum/metamask.webp" alt="" /></p>
<blockquote>
  <p>메타마스크가 토큰 컨트랙트를 매핑하지 않은 상태에서는 최종 사용자가 직접 Import Tokens를 통해 추가해줘야 한다. (출처: Metamask Chrome Extension)</p>
</blockquote>

<ul>
  <li>거래소를 통해 ETH를 ERC20 토큰으로 교환할 때는 송금 대상과 수수료 대상이 모두 ETH였는데, ERC20 토큰을 ETH로 교환할 때는 송금 대상과 수수료 대상이 서로 달라진다. 이는 UX 측면에서 불편함이 해소되어야 하는 부분이다.</li>
</ul>

<h2 id="erc223-tokens">ERC223 Tokens</h2>

<p>ERC223은 tokenFallback 함수를 통해 목적지 주소를 컨트랙트로 설정하여 잘못 송금하는 경우의 문제를 해결하고자 제안된 표준이다.</p>

<h2 id="erc721-tokens">ERC721 Tokens</h2>

<p>ERC721은 증서(deed)로도 알려진 대체할 수 없는(non-fungible) 토큰에 대한 표준을 위한 것이다.</p>

<p>ERC721 표준은 증서에 의해 그 소유권이 고유하게 추적될 수 있는 한, 그 대상의 종류에 대해 제한이나 규정을 두지 않으며, 이러한 추적은 256bit 식별자에 의해 이루어진다.</p>

<p><strong>ERC20 vs. ERC721 비교</strong></p>

<table>
  <thead>
    <tr>
      <th><strong>구분</strong></th>
      <th><strong>ERC20</strong></th>
      <th><strong>ERC721</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>기본 Mapping Key</strong></td>
      <td>address</td>
      <td>증서(deed) ID</td>
    </tr>
    <tr>
      <td><strong>추적 대상</strong></td>
      <td>각 address의 잔액</td>
      <td>증서 ID와 owner’s address</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>작성자: Joshua</p>
</blockquote>

<p><strong>ERC721 컨트랙트의 Interface 필수 사양 &amp; 선택 사양</strong></p>

<ul>
  <li>필수 사양 = ERC165</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 필수 Functions (ERC165)</span>
<span class="nf">balanceOf</span><span class="p">(</span><span class="nx">owner</span><span class="p">)</span>
   <span class="c1">// 특정 주소가 소유한 증서의 개수를 리턴한다.</span>
<span class="nf">ownerOf</span><span class="p">(</span><span class="nx">tokenId</span><span class="p">)</span>
   <span class="c1">// 특정 증서의 소유자 주소를 리턴한다.</span>
<span class="nf">transfer</span><span class="p">(</span><span class="nx">to</span><span class="p">,</span> <span class="nx">tokenId</span><span class="p">)</span>
   <span class="c1">// 특정 증서를 해당 주소로 전송한다. payable 상태가 리턴된다.</span>
<span class="nf">approve</span><span class="p">(</span><span class="nx">to</span><span class="p">,</span> <span class="nx">tokenId</span><span class="p">)</span>
   <span class="c1">// 해당 주소가 특정 증서를 사용할 수 있도록 승인한다. payable 상태가 리턴된다.</span>
<span class="nf">setApprovalForAll</span><span class="p">(</span><span class="nx">operator</span><span class="p">,</span> <span class="nx">approved</span><span class="p">)</span>
   <span class="c1">//  해당 주소로 모든 증서를 사용할 수 있도록 승인한다. payable 상태가 리턴된다.</span>
<span class="nf">transferFrom</span><span class="p">(</span><span class="k">from</span><span class="p">,</span> <span class="nx">to</span><span class="p">,</span> <span class="nx">tokenId</span><span class="p">)</span>
   <span class="c1">// 보내는 주소에서 받는 주소로 특정 증서를 전송한다. 보내는 주소로부터 approve를 받은 경우에만 가능하다. 그리고 payable 상태가 리턴된다.</span>
<span class="nf">supportsInterface</span><span class="p">(</span><span class="nx">interfaceId</span><span class="p">)</span>
   <span class="c1">// Interface 검증을 할 수 있다. 해당 interface 지원 여부를 bool로 리턴한다.</span>

<span class="c1">// 필수 Events (ERC165)</span>
<span class="nx">event</span> <span class="nc">Transfer</span><span class="p">(</span><span class="k">from</span><span class="p">,</span> <span class="nx">to</span><span class="p">,</span> <span class="nx">tokenId</span><span class="p">)</span>
   <span class="c1">// transfer나 transferFrom이 payable 되면 Transfer 이벤트가 트리거된다.</span>
<span class="nx">event</span> <span class="nc">Approval</span><span class="p">(</span><span class="nx">owner</span><span class="p">,</span> <span class="nx">approved</span><span class="p">,</span> <span class="nx">tokenId</span><span class="p">)</span>
   <span class="c1">// approve가 payable 되면 Approval 이벤트가 트리거된다.</span>
<span class="nx">event</span> <span class="nc">ApprovalForAll</span><span class="p">(</span><span class="nx">owner</span><span class="p">,</span> <span class="nx">operator</span><span class="p">,</span> <span class="nx">approved</span><span class="p">)</span>
   <span class="c1">// setApprovalForAll이 payable 되면 ApprovalForAll 이벤트가 트리거된다.</span>
</code></pre></div></div>

<blockquote>
  <p>작성자: Joshua</p>
</blockquote>

<ul>
  <li>선택 사양</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 선택 Functions (메타데이터) (ERC721)</span>
<span class="kd">function</span> <span class="nf">name</span><span class="p">()</span>
   <span class="c1">// 본 컨트랙트의 이름을 리턴한다.</span>
<span class="kd">function</span> <span class="nf">symbol</span><span class="p">()</span>
   <span class="c1">// 본 컨트랙트의 심볼을 리턴한다.</span>
<span class="kd">function</span> <span class="nf">tokenUri</span><span class="p">(</span><span class="nx">tokenId</span><span class="p">)</span>
   <span class="c1">// 해당 증서에 연결된 메타데이터 주소인 URI를 리턴한다.</span>

<span class="c1">// 선택 Functions (증서 및 소유자 열거) (ERC721)</span>
<span class="kd">function</span> <span class="nf">totalSupply</span><span class="p">()</span>
   <span class="c1">// 현재 존재하는 증서의 전체 개수를 리턴한다.</span>
<span class="kd">function</span> <span class="nf">tokenByIndex</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span>
   <span class="c1">// 해당 index에 위치하는 증서의 ID를 리턴한다.</span>
<span class="kd">function</span> <span class="nf">countOfOwners</span><span class="p">()</span>
   <span class="c1">// 현재 존재하는 소유자 주소의 전체 개수를 리턴한다.</span>
<span class="kd">function</span> <span class="nf">ownerByIndex</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span>
   <span class="c1">// 해당 index에 위치하는 증서의 소유자 주소를 리턴한다.</span>
<span class="kd">function</span> <span class="nf">tokenOfOwnerByIndex</span><span class="p">(</span><span class="nx">owner</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span>
   <span class="c1">// 해당 index에 위치하는 증서와 소유자 주소를 통해 증서의 ID를 리턴한다.</span>
</code></pre></div></div>

<blockquote>
  <p>작성자: Joshua</p>
</blockquote>

<p><strong>토큰 표준의 목적</strong></p>
<ul>
  <li>컨트랙트 간의 상호운용성(Interoperability)을 장려하는 것이다.</li>
  <li>즉, ERC20 표준을 따르는 컨트랙트를 배포하면 기존 지갑 사용자는 지갑을 업그레이드하는 노력을 들이지 않고도 토큰을 원활하게 전송할 수 있다.</li>
</ul>

<h1 id="12-chapter-11-oracles">12. [Chapter 11] Oracles</h1>

<p>합의를 유지하기 위해서 EVM 실행은 완전히 결정론적이고, 이더리움 상태와 서명된 트랜잭션의 공유 컨텍스트에 기반을 두고 있어야 한다.</p>
<ul>
  <li>(1) EVM 및 스마크 컨트랙트는 임의성을 위한 고유한 소스가 없다.</li>
  <li>(2) 외부 데이터는 트랜잭션의 데이터 payload로서만 유입될 수 있다.</li>
</ul>

<p>예를 들면, EVM이 스마트 컨트랙트에 Random Function의 사용을 금지하는 맥락은 대강 그림과 같다.</p>

<p><img src="/assets/2023-12-05-mastering-ethereum/random-function.webp" alt="" /></p>
<blockquote>
  <p>작성자: Joshua</p>
</blockquote>

<p>오라클은 이상적으로 스마트 컨트랙트를 위해 이더리움 플랫폼으로 축구 경기의 결과나 금 가격 혹은 순수 난수와 같은 외부 (Off-chain) 정보를 가지고 오는 데 Trustless 방법을 제공한다.</p>

<p><strong>오라클의 핵심 디자인</strong></p>
<ul>
  <li>(1) Off-chain 소스에서 데이터를 수집하고,</li>
  <li>(2) 이 데이터를 Signed Msg로 On-chain에 전송하고,</li>
  <li>(3) 이를 컨트랙트의 Storage에 저장하여 사용한다.</li>
</ul>

<h2 id="오라클-설정하는-세-가지-방법"><strong>오라클 설정하는 세 가지 방법</strong></h2>

<p><strong>(1) 즉시 읽기</strong></p>
<ul>
  <li>즉시 읽기 방식의 오라클은 ‘<a href="http://ethereumbook.info/">http://ethereumbook.info</a>의 주소는 무엇인가?’ 또는 ‘이 사람은 18세 이상인가?’와 같은 즉각적인 결정이 필요한 데이터만을 제공한다.</li>
  <li>이런 종류의 오라클은 컨트랙트 Storage에 데이터를 저장하고, 다른 컨트랙트는 오라클 컨트랙트에 요청을 해서 이러한 데이터를 검색할 수 있다. 그리고 이 데이터는 업데이트될 수도 있다.</li>
  <li>오라클 Storage에 있는 데이터는 dApp에 의해 직접 조회될 수 있기 때문에 번거로운 절차나 트랜잭션을 처리하는 Gas Fee가 필요하지 않다.</li>
  <li>이 저장된 데이터는 효율성이나 프라이버시 때문에 Raw Data가 아닌, 머클 트리에서 Hashing된 Root Hash를 저장하는 것으로 충분할 수 있다.</li>
</ul>

<p><strong>(2) 게시-구독</strong></p>
<ul>
  <li>게시-구독 방식의 오라클은 값의 업데이트가 빈번한 데이터를 효과적으로 브로드캐스트하는 역할로 제공한다.</li>
  <li>이 데이터는 온체인 컨트랙트에 의해 polling되거나 업데이트를 위한 Off-chain 데몬에 의해 모니터링된다.</li>
  <li>즉, 오라클이 새로운 데이터로 업데이트되면, 새로운 데이터를 쓸 수 있음을 구독자들에게 알린다.</li>
  <li>Polling이 컨트랙트로부터 수행되어야 하는 경우 상당한 Gas Fee가 발생할 수 있다.</li>
</ul>

<p><strong>(3) 요청-응답</strong></p>
<ul>
  <li>요청-응답 방식의 오라클은 컨트랙트에 저장하기에는 데이터가 너무 크고, 사용자는 그 중 일부의 데이터만 필요하는 경우에 사용된다.</li>
  <li>요청-응답 방식은 그림과 같이 여러 단계에 걸친 비동기 프로세스이다.</li>
</ul>

<pre><code class="language-plain"># 요청-응답 방식 오라클의 프로세스
   (1) 오라클 CA가 dApp으로부터 질의(query)를 받는다.
   (2) 오라클 CA는 해당 질의를 분석한다.
   (3) 오라클 CA는 dApp의 비용 지불 여부와 접근 권한 등을 확인한다.
   (4) 오라클 CA는 Off-chain 소스에서 관련 데이터를 검색한다.
   (5) 오라클 CA는 검색된 데이터가 포함된 TX에 Sign한다.
   (6) 오라클 CA는 Signed TX를 네트워크로 전파한다.
   (7) 알림 등 필요한 추가 TX를 스케줄링한다.
</code></pre>
<blockquote>
  <p>작성자: Joshua</p>
</blockquote>

<h2 id="계산-오라클">계산 오라클</h2>

<p>지금까지는 데이터를 요청하고 전달하는 맥락의 오라클이었다면, 계산 오라클은 On-chain에서 실행 불가능한 계산을 리턴하는 데 사용할 수 있다.</p>
<ul>
  <li>예를 들면, 계산 오라클을 통해 회귀 계산이나 머신러닝을 수행하여 채권 컨트랙트의 수익률을 추정할 수 있다.</li>
  <li>중앙화된 데이터 또는 계산 오라클은 이더리움 네트워크에서는 단일 실패 지점(SPOF)이 된다.</li>
</ul>

<p><strong>계산 오라클 문제의 개선 방법: 탈중앙화 오라클</strong></p>
<ul>
  <li>탈중앙화 오라클은 데이터 가용성을 보장하고 On-chain 데이터 Aggregation 시스템을 갖춘 개별 데이터 제공자의 네트워크를 만드는 수단이다.</li>
  <li><strong>체인링크</strong>: 평판 CA, 오더매칭 CA, Aggregation CA라는 3가지 핵심 컨트랙트와 데이터 공급자의 Off-chain 레지스트리로 구성된 탈중앙화 오라클 네트워크이다.</li>
  <li><strong>Aggregation CA</strong>: 여러 오라클로부터 응답을 수집하고, 최종 결과를 계산하여, 그 결과를 피드백해준다.</li>
  <li>Aggregation을 위한 함수를 공식화하는 것이 가장 어려운 문제인데, 값의 분포를 통한 penalizing, median 등 다양한 집계 방법들이 있다.</li>
</ul>

<h1 id="13-chapter-12-decentralized-applications-dapps">13. [Chapter 12] Decentralized Applications (dApps)</h1>

<p>dApp은 대부분 또는 완전히 탈중앙화된 애플리케이션이다. 션실적으로 이더리움 생태계에서 완전히 탈중앙화된 앱은 매우 드물다. 대부분 중앙화된 서비스와 서버를 사용하는 형태의 dApp이다.</p>

<p><strong>전형적인 중앙화된 아키텍처와 대비하여 dApp이 가진 장점</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">지속성</code></li>
  <li><code class="language-plaintext highlighter-rouge">투명성</code></li>
  <li><code class="language-plaintext highlighter-rouge">검열저항성</code></li>
</ul>

<h2 id="애플리케이션이-탈중앙화될-수-있는-측면들">애플리케이션이 탈중앙화될 수 있는 측면들</h2>

<p><strong>(1) 백엔드: 스마트 컨트랙트</strong></p>
<ul>
  <li>앱의 백엔드 혹은 서버 구성요소를 스마트 컨트랙트로 대체할 수 있다. 물론, 컨트랙트의 실행 비용이 매우 비싸기 때문에 최소한의 부분만 대체하는 것이 좋다.</li>
  <li>컨트랙트가 배포된 후 코드를 변경할 수 없다.  <strong>SELFDESTRUCT</strong>  연산코드가 프로그래밍된 경우완전히 제거하는 것 외에는 코드 자체를 수정할 수 없다.</li>
</ul>

<p><strong>(2) 프론트엔드: 웹 UI</strong></p>
<ul>
  <li>dApp 클라이언트 쪽 인터페이스는 HTML/CSS/JS를 사용할 수 있다. 메시지 서명, TX 전송, 키 관리 같은 이더리움과의 상호작용은 Metamask 같은 익스텐션을 통해 웹 브라우저에서 수행된다.</li>
</ul>

<p><strong>(3) 데이터 스토리지</strong></p>
<ul>
  <li>높은 Gas Price와 낮은 Block Gas Limit 때문에 컨트랙트는 많은 양의 데이터를 저장하거나 처리하는 데 적합하지 않다.</li>
  <li>따라서 대부분의 dApp은 Off-chain 데이터 스토리지 서비스를 사용하는데, 사이즈가 큰 데이터들을 이더리움 체인으로부터 데이터 스토리지 플랫폼으로 옮겨 저장한다.</li>
  <li>클라우드 처럼 중앙화된 방식, 혹은 IPFS나 이더리움의 Swarm 같은 탈중앙화된 방식</li>
  <li><strong>IPFS(Inter-planetary File System)</strong>: 저장된 객체를 P2P 네트워크 내 Peer들에게 배포하는 content-addressable 스토리지 시스템이다.</li>
  <li>content-addressable이란, 각 파일이 hashing되고, 그 hash를 통해 해당 파일을 식별할 수 있음을 의미한다. 즉, hash로 요청하여 모든 IPFS 노드에서 파일을 검색할 수 있다.</li>
  <li><strong>Swarm</strong>: IPFS와 유사한 content-addressable P2P 스토리지 시스템이다.</li>
</ul>

<p><strong>(4) 메시지 통신</strong></p>
<ul>
  <li>앱 간, 앱 내 인스터스 간, 혹은 앱 사용자 간의 메시지를 교환하기 위해 여러 가지 탈중앙화 프로토콜을 사용할 수 있다.</li>
  <li>대표적으로 Go-ethereum의 일부 도구인 Whisper</li>
</ul>

<p><strong>(5) 네임 레졸루션 (Name Resolution)</strong></p>
<ul>
  <li>ENS(Ethereum Name Service)</li>
</ul>

<p><img src="/assets/2023-12-05-mastering-ethereum/ens.webp" alt="" /></p>
<blockquote>
  <p><a href="https://docs.ens.domains/">Source</a></p>
</blockquote>

<p><strong>경매 dApp의 아키텍처 운용 사례</strong></p>

<p><img src="/assets/2023-12-05-mastering-ethereum/auction-dapp.webp" alt="" /></p>
<blockquote>
  <p>작성자: Joshua</p>
</blockquote>

<p><strong>경매 dApp의 주요 구성요소</strong></p>
<ul>
  <li>ERC721 컨트랙트</li>
  <li>경매 컨트랙트</li>
  <li>Vue JS 프레임워크를 사용하는 Web Frontend</li>
  <li>이더리움에 연결하는 web3.js 라이브러리</li>
  <li>데이터 스토리지인 Swarm 클라이언트</li>
  <li>경매 대화방을 위한 Whisper 클라이언트</li>
</ul>

<p><strong>경매 dApp을 더 탈중앙화하기 위한 방법은 크게 두 가지</strong></p>
<ul>
  <li>모든 애플리케이션 소스코드를 Swarm이나 IPFS에 저장한다.</li>
  <li>ENS를 사용하여 Name을 참조하여 dApp에 접근한다.</li>
</ul>

<p><strong>dApp 거버넌스는 크게 두 가지 옵션 중 하나를 선택하여 배포할 수 있다.</strong></p>
<ul>
  <li>dApp의 컨트랙트에 대한 특정 통제권을 지닌 EOA가 있는 경우</li>
  <li>dApp의 컨트랙트에 대한 특정 통제권을 지닌 EOA가 없는 경우</li>
</ul>

<p>dApp을 구축할 때 컨트랙트를 완전히 독립적으로 만들고 출시한 후에 제어할 권한을 없게 만들든지 또는 특권 계정을 만들고 위험에 노출될 위험을 감수해야 하는지를 결정해야 한다.</p>
<ul>
  <li>하지만 장기적으로 진정한 dApp은 특권 계정을 위한 특수 접근 권한을 허용하지 말아야 한다. 왜냐하면 그것은 탈중앙화된 것이 아니기 때문이다.</li>
</ul>

<h2 id="ens-ethereum-name-service">ENS (Ethereum Name Service)</h2>

<p>전통적인 인터넷에서 DNS(Domain Name System)는 브라우저에서 사람이 읽을 수 있는 이름을 사용할 수 있게 해준다. 이더리움 블록체인에서는 ENS(Ethereum Name Service)가 이와 같은 문제를 탈중앙화된 방식으로 풀어준다.</p>
<ul>
  <li>이더리움 재단의 기부 주소  <strong>0xfB6916…d359</strong>: ENS를 지원하는 지갑에서는 간단하게  <strong>ethereum.eth</strong></li>
  <li>Name의 등록, 관리, 그리고 경매를 위한 여러 dApp이 ENS 기능을 지원</li>
</ul>

<p><strong>ENS의 개선 제안 3가지</strong></p>
<ul>
  <li>ENS의 기본 기능 정의한 EIP-137</li>
  <li><code class="language-plaintext highlighter-rouge">.eth</code> 루트의 경매 시스템을 설명한 EIP-162</li>
  <li>주소의 역 등록을 지정한 EIP-181</li>
</ul>

<p><strong>ENS는 다음 그림과 같이 ‘샌드위치’ 디자인 철학</strong></p>

<p><img src="/assets/2023-12-05-mastering-ethereum/ens-sandwich.webp" alt="" /></p>
<blockquote>
  <p>작성자: Joshua</p>
</blockquote>

<p><strong>맨 아래 계층 (EIP-137)</strong></p>

<p><img src="/assets/2023-12-05-mastering-ethereum/eip-137.webp" alt="" /></p>
<blockquote>
  <p>작성자: Joshua</p>
</blockquote>

<p>Namehash 알고리즘</p>
<ul>
  <li>어떤 이름이라도 그 이름을 식별하는 해시로 변환할 수 있는 Recursive 알고리즘</li>
  <li>즉, Namehash는 재귀적으로 이름의 각 구성요소를 해시하여 유효한 입력 도메인에 대한 고유한 고정 길이 문자열(또는 node)을 생성한다.</li>
  <li>재귀성이 중요한 이유는 각 name이 서브도메인을 무한히 가질 수 있는데, 이를 반복적으로 재계산하려면 Gas Fee가 많이 소요되므로, 루트 도메인의 node 값을 미리 컨트랙트에 삽입하여 계산 효율성을 갖추기 위한 것이다.</li>
  <li>위 그림에서 node는 Namehash 알고리즘에 의해 변환된 hash를 의미한다.</li>
</ul>

<p>resolver 컨트랙트</p>
<ul>
  <li>앱과 관련된 Swarm 주소, 앱에 지불할 주소나 앱의 Hash와 같은 이름에 대한 질문에 답변할 수 있는 사용자 생성 컨트랙트이다.</li>
</ul>

<p><strong>중간 계층 (EIP-162)</strong></p>

<p><img src="/assets/2023-12-05-mastering-ethereum/eip-162.webp" alt="" /></p>
<blockquote>
  <p>작성자: Joshua</p>
</blockquote>

<p><strong>최상위 계층 (EIP-181)</strong></p>

<p><img src="/assets/2023-12-05-mastering-ethereum/eip-181.webp" alt="" /></p>
<blockquote>
  <p>작성자: Joshua</p>
</blockquote>

<p><strong>ENS에서 이름을 확인하는 과정</strong></p>
<ul>
  <li>(1) 해석하고 싶은 이름을 통해 ENS Registry가 호출된다.</li>
  <li>(2) 레코드가 존재하면 ENS Registry는 resolver의 주소를 리턴한다.</li>
  <li>(3) 해당 주소의 resolver는 요청된 자원에 적절한 method를 통해 호출된다.</li>
  <li>(4) resolver는 원하는 결과를 리턴한다.</li>
</ul>

<p>이 프로세스는 resolver의 기능을 naming system 자체와 분리하여 더 많은 유연성을 얻을 수 있다는 이점이 있다. 즉, ENS의 향후 확장하기 용이한 것이다.</p>

<p><strong>경매 dApp을 완전히 탈중앙화된 상태일 때 아키텍처 사례</strong></p>

<p><img src="/assets/2023-12-05-mastering-ethereum/dapp-browser.webp" alt="" /></p>
<blockquote>
  <p>작성자: Joshua</p>
</blockquote>

<h1 id="14-chapter-13-ethereum-virtual-machine-evm">14. [Chapter 13] Ethereum Virtual Machine (EVM)</h1>

<p>EVM은 마이크로소프트의 .NET 프레임워크 VM이나 Java와 같은 Bytecode 컴파일된 프로그래밍 언어의 Interpreter와 비슷한 역할을 하는 계산 엔진이다.</p>

<p>EVM은 스마트 컨트랙트 배포 및 실행을 처리하는 이더리움의 일부다.</p>
<ul>
  <li>EOA to EOA로의 간단한 값을 전송하는 TX는 사실상 EVM이 필요 없지만, 그 외 모든 것은 EVM에 의한 상태 업데이트를 수반한다.</li>
</ul>

<p>EVM은 유사 튜링 완전 상태 머신(quasi-Turing-complete state machine)이다.</p>
<ul>
  <li>이것은 스마트 컨트랙트 실행에 사용할 수 있는 가스량에 따라 모든 실행 프로세스가 유한 개의 계산 단계로 제한된다는 것을 의미한다.</li>
</ul>

<p>EVM은 메모리 내의 모든 값을 스택에 저장하는 스택 기반 아키텍처다.</p>
<ul>
  <li>256bit의 단어 크기로 동작하며, 주소 지정이 가능한 여러 개의 데이터 구성요소를 가지고 있다.</li>
</ul>

<p><strong>EVM의 구성요소</strong></p>

<p><img src="/assets/2023-12-05-mastering-ethereum/evm-architecture.webp" alt="" /></p>
<blockquote>
  <p><a href="https://takenobu-hs.github.io/downloads/ethereum_evm_illustrated.pdf">Source</a></p>
</blockquote>

<ul>
  <li>(1) 실행할 컨트랙트의 bytecode가 저장되는 불변 프로그램 코드 ROM</li>
  <li>(2) 모든 위치가 0으로 초기화된 휘발성 메모리</li>
  <li>(3) 이더리움 상태의 일부인 영구 스토리지 (0으로 초기화됨)</li>
</ul>

<p>EVM은 실행 순서가 외부에서 구성되기 때문에 스케줄링 기능이 없다.</p>
<ul>
  <li>즉, 이더리움 클라이언트가 검증된 블록의 트랜잭션을 통해 어떤 스마트 컨트랙트가 어떤 순서로 실행되어야 하는지를 결정한다.</li>
  <li>이러한 의미에서 이더리움 월드 컴퓨터는 JS처럼 단일 스레드다.</li>
</ul>

<p><strong>EVM 아키텍처와 실행 컨텍스트</strong></p>

<p><img src="/assets/2023-12-05-mastering-ethereum/evm-architecture-context.webp" alt="" /></p>
<blockquote>
  <p>작성자: Joshua</p>
</blockquote>

<p>EVM은 일반적인 Bytecode 연산 작업 외에도 계정 정보(address, balance 등) 및 블록 정보(block number, current gas price 등)에 접근할 수도 있다.</p>

<p>EVM의 작업은 스마트 컨트랙트 코드의 실행 결과로 유효한 상태 변화를 계산하여 이더리움 상태를 업데이트 하는 것이다.</p>
<ul>
  <li>이러한 측면에서 이더리움을  <strong>transaction-based state machine</strong>으로 설명</li>
  <li>외부 주체(즉, EOA 및 Miner)가 TX 생성, 수락 및 주문을 통해 상태 변화를 시작</li>
</ul>

<p>이더리움 상태의 가장 상위 레벨에는  <strong>World State</strong>가 있다.</p>
<ul>
  <li>World State는 이더리움 주소(160bit)를 Account에 매핑한 것</li>
  <li>각 이더리움 주소는 ETH balance, nonce, account storage, programming code를 의미</li>
</ul>

<p><strong>이더리움 주소의 Nonce</strong></p>
<ul>
  <li>EOA일 경우: 성공적으로 전송한 TX의 수</li>
  <li>CA일 경우: 생성된 컨트랙트의 수</li>
</ul>

<p><strong>EOA에는 storage가 비어 있고, programming code가 없다.</strong></p>

<p><img src="/assets/2023-12-05-mastering-ethereum/eoa-ca.webp" alt="" /></p>
<blockquote>
  <p><a href="https://takenobu-hs.github.io/downloads/ethereum_evm_illustrated.pdf">Source</a></p>
</blockquote>

<p><strong>TX가 스마트 컨트랙트 코드를 실행하면:</strong></p>
<ul>
  <li>EVM은 생성 중인 현재 블록 및 처리 중인 특정 TX와 관련하여 필요한 모든 정보로 instance화 된다.</li>
  <li>TX가 컨트랙트 코드를 실행하다가 어떤 시점에서 가스 부족(Out of Gas) 예외가 발생하면 실행이 즉시 중단되고 TX가 중단된다.</li>
  <li>이더리움 상태는 변경되지 않으며, 단지 TX 발신자의 nonce가 증가되고 중단시점까지 코드를 실행하는 데 사용된 가스 만큼 ETH 잔액이 줄어든다.</li>
</ul>

<p><strong>정지 문제 (halting problem)</strong></p>
<ul>
  <li>어떠한 스케줄러 없이 단일 스레드 머신처럼 동작하는 이더리움에게 매우 중요한 문제다.</li>
  <li>그러나 가스를 사용하면 해결 방법이 생긴다.</li>
  <li>미리 지정된 최대 계산량을 수행한 후에 실행이 종료되지 않는다면 프로그램 실행은 EVM에 의해 중단된다.</li>
  <li>이렇게 하면 EVM이 유사(quasi) 튜링 완전 머신이 된다.</li>
  <li>즉, 프로그램이 특정 계산량 내에서 종료되는 경우에만 프로그램을 실행할 수 있다.</li>
</ul>

<p><strong>가스 (Gas)</strong></p>
<ul>
  <li>이러디움에서는 Block Gas Limit까지 프로그램을 실행할 수 있는데, 고정되어 있지 않기 대문에 시간이 지남에 따라 Limit을 늘리는 것에 동의할 수도 있다.</li>
  <li>가스는 이더리움 블록체인에서 작업을 수행하는 데 필요한 계산 및 스토리지 자원을 측정하는 이더리움의 단위다.</li>
  <li>비트코인은 KB 단위의 TX 크기만 고려하여 TX Fee를 측정하지만, 이더리움은 TX 및 컨트랙트 코드 실행에 의해 수행되는 모든 계산 단계를 고려한다.</li>
</ul>

<p><strong>가스의 역할</strong></p>
<ul>
  <li>(1) 이더리움의 가격 방어 수단 역할</li>
  <li>(2) 채굴자에 대한 보상 버퍼 역할</li>
  <li>(3) DoS 공격에 대한 방어 수단 역할 (따라서 공격자가 스팸 TX를 보내지 못하게 한다.)</li>
</ul>

<p><strong>가스 계산</strong></p>

<pre><code class="language-plain">   채굴 비용 = Gas Used * Gas Price
   잔여 가스 = Gas Limit * Gas Used
   환불 ETH = 잔여 가스 * Gas Price
</code></pre>
<blockquote>
  <p>작성자: Joshua</p>
</blockquote>

<ul>
  <li>새로운 블록을 만들 때 이더리움 네트워크에 있는 채굴자들은 pending TX들 중에서 더 높은 Gas Price를 지불하려는 TX를 선택할 수 있다.</li>
  <li>따라서 더 높은 Gas Price를 제공하면 굴자에게 TX를 포함하고 더 빨리 확인하도록 유도할 것이다.</li>
</ul>

<p><strong>Negative Gas</strong></p>
<ul>
  <li>이더리움은 컨트랙트 실행 중에 사용된 Gas 중 일부를 환불함으로써 사용된 저장 변수 및 계정을 삭제하도록 권장한다.</li>
  <li>환불 메커니즘의 악용을 피하기 위해 최대 환불액은 사용된 총 가스량의 50%로 설정된다.</li>
</ul>

<pre><code class="language-plain">   1. 컨트랙트를 삭제(SELFDESTRUCT)하면 24,000 Gas의 환급 가치가 있다.
   2. 0이 아닌 값에서 0으로 저장 주소를 변경하면 15,000 Gas의 환급 가치가 있다.
</code></pre>
<blockquote>
  <p>작성자: Joshua</p>
</blockquote>

<p><strong>Block Gas Limit</strong></p>
<ul>
  <li>블록의 모든 TX에서 소비될 수 있는 가스의 최대량이며, 한 블록에 들어갈 수 있는 TX 건수를 제한함</li>
  <li>채굴자가 현재 Block Gas Limit을 초과하는 가스가 필요한 TX를 포함하려 한다면, 그 블록은 네트워크에 의해 거절됨</li>
  <li>대부분의 이더리움 클라이언트는 “tx exceeds block gas limit”의 경고를 통해 그러한 TX를 하지 못하게 할 것임</li>
  <li>Block Gas Limit은 네트워크의 채굴자들이 집합적으로 결정함</li>
  <li>이더리움 프로토콜에는 채굴자가 Gas Limit에 투표할 수 있는 메커니즘이 내장되어 있어 이후 블록에서 용량을 늘리거나 줄일 수 있음</li>
  <li>각 채굴자들은 +/- 어느 방향으로든 1/1,024 (0.0976%)의 비율로 Block Gas Limit을 조정하기 위해 투표할 수 있음</li>
</ul>

<p><img src="/assets/2023-12-05-mastering-ethereum/etherscan-average-gas-limit.webp" alt="" /></p>
<blockquote>
  <p><a href="https://etherscan.io/chart/gaslimit">Source</a></p>
</blockquote>

<h1 id="15-chapter-14-consensus">15. [Chapter 14] Consensus</h1>

<p><strong>합의 (Consensus)</strong></p>
<ul>
  <li>분산 시스템에서 각기 다른 참여자가 한 시스템의 전 체 상태에 모두 동의하여 동기화하기 위한 것</li>
  <li>신뢰할 수 있는 중재인이 없으면 다른 방법을 사용하여 불일치, 기만 또는 차이점을 해결해야 하는데, 합의 알고리즘은 보안 및 탈중앙화를 해결하는 데 사용되는 것</li>
</ul>

<p><strong>비트코인의 PoW 합의 알고리즘</strong></p>
<ul>
  <li>가능한 한 많은 참가자로부터 탈중앙화된 시스템에 대한 통제권을 유지하며 블록체인을 보호하는 목적을 지니고 있다.</li>
</ul>

<p><strong>이더리움의 PoW 알고리즘</strong></p>
<ul>
  <li>Ethash라고 부르는데, 비트코인의 PoW 알고리즘과는 약간 다르다.</li>
  <li>방향성 비순환 그래프(Directed Acyclic Graph, DAG)로 알려진 대규모 데이터 세트의 생성 및 분석에 의존함</li>
  <li>이더리움 PoW에는  <strong>난이도 폭탄(Difficulty Bomb)</strong>이라는 핸디캡이 있으며, 이는 이더리움 채굴을 점차 어렵게 만들어서 PoW에서 PoS로의 전환을 강요하고 있다.</li>
  <li>이더리움의 계획된 PoS 알고리즘은  <strong>Casper</strong>라고 불리며, Casper를 도입하려는 시도는 여러 번 연기되어, 난이도폭탄을 완화하고 강제로 연기시키는 개입이 필요했다.</li>
</ul>

<p><strong>방향성 비순환 그래프 (Directed Acyclic Graph, DAG)</strong></p>
<ul>
  <li>DAG의 목적: 자주 접근하는 대규모 데이터 구조를 유지하는 데 필요한 Ethash PoW 알고리즘을 만드는 것</li>
  <li>이는 Ethash가 ASIC 저항성을 갖게 만들려는 것으로, 고속 GPU보다 훨씬 빠른 주문형 반도체(ASIC) 채굴 장비를 만들기가 더 어려워진다는 의미</li>
  <li>즉, 제조 공장 및 대규모 예산에 접근할 수 있는 사람들이 채굴 인프라를 지배하고 합의 알고리즘의 보안을 훼손할 수 있는 PoW 채굴의 중앙 집중화를 피하고자 한 것</li>
</ul>

<p><strong>PoS 알고리즘</strong></p>

<ol>
  <li>블록체인은 Validator 집합을 유지하며, 블록체인의 기본 암호화폐(ETH)를 보유한 사람은 ETH를 컨트랙트에 예치시키는 특별한 유형의 TX를 보냄으로써 Validator가 될 수 있다.</li>
  <li>Validator는 유효한 다음 블록에 대해 제안하고  투표하는 순서를 따르며, 각 Validator의 투표 중요도는 보증금(지분)의 크게 따라 다르다.</li>
  <li>특정 Validator가 보유한 블록이 대다수의 Validator에 의해 거부된다면 보증금을 잃을 위험이 있다.</li>
  <li>반대로, 대다수의 Validator가 수락한 모든 블록에 대해 누적된 보증금에 비례하여 작은 보상을 얻는다.</li>
  <li>따라서 PoS는 Validator에게 보상 및 처벌 제도에 따라 정직하게 행동하고 합의 규칙을 따르도록 한다.</li>
  <li>PoW에서는 처벌이 외적(전기 사용에 따른 자금 손실)이라면, PoS에서 처벌은 처벌이 내재적(지분 손실)인 것이다.</li>
</ol>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="korean" /><category term="blockchain" /><summary type="html"><![CDATA[개발적인 용어가 난무해서 당시에는 도저히 펼쳐 볼 엄두가 안 났지만, 이 업계에서 약 3년 가까이 구르다보니 어느 정도 잘 읽히게 되었다. 그래서 2023년 1월 1일 새해 목표 중 하나로 “마스터링 이더리움 완독하고 정리하기”를 세우게 되었다. 그리고 약 1개월 만에 다 읽게 되었다.]]></summary></entry><entry><title type="html">데이터 분석가의 SQL 최적화 일기: SELF JOIN을 피하는 방법</title><link href="http://localhost:4000/how-to-avoid-self-joins/" rel="alternate" type="text/html" title="데이터 분석가의 SQL 최적화 일기: SELF JOIN을 피하는 방법" /><published>2023-11-30T00:00:00+09:00</published><updated>2023-11-30T00:00:00+09:00</updated><id>http://localhost:4000/how-to-avoid-self-joins</id><content type="html" xml:base="http://localhost:4000/how-to-avoid-self-joins/"><![CDATA[<blockquote>
  <p>대고객 서빙을 위해 엄청나게 큰 사이즈의 소스 테이블로부터 최적화된 데이터 마트 설계 고민을 많이 하고 있는 만큼, 이번에는 SELF JOIN 사례를 중심으로 SQL 성능에 대한 이야기를 들려드리겠습니다.</p>
</blockquote>

<h3 id="contents">CONTENTS</h3>
<ol>
  <li>들어가는 글</li>
  <li>Python과 달리 거칠게 사고해야 하는 SQL</li>
  <li>SELF JOIN을 하면 연산량이 제곱으로 늘어난다.</li>
  <li>Subquery와 EXISTS 사용하기</li>
  <li>결론: 무조건적 우월성은 없다.</li>
</ol>

<hr />

<h3 id="disclaimer">DISCLAIMER</h3>

<p>본 자료는 작성자 본인의 견해일 뿐이며, 실제 데이터베이스의 환경에 따라 적합하지 않을 수 있습니다. 이미지 출처를 제외한 모든 쿼리문과 내용은 본인의 경험에 의해 작성되었습니다. 작성된 쿼리문은 샘플로 작성한 것이며, 본인의 과거 및 현재 재직 회사의 업무 현황과 무관합니다.</p>

<h1 id="1-들어가는-글">1. 들어가는 글</h1>

<p><img src="/assets/2023-11-30-how-to-avoid-self-joins/join-meme.webp" alt="" /></p>
<blockquote>
  <p><a href="https://miro.medium.com/v2/resize:fit:800/1*DTET9ngrx2Gzu6ZJk0G9BQ.jpeg">Source</a></p>
</blockquote>

<p>안녕하세요. 저는 친구들 얼굴을 보면 위와 같은 이상한 생각을 하는 데이터 분석가 Joshua라고 합니다.</p>

<p>저는 일반적인 B2C 기업에서 데이터 분석가로 근무하며, GA4, Amplitude, BigQuery, Redash 등을 활용하여 A/B 테스트, 지표 모니터링 등을 수행하며 회사의 등대 역할을 하며 지냈습니다. 다른 분들과 비슷한 역할을 수행했던 것이죠.</p>

<p>또한 GA4, Amplitude 등과 같은 B2B 데이터 분석 플랫폼 서비스를 만드는 경험도 살짝 했는데요. 그러다보니 저의 R&amp;R은 서비스 자체의 데이터 분석 업무 외에도, 고객들에게 데이터를 서빙하기 위한 데이터 마트 설계와 최적화 업무에 집중되기도 했습니다. 제 타이틀을 멋있게 가공하면 최근에 떠오르는 포지션인 Analytics Engineer, 반쪽 짜리 데이터 엔지니어, 아니면 대충 쿼리 머신 혹은 분지니어(?)인 것 같기도 합니다. 😅</p>

<p>대고객 서빙을 위해 엄청나게 큰 사이즈의 소스 테이블로부터 최적화된 데이터 마트 설계 고민을 많이 하고 있는 만큼, 이번에는 SELF JOIN 사례를 중심으로 SQL 성능에 대한 이야기를 들려드리겠습니다.
(SQL 전문가 분들이 많이 계시는 만큼, 제 글을 비판적으로 고찰해주시면 감사하겠습니다! 😄)</p>

<p>쿼리로 고통 받으며 눈동자에 비가 내렸던 경험 이야기, 시작합니다! (울지마~ 울지마~ 울지마~)</p>

<p><img src="/assets/2023-11-30-how-to-avoid-self-joins/crying-cat-meme.avif" alt="" /></p>
<blockquote>
  <p><a href="https://www.google.com/url?sa=i&amp;url=https%3A%2F%2Fwww.dailydot.com%2Fnews%2Fcat-crying-memes-explainer%2F&amp;psig=AOvVaw1JpDJ5k_6Tx93h2YT8in_Y&amp;ust=1702536707113000&amp;source=images&amp;cd=vfe&amp;opi=89978449&amp;ved=0CBMQjRxqFwoTCMC01dLpi4MDFQAAAAAdAAAAABAD">Source</a></p>
</blockquote>

<h1 id="2-python과-달리-거칠게-사고해야-하는-sql">2. Python과 달리 거칠게 사고해야 하는 SQL</h1>

<p>SQL을 통해 OLAP(Online Analytical Processing)에 해당하는 데이터 웨어하우스를 구축하다보면, 종종  <strong>SELF JOIN</strong>이 필요합니다. 가령, 소스 테이블의 복사본인 Staging Table을 Pivoting 해야 하거나, 칼럼 A와 칼럼 B 간의 관계 규칙을 찾아 Data Cleaning을 해야 하는 경우에 특히 발생하는 것 같았어요.</p>

<p>가령, Python의 Pandas Dataframe 환경에서는 메소드를 통해 너무나도 쉽게 Pivoting을 하거나, 반복문과 조건문을 통해 칼럼 사이의 관계 규칙을 고작 몇 줄 코드 만으로 Data Cleaning을 할 수 있을 것입니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pandas</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">.</span><span class="n">pivot</span>
<span class="n">pandas</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">value</span> <span class="k">if</span> <span class="n">condition</span> <span class="ow">is</span> <span class="n">true</span> <span class="k">if</span> <span class="n">x</span> <span class="n">condition</span> <span class="k">else</span> <span class="n">value</span> <span class="n">of</span> <span class="n">condition</span> <span class="ow">is</span> <span class="n">false</span><span class="p">)</span>
</code></pre></div></div>

<p>하지만 안타깝게도 SQL에서는 다소 거친 방법으로 쿼리문을 작성해야 하므로 좀 더 테이블 자체를 기반의 Logical Thinking을 하는 것이 중요합니다.</p>

<p>가령 다음 기본적인 사례와 같이, 국가 별로 MAU를 집계할 경우에 SQL은 훨씬 거칠게 표현합니다.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>  
   <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="nb">datetime</span><span class="p">)</span> <span class="k">AS</span> <span class="n">yyyymm</span><span class="p">,</span>  
   <span class="n">country</span><span class="p">,</span>  
   <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">mau</span>  
<span class="k">FROM</span>  
   <span class="n">source_events</span>  
<span class="k">GROUP</span> <span class="k">BY</span>  
   <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>  
<span class="k">ORDER</span> <span class="k">BY</span>  
   <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>  
<span class="p">;</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">source_events</span><span class="p">[</span><span class="sh">'</span><span class="s">yyyymm</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">to_datetime</span><span class="p">(</span><span class="n">source_events</span><span class="p">[</span><span class="sh">'</span><span class="s">datetime</span><span class="sh">'</span><span class="p">]).</span><span class="n">dt</span><span class="p">.</span><span class="nf">to_period</span><span class="p">(</span><span class="sh">'</span><span class="s">M</span><span class="sh">'</span><span class="p">)</span>  
<span class="n">result_df</span> <span class="o">=</span> <span class="n">source_events</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">yyyymm</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">country</span><span class="sh">'</span><span class="p">]).</span><span class="nf">agg</span><span class="p">(</span><span class="n">mau</span><span class="o">=</span><span class="p">(</span><span class="sh">'</span><span class="s">user_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">nunique</span><span class="sh">'</span><span class="p">)).</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>  
<span class="n">result_df</span> <span class="o">=</span> <span class="n">result_df</span><span class="p">.</span><span class="nf">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">yyyymm</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">country</span><span class="sh">'</span><span class="p">]).</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  
<span class="nf">print</span><span class="p">(</span><span class="n">result_df</span><span class="p">)</span>
</code></pre></div></div>

<p>즉, 파이썬의  <code class="language-plaintext highlighter-rouge">to_period</code>,  <code class="language-plaintext highlighter-rouge">groupby</code>,  <code class="language-plaintext highlighter-rouge">nunique</code>  등과 같은 내장 메소드의 연산 원리를 이해하여 이를  <code class="language-plaintext highlighter-rouge">DATE_TRUNC</code>,  <code class="language-plaintext highlighter-rouge">COUNT(DISTINCT …)</code>,  <code class="language-plaintext highlighter-rouge">GROUP BY</code>  등의 SQL 함수와 Statement로 표현해야 하는 것이죠.</p>

<h1 id="3-self-join을-하면-연산량이-제곱으로-늘어난다">3. SELF JOIN을 하면 연산량이 제곱으로 늘어난다.</h1>

<p>먼저 다음과 같은 쿼리문 사례를 살펴보도록 하죠.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>  
   <span class="n">MAIN</span><span class="p">.</span><span class="nb">datetime</span><span class="p">,</span>  
   <span class="n">MAIN</span><span class="p">.</span><span class="n">user_id</span><span class="p">,</span>  
   <span class="n">MAIN</span><span class="p">.</span><span class="n">session_id</span><span class="p">,</span>  
   <span class="n">MAIN</span><span class="p">.</span><span class="n">event_index</span><span class="p">,</span>  
   <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_index</span><span class="p">,</span>  
   <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_key</span><span class="p">,</span>  
   <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_value</span>  
<span class="k">FROM</span>  
   <span class="n">source_events</span> <span class="n">MAIN</span>  
<span class="k">LEFT</span> <span class="k">JOIN</span>  
   <span class="n">source_events</span> <span class="n">SUB</span>  
   <span class="k">ON</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">user_id</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">user_id</span>  
      <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">session_id</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">session_id</span>  
      <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">event_index</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_index</span>  
<span class="k">WHERE</span>  
   <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">+</span> <span class="mi">0</span>  
   <span class="k">OR</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">+</span> <span class="mi">1</span>  
   <span class="k">OR</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">+</span> <span class="mi">2</span>  
   <span class="k">OR</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">+</span> <span class="mi">3</span>
</code></pre></div></div>

<p>위 사례는 가령 이런 상황으로 이해하시면 될 것 같습니다. 사용자의 이벤트 로그 소스 테이블에서 각 이벤트의 파라미터 key-value가 unnested된 상태로 존재하거나, 혹은 특정 파라미터의 index를 기준으로 인접한 파라미터 정보들만 추출해야 하는 상황에서 위와 같은 쿼리문 작성이 필요할 것입니다.</p>

<p>SQL의 연산 과정은  <strong>FROM → XXX JOIN → WHERE → GROUP BY → SELECT → HAVING → ORDER BY</strong>  등의 순으로 진행되는데요. 위 쿼리문을 연산하는 과정에서 WHERE Statement에 진입하기 전에, 먼저 FROM과 LEFT JOIN을 통해 모든 Row를 메모리에 로드하게 됩니다.</p>

<p><img src="/assets/2023-11-30-how-to-avoid-self-joins/sql-processing.webp" alt="" /></p>
<blockquote>
  <p><a href="https://blog.kakaocdn.net/dn/ckOt66/btrjP1TVZsq/Ta9JdTTiEd9tddkKkFk2n1/img.png">Source</a></p>
</blockquote>

<p>가령,  <code class="language-plaintext highlighter-rouge">source_events</code>  테이블이 1,000,000개의 Row로 구성되어 있다면, 최대 1,000,000 * 1,000,000개의 Row가 메모리에 올라오게 되는 것이죠. 이는 쿼리 엔진의 메모리 및 트래픽 DevOps 환경이 중요한 경우 분명히 문제가 됩니다. 혹은 Usage Limit이 걸려 있을 경우에는 쿼리 실행이 몇 시간 동안 진행되다가 아침에 눈을 떠보면 트래픽 제한으로 인해 실행이 실패되었다는 매우 슬프고 참담한 상황에 마주하게 될 것입니다.</p>

<p><img src="/assets/2023-11-30-how-to-avoid-self-joins/crying-meme.webp" alt="" /></p>
<blockquote>
  <p><a href="https://res.heraldm.com/content/image/2021/07/16/20210716000671_0.jpg">Source</a></p>
</blockquote>

<p>그렇다면, 이런 상황에서 어떻게 쿼리를 최적화할 수 있을까요?</p>

<h1 id="4-subquery와-exists-사용하기">4. Subquery와 EXISTS 사용하기</h1>

<p>위에서 보셨던 쿼리문을 아래와 같이 수정해봤습니다.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>  
   <span class="nb">datetime</span><span class="p">,</span>  
   <span class="n">user_id</span><span class="p">,</span>  
   <span class="n">session_id</span><span class="p">,</span>  
   <span class="n">event_index</span><span class="p">,</span>  
   <span class="n">event_param_index</span><span class="p">,</span>  
   <span class="n">event_param_key</span><span class="p">,</span>  
   <span class="n">event_param_value</span>  
<span class="k">FROM</span>  
   <span class="n">source_events</span> <span class="n">MAIN</span>  
<span class="k">WHERE</span>  
   <span class="k">EXISTS</span> <span class="p">(</span>  
      <span class="k">SELECT</span> <span class="mi">1</span>  
      <span class="k">FROM</span> <span class="n">source_events</span> <span class="n">SUB</span>  
      <span class="k">WHERE</span>  
         <span class="n">event_type</span> <span class="o">=</span> <span class="s1">'click_button'</span>  
         <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">user_id</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">user_id</span>  
         <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">session_id</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">session_id</span>  
         <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">event_index</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_index</span>  
         <span class="k">AND</span> <span class="p">(</span>  
            <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">+</span> <span class="mi">0</span>  
            <span class="k">OR</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">+</span> <span class="mi">1</span>  
            <span class="k">OR</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">+</span> <span class="mi">2</span>  
            <span class="k">OR</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">+</span> <span class="mi">3</span>  
         <span class="p">)</span>  
   <span class="p">)</span>
</code></pre></div></div>

<p>자, 어떻게 달라졌는지 차근차근 살펴보도록 하죠.</p>

<h3 id="1-먼저-left-join이-사라지고-where-statement의-subquery가-추가되었습니다">1. 먼저, LEFT JOIN이 사라지고, WHERE Statement의 Subquery가 추가되었습니다.</h3>

<p>JOIN보다 Subquery가 반드시 모든 상황에서 성능이 우월하지는 않지만, 이 상황에서는 메모리 데이터의 사이즈는 상당 부분 해소되었습니다. 앞서 말씀 드린 것처럼, SQL은 WHERE Statement를 고려하기 전에 먼저 FROM과 LEFT JOIN을 먼저 실행하게 되는데, WHERE Statement의 Subquery로 옮김으로써 LEFT JOIN에서 실행되어야 하는 작업을 WHERE에서 동시에 연산하여 메모리에 올릴 수 있게 되었습니다.</p>

<p>가령,  <code class="language-plaintext highlighter-rouge">source_events</code>  테이블의 Row 수가 1,000,000개 이고, WHERE를 통해 Filter out된 Row 수가 10,000개라면, 메모리에 올라가게 되는 Row 수는 이전의 최대 1,000,000 * 1,000,000개에서 1,000,000 * 10,000개로 1% 수준으로 급감하였습니다.</p>

<h3 id="2-in보다-exists가-연산-속도가-더-빠릅니다">2. IN보다 EXISTS가 연산 속도가 더 빠릅니다.</h3>

<p>IN과 EXISTS 모두 “<strong>XXX한 경우가 존재하니?</strong>”를 질문하는 과정으로 추상화할 수 있을 것 같은데요.</p>

<p>만약 IN을 통해 Filter out하려고 하면 가령 아래와 같은 쿼리문을 작성해야 합니다.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">WHERE</span>  
   <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_index</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">+</span> <span class="mi">0</span> <span class="k">FROM</span> <span class="p">...)</span>  
   <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_index</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">FROM</span> <span class="p">...)</span>  
   <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_index</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">+</span> <span class="mi">2</span> <span class="k">FROM</span> <span class="p">...)</span>  
   <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_index</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">+</span> <span class="mi">3</span> <span class="k">FROM</span> <span class="p">...)</span>  
<span class="p">...</span>
</code></pre></div></div>

<p>위 과정은 한 가지 단점이 있습니다.  <code class="language-plaintext highlighter-rouge">SUB.event_param_index</code>  칼럼의 값들을 일일이 출력해야 하는데요. 즉, 다양한 값들로 구성된 칼럼을 메모리에 로드해야 한다는 것이죠.</p>

<p>그러나 EXISTS를 통해 Filter out하려고 하면 아래와 같은 쿼리문으로 수정될 수 있습니다.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">WHERE</span>  
   <span class="k">EXISTS</span> <span class="p">(</span>  
      <span class="k">SELECT</span> <span class="mi">1</span>  
      <span class="k">FROM</span> <span class="p">...</span>  
      <span class="k">WHERE</span>  
         <span class="p">...</span>  
         <span class="k">AND</span> <span class="p">(</span>  
         <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">+</span> <span class="mi">0</span>  
         <span class="k">OR</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">+</span> <span class="mi">1</span>  
         <span class="k">OR</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">+</span> <span class="mi">2</span>  
         <span class="k">OR</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">+</span> <span class="mi">3</span>  
   <span class="p">)</span>
</code></pre></div></div>

<p>이 과정은 위에서 말씀 드린 IN의 단점을 상당 부분 해소합니다.  <code class="language-plaintext highlighter-rouge">SUB.event_param_index</code>  칼럼의 값들을 일일이 출력했던 것과 달리, 이번에는 조건을 만족하기만 하면 단순히 일괄적으로  <code class="language-plaintext highlighter-rouge">1</code>로만 구성된 칼럼을 메모리에 로드하게 됩니다. Data Type 측면에서 훨씬 메모리의 부담을 경감시킬 수 있습니다. (혹은 <code class="language-plaintext highlighter-rouge">1</code>이 아니라,  <code class="language-plaintext highlighter-rouge">True</code>나  <code class="language-plaintext highlighter-rouge">False</code>와 같은 Boolean 타입으로 출력하면 더 확실하게 경감시킬 수 있을 것 같네요.)</p>

<h1 id="5-결론-무조건적-우월성은-없다">5. 결론: 무조건적 우월성은 없다.</h1>

<p>자 이제 다시 최적화된 쿼리문 전체를 보시죠.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>  
   <span class="nb">datetime</span><span class="p">,</span>  
   <span class="n">user_id</span><span class="p">,</span>  
   <span class="n">session_id</span><span class="p">,</span>  
   <span class="n">event_index</span><span class="p">,</span>  
   <span class="n">event_param_index</span><span class="p">,</span>  
   <span class="n">event_param_key</span><span class="p">,</span>  
   <span class="n">event_param_value</span>  
<span class="k">FROM</span>  
   <span class="n">source_events</span> <span class="n">MAIN</span>  
<span class="k">WHERE</span>  
   <span class="k">EXISTS</span> <span class="p">(</span>  
      <span class="k">SELECT</span> <span class="mi">1</span>  
      <span class="k">FROM</span> <span class="n">source_events</span> <span class="n">SUB</span>  
      <span class="k">WHERE</span>  
         <span class="n">event_type</span> <span class="o">=</span> <span class="s1">'click_button'</span>  
         <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">user_id</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">user_id</span>  
         <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">session_id</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">session_id</span>  
         <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">event_index</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_index</span>  
         <span class="k">AND</span> <span class="p">(</span>  
            <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">+</span> <span class="mi">0</span>  
            <span class="k">OR</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">+</span> <span class="mi">1</span>  
            <span class="k">OR</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">+</span> <span class="mi">2</span>  
            <span class="k">OR</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">event_param_index</span> <span class="o">+</span> <span class="mi">3</span>  
         <span class="p">)</span>  
   <span class="p">)</span>
</code></pre></div></div>

<p>프로그래밍에는 반드시 “<strong>방법 A가 방법 B보다 우월하다.</strong>”라는 것은 존재하지 않은 것처럼, 각자의 환경에 따라 취사선택하며 최적화를 하는 것이 중요할 것입니다.</p>

<p>WHERE Statement의 Subquery가 JOIN보다 반드시 우월한 것도 아니고, 경우에 따라 EXISTS가 IN보다 반드시 뛰어난 성능을 보이지 않을 수도 있습니다.</p>

<p>또한, 일반적으로 Subquery와 EXISTS 문법은 SQL 초급 사용자 분들께는 살짝 팔로업하기 어려울 수 있으므로, 가독성 측면에서 추후 유지보수의 장애로 작용할 수도 있을 것입니다.</p>

<p><img src="/assets/2023-11-30-how-to-avoid-self-joins/infinite-challenge.webp" alt="" /></p>
<blockquote>
  <p><a href="https://i.pinimg.com/736x/cd/c3/57/cdc35735e9efc721d26a0f3f780178a4.jpg">Source</a></p>
</blockquote>

<p>앞으로, 대용량의 데이터 소스를 다루시다가 SELF JOIN 때문에 트래픽 문제가 발생하신다면 위와 같은 사례로도 접근 가능하다는 점을 참고하시고, 각자 처한 환경에 따라 최적화하여 가성비 좋은 데이터 분석을 하시길 바랄게요. 부족한 글을 읽어주셔서 감사합니다!</p>

<p><img src="/assets/2023-11-30-how-to-avoid-self-joins/bye-guys.webp" alt="" /></p>
<blockquote>
  <p>퇴사하겠다는 의미가 아니라, 계속 쿼리 작성하러 가겠다는 의미</p>
</blockquote>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="korean" /><category term="data_analytics" /><category term="sql" /><summary type="html"><![CDATA[대고객 서빙을 위해 엄청나게 큰 사이즈의 소스 테이블로부터 최적화된 데이터 마트 설계 고민을 많이 하고 있는 만큼, 이번에는 SELF JOIN 사례를 중심으로 SQL 성능에 대한 이야기를 들려드리겠습니다.]]></summary></entry><entry><title type="html">Toastmasters Club Log #1</title><link href="http://localhost:4000/toastmasters-club-log-1/" rel="alternate" type="text/html" title="Toastmasters Club Log #1" /><published>2023-11-25T00:00:00+09:00</published><updated>2023-11-25T00:00:00+09:00</updated><id>http://localhost:4000/toastmasters-club-log-1</id><content type="html" xml:base="http://localhost:4000/toastmasters-club-log-1/"><![CDATA[<blockquote>
  <p>Having recently become a member of JBTM last month, today marked my inaugural participation in the weekly in-person meeting. This occasion introduced me to a diverse array of our old members and new guests.</p>
</blockquote>

<p>I’m crafting this article to reflect on my experience joining JBTM, short for Jamsil Brunch Toastmasters Club, situated in Seoul, South Korea.</p>

<p><img src="/assets/2023-11-25-toastmasters-club-log-1/jbtm-profile.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.toastmasters.org/Find-a-Club/04049432-jamsil-brunch-toastmasters">Source</a></p>
</blockquote>

<p>Having recently become a member of JBTM last month, today marked my inaugural participation in the weekly in-person meeting. This occasion introduced me to a diverse array of our old members and new guests.</p>

<p><img src="/assets/2023-11-25-toastmasters-club-log-1/jbtm-selfie.webp" alt="" /></p>
<blockquote>
  <p>JBTM in-place meeting near Jamsil Olympics Stadium, Seoul (Nov 25, 2023)</p>
</blockquote>

<p>For your context, Toastmasters Club is a global non-profit organization dedicated to professional public speaking education, with branches spanning across the globe.</p>

<p><img src="/assets/2023-11-25-toastmasters-club-log-1/all-about-toastmasters.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.toastmasters.org/about">Source</a></p>
</blockquote>

<p>Since my initial membership at FJUTM (Fu Jen Catholic University, 輔大國際英語演講社FJUTM) in New Taipei City, Taiwan, back in 2018, my journey has consistently intertwined with Toastmasters Clubs due to my profound passion for public speaking and connecting with many global friends.</p>

<p><img src="/assets/2023-11-25-toastmasters-club-log-1/fjutm.webp" alt="" /></p>
<blockquote>
  <p>FJUTM in-place meeting in Fu Jen Catholic University, New Taipei City (Oct 21, 2018)</p>
</blockquote>

<p>Today, as one of the newly joined members of JBTM, I undertook my icebreaker speech as part of my Toastmasters pathway titled “Presentation Mastery.”</p>

<p><img src="/assets/2023-11-25-toastmasters-club-log-1/presentation-mastery.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.toastmasters.org/myhome">Source</a></p>
</blockquote>

<p>The purpose of my icebreaker speech was to familiarize the existing members with who I am, my character, and my personal growth journey. I titled it “Joshua, the Comfort Zone Hater”, signifying my continuous efforts to challenge myself across various academic studies, cultures, environments, and foreign languages.</p>

<p><img src="/assets/2023-11-25-toastmasters-club-log-1/the-comfort-zone-hater.webp" alt="" /></p>
<blockquote>
  <p>“Joshua, the Comfort Zone Hater”</p>
</blockquote>

<p>Assisted by the attentive and supportive members, I successfully completed my first role as a prepared speech deliverer.</p>

<p><img src="/assets/2023-11-25-toastmasters-club-log-1/feedback.webp" alt="" /></p>
<blockquote>
  <p>The lovely and grateful feedback on my icebreaker speech from our members of JBTM</p>
</blockquote>

<p>Individuals join Toastmasters Clubs for various reasons, such as learning foreign languages, making connections with local communities, conquering public speaking fears, and expressing their thoughts logically, persuasively, and coherently, step by step.</p>

<p>In my case, though I may not pinpoint precisely why I’m drawn to Toastmasters Club, I consistently find joy in expressing my thoughts, sharing feedback, and engaging in multilingual conversations. Regardless of my concrete motivations, my series of active participation in Toastmasters Clubs undeniably has instilled confidence in speaking across diverse settings. Thanks to the Toastmasters Club, I never feel lost or anxious when delivering speeches in business meetings or on official stages.</p>

<p>Stay tuned to witness my journey with Toastmasters Club as a comfort zone hater and a challenge lover!</p>

<p><img src="/assets/2023-11-25-toastmasters-club-log-1/membership-history.webp" alt="" /></p>
<blockquote>
  <p>My Toastmasters Membership History; New Taipei City, Austin TX, Suwon, and now Seoul.</p>
</blockquote>

<p><img src="/assets/2023-11-25-toastmasters-club-log-1/toastmasters-logo.webp" alt="" /></p>
<blockquote>
  <p><a href="https://en.wikipedia.org/wiki/Toastmasters_International">Source</a></p>
</blockquote>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="english" /><category term="public_speaking" /><category term="toastmasters" /><summary type="html"><![CDATA[Having recently become a member of JBTM last month, today marked my inaugural participation in the weekly in-person meeting. This occasion introduced me to a diverse array of our old members and new guests.]]></summary></entry><entry><title type="html">데이터 분석가의 SQL 최적화 일기: Static vs. Rolling Stickiness</title><link href="http://localhost:4000/static-vs-rolling-stickiness/" rel="alternate" type="text/html" title="데이터 분석가의 SQL 최적화 일기: Static vs. Rolling Stickiness" /><published>2023-11-19T00:00:00+09:00</published><updated>2023-11-19T00:00:00+09:00</updated><id>http://localhost:4000/static-vs-rolling-stickiness</id><content type="html" xml:base="http://localhost:4000/static-vs-rolling-stickiness/"><![CDATA[<blockquote>
  <p>대고객 서빙을 위해 엄청나게 큰 사이즈의 소스 테이블로부터 최적화된 데이터 마트 설계 고민을 많이 하고 있는 만큼, Stickiness 지표 사례를 중심으로 SQL 성능에 대한 이야기를 들려드리겠습니다.</p>
</blockquote>

<h3 id="contents">CONTENTS</h3>
<ol>
  <li>들어가는 글</li>
  <li>Rolling MAU vs. 30일 이동평균선</li>
  <li>Static MAU</li>
  <li>Stickiness 지표</li>
  <li>Rolling Stickiness</li>
  <li>Static Stickiness</li>
  <li>Data Mart를 통해 Rolling MAU 도입하기</li>
  <li>결론: Query Cost vs Data Freshness</li>
</ol>

<hr />

<h3 id="disclaimer">DISCLAIMER</h3>
<blockquote>
  <p>본 자료는 작성자 본인의 견해일 뿐이며, 실제 데이터베이스의 환경에 따라 적합하지 않을 수 있습니다. 이미지 출처를 제외한 모든 쿼리문과 내용은 본인의 경험에 의해 작성되었습니다. 작성된 쿼리문은 샘플로 작성한 것이며, 본인의 과거 및 현재 재직 회사의 업무 현황과 무관합니다.</p>
</blockquote>

<h1 id="1-들어가는-글">1. 들어가는 글</h1>

<p><img src="/assets/2023-11-19-static-vs-rolling-stickiness/unfinished-work.webp" alt="" /></p>
<blockquote>
  <p><a href="https://datasciencedojo.com/blog/data-science-memes/">Source</a></p>
</blockquote>

<p>안녕하세요. 저는 위 아이 처럼 데이터 분석가로 근무하고 있는 Joshua라고 합니다.</p>

<p>저는 일반적인 B2C 기업에서 데이터 분석가로 근무하며, GA4, Amplitude, BigQuery, Redash 등을 활용하여 A/B 테스트, 지표 모니터링 등을 수행하며 회사의 등대 역할을 하며 지냈습니다. 다른 분들과 비슷한 역할을 수행했던 것이죠.</p>

<p>또한 GA4, Amplitude 등과 같은 B2B 데이터 분석 플랫폼 서비스를 만드는 경험도 살짝 했는데요. 그러다보니 저의 R&amp;R은 서비스 자체의 데이터 분석 업무 외에도, 고객들에게 데이터를 서빙하기 위한 데이터 마트 설계와 최적화 업무에 집중되기도 했습니다. 제 타이틀을 멋있게 가공하면 최근에 떠오르는 포지션인 Analytics Engineer, 반쪽 짜리 데이터 엔지니어, 아니면 대충 쿼리 머신 혹은 분지니어(?)인 것 같기도 합니다. 😅</p>

<p>아무튼 대고객 서빙을 위해 엄청나게 큰 사이즈의 소스 테이블로부터 최적화된 데이터 마트 설계 고민을 많이 하고 있는 만큼, Stickiness 지표 사례를 중심으로 SQL 성능에 대한 이야기를 들려드리겠습니다.</p>

<p>(SQL 전문가 분들이 많이 계시는 만큼, 제 글을 비판적으로 고찰해주시면 감사하겠습니다! 😄)</p>

<h1 id="2-rolling-mau-vs-30일-이동평균선">2. Rolling MAU vs. 30일 이동평균선</h1>

<p>Rolling MAU란 마치 30일 이동평균선 인디케이터 등과 유사하게, 각 시점마다 최근 30일 동안의 MAU를 측정하는 지표입니다. 아래 GA4의 리포트는 WAU와 MAU를 모두 Rolling 방식으로 집계하고 있는 대표적인 사례라고 할 수 있을 것 같아서 가져와봤어요!</p>

<p><img src="/assets/2023-11-19-static-vs-rolling-stickiness/user-activity-over-time.webp" alt="" /></p>
<blockquote>
  <p><a href="https://measureschool.com/ga4-active-users/">Source</a></p>
</blockquote>

<p>하지만, 30일 이동평균선 인디케이터와 Rolling MAU의 연산 방식에는 중대한 차이점이 있습니다.</p>

<p><img src="/assets/2023-11-19-static-vs-rolling-stickiness/trading-view.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.tradingwithrayner.com/20-30-day-moving-average/">Source</a></p>
</blockquote>

<p>먼저 30일 이동평균선을 SQL스럽게 작성해본다면, 단순히  <code class="language-plaintext highlighter-rouge">AVG Window Functions</code>를 통해 즉각적으로 연산할 수 있습니다. Window Functions는 이미 출력된  <code class="language-plaintext highlighter-rouge">price</code>  칼럼 자체를 통해 연산하므로,  <code class="language-plaintext highlighter-rouge">daily_prices</code>  테이블을 중복으로 불러오지 않아 연산량이 기하급수적으로 증가하지 않습니다.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">WITH</span>
<span class="n">CTE_ma_30d</span> <span class="k">AS</span> <span class="p">(</span>
   <span class="k">SELECT</span>
      <span class="nb">date</span><span class="p">,</span>
      <span class="n">price</span><span class="p">,</span>
      <span class="k">AVG</span><span class="p">(</span><span class="n">price</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span>
         <span class="k">ORDER</span> <span class="k">BY</span> <span class="nb">date</span>
         <span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="mi">29</span> <span class="k">PRECEDING</span> <span class="k">AND</span> <span class="k">CURRENT</span> <span class="k">ROW</span>
      <span class="p">)</span> <span class="k">AS</span> <span class="n">ma_30d</span>
   <span class="k">FROM</span>
      <span class="n">daily_prices</span>
   <span class="k">ORDER</span> <span class="k">BY</span>
      <span class="mi">1</span>
<span class="p">)</span>
<span class="k">SELECT</span>
   <span class="o">*</span>
<span class="k">FROM</span>
   <span class="n">CTE_ma_30d</span>
<span class="p">;</span>
</code></pre></div></div>

<p>반면, Rolling MAU의 연산 방식은 중대한 문제점이 있습니다. 즉, Window Functions를 통해 연산하는 것이 어렵다는 점입니다. 아래 쿼리문을 살펴보면,  <code class="language-plaintext highlighter-rouge">SELECT Statement</code>  내 서브쿼리를 통해 Outer Table의 각  <code class="language-plaintext highlighter-rouge">date</code>마다 일일이 Inner Table의 가변적인 기간마다 모든  <code class="language-plaintext highlighter-rouge">user_id</code>  고유값 개수를  <code class="language-plaintext highlighter-rouge">COUNT</code>하게 됩니다. 즉,  <code class="language-plaintext highlighter-rouge">session_starts</code>  테이블 내의  <code class="language-plaintext highlighter-rouge">date</code>  고유값 개수가 365개라면, 각  <code class="language-plaintext highlighter-rouge">rolling_mau</code>  칼럼의 값을 계산하기 위해서는 동일한 테이블을 365번이나 메모리에 올려야 하는 것이죠.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">WITH</span>
<span class="n">CTE_rolling_mau</span> <span class="k">AS</span> <span class="p">(</span>
   <span class="k">SELECT</span>
      <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span>
      <span class="p">(</span>
         <span class="k">SELECT</span>
            <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_id</span><span class="p">)</span>
         <span class="k">FROM</span>
            <span class="n">session_starts</span> <span class="n">SUB</span>
         <span class="k">WHERE</span>
            <span class="n">DATE_ADD</span><span class="p">(</span><span class="s1">'DAY'</span><span class="p">,</span> <span class="o">-</span><span class="mi">29</span><span class="p">,</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">SUB</span><span class="p">.</span><span class="nb">date</span>
            <span class="k">AND</span> <span class="n">SUB</span><span class="p">.</span><span class="nb">date</span> <span class="o">&lt;=</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
      <span class="p">)</span> <span class="k">AS</span> <span class="n">rolling_mau</span>
   <span class="k">FROM</span>
      <span class="n">session_starts</span> <span class="n">MAIN</span>
   <span class="k">GROUP</span> <span class="k">BY</span>
      <span class="mi">1</span>
   <span class="k">ORDER</span> <span class="k">BY</span>
      <span class="mi">1</span>
<span class="p">)</span>
<span class="k">SELECT</span>
   <span class="o">*</span>
<span class="k">FROM</span>
   <span class="n">CTE_rolling_mau</span>
<span class="p">;</span>
</code></pre></div></div>

<p>결국, 30일 이동평균선과 달리 Rolling MAU의 경우 단순한 집계로 가능한 영역이 아니라,  <code class="language-plaintext highlighter-rouge">COUNT(DISTINCT user_id)</code>를 수행하기 위한 테이블 재탐색이 각 Row마다 중복 발생해야 하는 영역입니다. 따라서 이는 쿼리문의 성능과 비용 관리에 매우 부정적인 영향을 끼치게 됩니다.</p>

<h1 id="3-static-mau">3. Static MAU</h1>

<p>Static MAU는 제가 직접 마음대로 지어본 용어인데요. 😅 Rolling MAU에서 겪은 문제점에 대해 다음과 같은 방식으로 타협을 해봤습니다.</p>

<p><img src="/assets/2023-11-19-static-vs-rolling-stickiness/cat.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.reddit.com/r/ProgrammerHumor/comments/szxooa/the_difference_between_dynamic_vs_static_ip/?rdt=33714">Source</a></p>
</blockquote>

<p><strong>“어쩔 수 없네. 그럼, MAU는 Rolling 방식이 아닌 각 월 별로 Static하게 집계해보자!”</strong></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">WITH</span>
<span class="n">CTE_static_mau</span> <span class="k">AS</span> <span class="p">(</span>
   <span class="k">SELECT</span>
      <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="nb">date</span><span class="p">)</span> <span class="k">AS</span> <span class="k">month</span><span class="p">,</span>
      <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">static_mau</span>
   <span class="k">FROM</span>
      <span class="n">session_starts</span>
   <span class="k">GROUP</span> <span class="k">BY</span>
      <span class="mi">1</span>
   <span class="k">ORDER</span> <span class="k">BY</span>
      <span class="mi">1</span>
<span class="p">)</span>
<span class="k">SELECT</span>
   <span class="o">*</span>
<span class="k">FROM</span>
   <span class="n">CTE_static_mau</span>
<span class="p">;</span>
</code></pre></div></div>

<p>Static MAU는 Rolling MAU에 비해 다음과 같은 장/단점이 존재할 것 같습니다.</p>
<ul>
  <li><strong>장점</strong>: 쿼리 비용이 크게 절감되고 연산 속도가 빨라집니다.</li>
  <li><strong>단점</strong>: 쿼리가 실행되는 시점 당월의 경우, 월말이 도래하기 전까지는 MAU가 과소평가되어 데이터 분석의 Freshness가 저하됩니다. 즉, 오늘이 1월 2일이라면 1월의 MAU는 1월 1일부터 1월 2일까지만 집계되겠죠.</li>
</ul>

<h1 id="4-stickiness-지표">4. Stickiness 지표</h1>

<p>한편, 흔히 <code class="language-plaintext highlighter-rouge">DAU➗MAU</code>로 표현되는 Stickiness(사용자 고착도)를 측정하는 경우에는 Static과 Rolling 방식 사이의 고민이 더욱 깊어지게 됩니다.</p>

<p>Stickiness 지표는 토스, Instagram, YouTube, TikTok, 블라인드 등 활성 사용자들이 습관적으로 앱에 방문함으로써 광고 노출 효과 등을 극대화해야 하는 서비스에서 매우 중요한 지표입니다. 나쁘게 말하면, 사용자의 중독도를 파악하기 위한 지표인 것이죠. 😂</p>

<p><img src="/assets/2023-11-19-static-vs-rolling-stickiness/facebook.webp" alt="" /></p>
<blockquote>
  <p><a href="https://velog.io/@datarian/retention4">Source</a></p>
</blockquote>

<h1 id="5-rolling-stickiness">5. Rolling Stickiness</h1>

<p>Stickiness도 마찬가지로, Rolling Stickiness와 Static Stickiness로 구분하여 연산할 수 있는데요. (Static Stickiness도 제가 마음대로 지어본 용어입니다.) 먼저 Rolling Stickiness 지표 산출을 위한 쿼리문은 다음과 같습니다.
(참고로, 분모가 0이 되는 케이스의 경우, 0으로 반환되도록  <code class="language-plaintext highlighter-rouge">COALSECE(TRY(…), 0)</code> 함수를 사용했습니다. 혼동이 없으시길 바랄게요! 🙃)</p>

<p>이 경우 Rolling MAU 연산 방식과 마찬가지로, Outer Table의 각  <code class="language-plaintext highlighter-rouge">date</code>마다 일일이 Inner Table의 모든  <code class="language-plaintext highlighter-rouge">user_id</code>  고유값 개수를  <code class="language-plaintext highlighter-rouge">COUNT</code>하게 됩니다. 즉, 메모리 사용량과 트래픽 수준이 급격하게 상승할 것입니다.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">WITH</span>
<span class="n">CTE_rolling_stickiness</span> <span class="k">AS</span> <span class="p">(</span>
   <span class="k">SELECT</span>
      <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span>
      <span class="n">COALESCE</span><span class="p">(</span>
         <span class="n">TRY</span><span class="p">(</span>
            <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_id</span><span class="p">)</span>
            <span class="o">/</span>
            <span class="p">(</span>
               <span class="k">SELECT</span>
                  <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_id</span><span class="p">)</span>
               <span class="k">FROM</span>
                  <span class="n">session_start</span> <span class="n">SUB</span>
               <span class="k">WHERE</span>
                  <span class="n">DATE_ADD</span><span class="p">(</span><span class="s1">'DAY'</span><span class="p">,</span> <span class="o">-</span><span class="mi">29</span><span class="p">,</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">SUB</span><span class="p">.</span><span class="nb">date</span>
                  <span class="k">AND</span> <span class="n">SUB</span><span class="p">.</span><span class="nb">date</span> <span class="o">&lt;=</span> <span class="n">MAIN</span><span class="p">.</span><span class="nb">date</span>
            <span class="p">)</span>
         <span class="p">),</span>
         <span class="mi">0</span>
      <span class="p">)</span> <span class="k">AS</span> <span class="n">rolling_stickiness</span>
   <span class="k">FROM</span>
      <span class="n">session_starts</span> <span class="n">MAIN</span>
   <span class="k">GROUP</span> <span class="k">BY</span>
      <span class="mi">1</span>
   <span class="k">ORDER</span> <span class="k">BY</span>
      <span class="mi">1</span>
<span class="p">)</span>
<span class="k">SELECT</span>
   <span class="o">*</span>
<span class="k">FROM</span>
   <span class="n">CTE_rolling_stickiness</span>
<span class="p">;</span>
</code></pre></div></div>

<h1 id="6-static-stickiness">6. Static Stickiness</h1>

<p>그러나 Static Stickiness 방식으로 접근할 경우 쿼리문은 다음과 같습니다. DAU와 Static MAU를 Inline View로 먼저 계산한 후, 각 일자 별  <code class="language-plaintext highlighter-rouge">dau</code>를 고정된 월의  <code class="language-plaintext highlighter-rouge">mau</code>로 나누어주는 방식입니다. 이 경우, 쿼리 비용과 연산 속도를 크게 개선할 수 있게 됩니다.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">WITH</span>
<span class="n">CTE_dau</span> <span class="k">AS</span> <span class="p">(</span>
   <span class="k">SELECT</span>
      <span class="nb">date</span><span class="p">,</span>
      <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">dau</span>
   <span class="k">FROM</span>
      <span class="n">session_starts</span>
   <span class="k">GROUP</span> <span class="k">BY</span>
      <span class="mi">1</span>
<span class="p">),</span>
<span class="n">CTE_static_mau</span> <span class="k">AS</span> <span class="p">(</span>
   <span class="k">SELECT</span>
      <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="nb">date</span><span class="p">)</span> <span class="k">AS</span> <span class="k">month</span><span class="p">,</span>
      <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">static_mau</span>
   <span class="k">FROM</span>
      <span class="n">session_starts</span>
   <span class="k">GROUP</span> <span class="k">BY</span>
      <span class="mi">1</span>
<span class="p">),</span>
<span class="n">CTE_static_stickiness</span> <span class="k">AS</span> <span class="p">(</span>
   <span class="k">SELECT</span>
      <span class="n">dau</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span>
      <span class="n">COALESCE</span><span class="p">(</span>
         <span class="n">TRY</span><span class="p">(</span><span class="n">dau</span><span class="p">.</span><span class="n">dau</span> <span class="o">/</span> <span class="n">static_mau</span><span class="p">.</span><span class="n">static_mau</span><span class="p">),</span>
         <span class="mi">0</span>
      <span class="p">)</span> <span class="k">AS</span> <span class="n">static_stickiness</span>
   <span class="k">FROM</span>
      <span class="n">dau</span>
   <span class="k">LEFT</span> <span class="k">JOIN</span>
      <span class="n">static_mau</span>
      <span class="k">ON</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="n">dau</span><span class="p">.</span><span class="nb">date</span><span class="p">)</span> <span class="o">=</span> <span class="n">static_mau</span><span class="p">.</span><span class="k">month</span>
   <span class="k">ORDER</span> <span class="k">BY</span>
      <span class="mi">1</span>
<span class="p">)</span>
<span class="k">SELECT</span>
   <span class="o">*</span>
<span class="k">FROM</span>
   <span class="n">CTE_static_stickiness</span>
<span class="p">;</span>
</code></pre></div></div>

<p>물론, Static Stickiness는 Rolling Stickiness에 비해 다음과 같은 장/단점이 존재합니다.</p>
<ul>
  <li><strong>장점</strong>: 쿼리 비용이 크게 절감되고 연산 속도가 빨라집니다.</li>
  <li><strong>단점</strong>: 당월의 경우, 월말이 도래하기 전까지는 MAU가 과소평가되어 Stickiness가 비정상적으로 높은 값으로 측정됩니다. 즉, 오늘이 1월 1일이라면,  <code class="language-plaintext highlighter-rouge">DAU=MAU</code>  이므로  <code class="language-plaintext highlighter-rouge">Stickiness=100%</code>인 말도 안되는 수치가 대시보드에 표시될 것입니다.😨</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Stickiness=100%</code>  로 표현되면, 사내 구성원들에게 잘못된 의사결정의 근거를 전달하게 될 위험성이 존재합니다. 따라서, Static Stickiness 방식을 사내에 도입하게 될 경우, 매월 초 자정에만 Appending되도록 하는 스케줄링을 두어야 할 것입니다. 즉, 1월 1일부터 1월 31일까지의 Stickiness 지표는 2월 1일이 되어야만 대시보드에 표현되는 것이죠. 그렇다면, Stickiness 지표는 최대 30일 이상 지연되어 서비스의 신속한 Action Item을 실행하기가 어려워질 것입니다. Stickiness는 Data Freshness가 중요한 지표 중 하나인데도 불구하고 말이죠.</p>

<h1 id="7-data-mart를-통해-rolling-mau-도입하기">7. Data Mart를 통해 Rolling MAU 도입하기</h1>

<p>그러면 대안이 없을까요? 없으면 제가 이 글을 안 썼겠죠.🤭 Data Mart 내에 Incremental Strategy를 적용한 <code class="language-plaintext highlighter-rouge">rolling_mau</code>  테이블 스케줄링을 구축한다면 앞서 언급한 Rolling Stickiness의 치명적인 단점을 개선할 수 있습니다. 가령, 다음과 같이 매일 자정에 Appending되는  <code class="language-plaintext highlighter-rouge">fact_rolling_mau</code>  테이블을 생성한다고 가정해보겠습니다.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">WITH</span>
<span class="n">fact_rolling_mau</span> <span class="k">AS</span> <span class="p">(</span>
   <span class="k">SELECT</span>
      <span class="n">DATE_ADD</span><span class="p">(</span><span class="s1">'DAY'</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="k">AS</span> <span class="nb">date</span><span class="p">,</span>
      <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">rolling_mau</span>
   <span class="k">FROM</span>
      <span class="n">session_starts</span>
   <span class="k">WHERE</span>
      <span class="n">DATE_ADD</span><span class="p">(</span><span class="s1">'DAY'</span><span class="p">,</span> <span class="o">-</span><span class="mi">30</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="nb">date</span>
      <span class="k">AND</span> <span class="nb">date</span> <span class="o">&lt;=</span> <span class="n">DATE_ADD</span><span class="p">(</span><span class="s1">'DAY'</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span>
<span class="p">)</span>
<span class="k">SELECT</span>
   <span class="o">*</span>
<span class="k">FROM</span>
   <span class="n">fact_rolling_mau</span>
<span class="p">;</span>
</code></pre></div></div>

<p>즉 다음과 같이,  <code class="language-plaintext highlighter-rouge">fact_rolling_mau</code>  테이블은 중복 연산 문제를 벗어난 채 매일 새로운  <code class="language-plaintext highlighter-rouge">rolling_mau</code>  값을 업데이트하게 됩니다.</p>

<table>
  <thead>
    <tr>
      <th><strong>date</strong></th>
      <th><strong>rolling_mau</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2023-01-01</td>
      <td>100,000</td>
    </tr>
    <tr>
      <td>2023-01-01</td>
      <td>101,000</td>
    </tr>
    <tr>
      <td>…</td>
      <td>…</td>
    </tr>
    <tr>
      <td>2023-01-01</td>
      <td>99,700</td>
    </tr>
    <tr>
      <td>2023-01-01</td>
      <td>110,000</td>
    </tr>
    <tr>
      <td>…</td>
      <td>…</td>
    </tr>
  </tbody>
</table>

<p>이제 이미 생성된  <code class="language-plaintext highlighter-rouge">fact_rolling_mau</code>  테이블을 통해 Rolling Stickiness를 계산하는 쿼리문을 작성하면 다음과 같습니다.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">WITH</span>
<span class="n">CTE_dau</span> <span class="k">AS</span> <span class="p">(</span>
   <span class="k">SELECT</span>
      <span class="nb">date</span><span class="p">,</span>
      <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">dau</span>
   <span class="k">FROM</span>
      <span class="n">session_starts</span>
   <span class="k">GROUP</span> <span class="k">BY</span>
      <span class="mi">1</span>
<span class="p">),</span>
<span class="n">CTE_rolling_stickiness</span> <span class="k">AS</span> <span class="p">(</span>
   <span class="k">SELECT</span>
      <span class="n">dau</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span>
      <span class="n">COALESCE</span><span class="p">(</span>
         <span class="n">TRY</span><span class="p">(</span><span class="n">dau</span><span class="p">.</span><span class="n">dau</span> <span class="o">/</span> <span class="n">fact_rolling_mau</span><span class="p">.</span><span class="n">rolling_mau</span><span class="p">),</span>
         <span class="mi">0</span>
      <span class="p">)</span> <span class="k">AS</span> <span class="n">rolling_stickiness</span>
   <span class="k">FROM</span>
      <span class="n">CTE_dau</span>
   <span class="k">LEFT</span> <span class="k">JOIN</span>
      <span class="n">fact_rolling_mau</span>
      <span class="k">ON</span> <span class="n">dau</span><span class="p">.</span><span class="nb">date</span> <span class="o">=</span> <span class="n">rolling_mau</span><span class="p">.</span><span class="nb">date</span>
   <span class="k">ORDER</span> <span class="k">BY</span>
      <span class="mi">1</span>
<span class="p">)</span>
<span class="k">SELECT</span>
   <span class="o">*</span>
<span class="k">FROM</span>
   <span class="n">CTE_rolling_stickiness</span>
<span class="p">;</span>
</code></pre></div></div>

<h1 id="8-결론-query-cost-vs-data-freshness">8. 결론: Query Cost vs Data Freshness</h1>

<p>결국 Rolling MAU, Rolling Stickiness 지표에 대한 이야기를 다루다보니 자연스럽게 Data Mart의 필요성으로 귀결되는 것 같습니다. Data Mart는 단순히 쿼리 결과의 정확성이나 일관성만을 위해 필요한 것이 아니라, 이처럼 Query Cost vs Data Freshness 사이의 상충 관계를 극복하기 위해서도 필요하다고 할 수 있습니다. 특히, 서비스의 사용 규모에 따라 소스 테이블의 사이즈가 방대해질수록 Data Mart의 활용은 필수적일 것입니다. 부족한 글을 읽어주셔서 감사합니다!</p>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="korean" /><category term="data_analytics" /><category term="sql" /><category term="date_warehouse" /><summary type="html"><![CDATA[대고객 서빙을 위해 엄청나게 큰 사이즈의 소스 테이블로부터 최적화된 데이터 마트 설계 고민을 많이 하고 있는 만큼, Stickiness 지표 사례를 중심으로 SQL 성능에 대한 이야기를 들려드리겠습니다.]]></summary></entry><entry><title type="html">Near Protocol: Account Model and Transaction Story</title><link href="http://localhost:4000/near-protocol/" rel="alternate" type="text/html" title="Near Protocol: Account Model and Transaction Story" /><published>2023-11-18T00:00:00+09:00</published><updated>2023-11-18T00:00:00+09:00</updated><id>http://localhost:4000/near-protocol</id><content type="html" xml:base="http://localhost:4000/near-protocol/"><![CDATA[<blockquote>
  <p>Dive into the intricate world of blockchain with Joshua. Uncover the complexities of Near Protocol’s account model, transaction stories, and personal insights. This article offers a captivating exploration of addresses, private keys, and the execution flow of transactions, providing a unique perspective on user experience and protocol design. Join me on this insightful journey, backed by personal research and a wealth of references from the blockchain realm.</p>
</blockquote>

<h3 id="contents">CONTENTS</h3>
<ol>
  <li>Account Model Story
    <ul>
      <li>1.1. Addresses</li>
      <li>1.2. Private Keys</li>
      <li>1.3. A Sample UX Case</li>
    </ul>
  </li>
  <li>Transaction Story
    <ul>
      <li>2.1. Transactions</li>
      <li>2.2. Actions</li>
      <li>2.3. Receipts</li>
      <li>2.4. A Sample Transactions Case</li>
    </ul>
  </li>
  <li>Personal Thoughts</li>
  <li>References</li>
</ol>

<hr />

<h3 id="disclaimer">DISCLAIMER</h3>
<blockquote>
  <p>This material is based on personal research and study; therefore, it may contain factual errors and cannot be relied upon for critical decision-making. Additionally, the opinions in the material are purely subjective and have no connection to any past or current companies that I have worked at.</p>
</blockquote>

<h1 id="1-account-model-story">1. Account Model Story</h1>

<p><img src="/assets/2023-11-18-near-protocol/account-model-story.webp" alt="" /></p>
<blockquote>
  <p><a href="https://docs.near.org/concepts/basics/accounts/model">Source</a></p>
</blockquote>

<h2 id="11-addresses">1.1. Addresses</h2>

<h3 id="there-are-two-types-of-accounts">There are Two Types of Accounts.</h3>

<p><strong>1. Named Account</strong></p>
<ul>
  <li>i.e.,  <code class="language-plaintext highlighter-rouge">alice.near</code>,  <code class="language-plaintext highlighter-rouge">bob.near</code>,  <code class="language-plaintext highlighter-rouge">usa.near</code>,  <code class="language-plaintext highlighter-rouge">texas.usa.near</code></li>
  <li>Formatically Same as DNS</li>
  <li>🙆🏻‍♂️  <code class="language-plaintext highlighter-rouge">usa.near</code>  →  <code class="language-plaintext highlighter-rouge">texas.usa.near</code>  can be created.</li>
  <li>🙅🏻‍♂️  <code class="language-plaintext highlighter-rouge">usa.near</code>  →  <code class="language-plaintext highlighter-rouge">texas.uk.near</code>  can NOT be created.</li>
</ul>

<p><strong>2. Implicit Account</strong></p>
<ul>
  <li>i.e.,  <code class="language-plaintext highlighter-rouge">98793cd91a3f870fb126f662858[...]</code></li>
  <li>Formatically Similar to the Traditional Way to Create Addresses such as Bitcoin and Ethereum (64 letters)</li>
</ul>

<h3 id="personal-thoughts">Personal Thoughts</h3>

<p><strong>1. Named Account</strong></p>
<ul>
  <li>Improves the end-user UX of the product because it’s easy to memorize!</li>
  <li>While ENS is executed at the  <strong>contract layer</strong>, Near’s Named Account is executed at the  <strong>protocol layer</strong>.</li>
</ul>

<p><strong>2. Implicit Account</strong></p>
<ul>
  <li>For user groups that want to maintain pseudonymization!</li>
  <li>For developers accustomed to traditional address systems, especially hardware wallet service companies</li>
</ul>

<h2 id="12-private-keys">1.2. Private Keys</h2>

<h3 id="there-are-two-types-of-private-keys">There are Two Types of Private Keys.</h3>

<p><img src="/assets/2023-11-18-near-protocol/private-keys.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.vitalpoint.ai/understanding-near-keys/">Source</a></p>
</blockquote>

<p><strong>1. Full Access Key</strong></p>
<blockquote>
  <p><strong>The address can be used to sign transactions of all types.</strong></p>
</blockquote>

<ul>
  <li>The 8 Types of Transactions (<code class="language-plaintext highlighter-rouge">Transaction Actions</code>)
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Transfer</span><span class="p">,</span> <span class="c1"># Transfer Tokens  
</span><span class="n">CreateAccount</span><span class="p">,</span> <span class="c1"># Create Accounts  
</span><span class="n">DeleteAccount</span><span class="p">,</span> <span class="c1"># Delete Accounts  
</span><span class="n">DeployContract</span><span class="p">,</span> <span class="c1"># Deploy Contracts  
</span><span class="n">FunctionCall</span><span class="p">,</span> <span class="c1"># Call Functions of Contracts  
</span><span class="n">Stake</span><span class="p">,</span> <span class="c1"># Staking  
</span><span class="n">AddKey</span><span class="p">,</span> <span class="c1"># Add Keys  
</span><span class="n">DeleteKey</span> <span class="c1"># Delete Keys
</span></code></pre></div>    </div>
  </li>
</ul>

<p><strong>2. Function Call Key</strong></p>
<blockquote>
  <p><strong>The address can be used to sign the following restricted transactions.</strong></p>
</blockquote>

<ul>
  <li>Transactions are restricted to  <strong>specific function(s)</strong>  within  <strong>a specific contract</strong>.</li>
  <li>Sending Native Token, $NEAR, is NOT possible.
    <ul>
      <li>Gas Fees can be paid, however.</li>
      <li>Of course, if you set it so that you can’t even pay Gas Fees, only functions related to View methods can be called.</li>
    </ul>
  </li>
  <li>Purpose of Using Function Call Keys
    <ul>
      <li>By passing it to the dApp’s client, creating an environment where the dApp can immediately invoke contract calls with limited permissions.</li>
    </ul>
  </li>
</ul>

<h3 id="parameters">Parameters</h3>

<p><strong>1. Full Access Key</strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pub</span> <span class="kr">enum</span> <span class="nx">AccessKeyPermission</span> <span class="p">{</span>  
    <span class="nc">FunctionCall</span><span class="p">(</span><span class="nx">FunctionCallPermission</span><span class="p">),</span>  
    <span class="nx">FullAccess</span><span class="p">,</span>  
<span class="p">}</span>
</code></pre></div></div>

<p><strong>2. Function Call Key</strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pub</span> <span class="nx">struct</span> <span class="nx">FunctionCallPermission</span> <span class="p">{</span>  
    <span class="nx">pub</span> <span class="nx">receiver_id</span><span class="p">:</span> <span class="nx">AccountId</span><span class="p">,</span> <span class="c1">// a Specific Contract  </span>
    <span class="nx">pub</span> <span class="nx">method_names</span><span class="p">:</span> <span class="nx">Vec</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span> <span class="c1">// Specific Functions  </span>
    <span class="nx">pub</span> <span class="nx">allowance</span><span class="p">:</span> <span class="nx">Option</span><span class="o">&lt;</span><span class="nx">Balance</span><span class="o">&gt;</span><span class="p">,</span> <span class="c1">// Max Gas Fee Payment Amount  </span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="locked-account">Locked Account</h3>
<ul>
  <li>Simply remove all keys through the transaction of the  <code class="language-plaintext highlighter-rouge">DeleteKey</code>  action.</li>
  <li>No one will be able to control the account.</li>
  <li>In other words, after deploying the smart contract account itself, it can be made fully decentralized, allowing only internal transactions to occur.</li>
</ul>

<h2 id="13-a-sample-ux-case">1.3. A Sample UX Case</h2>

<h3 id="typical-dapp-transaction-signing-architecture">Typical dApp Transaction Signing Architecture</h3>

<p><img src="/assets/2023-11-18-near-protocol/Typical dApp Transaction Signing Architecture.webp" alt="" /></p>
<blockquote>
  <p><a href="https://docs.near.org/concepts/web3/near">Source</a></p>
</blockquote>

<ul>
  <li>To execute a specific transaction within the dApp, the user must undergo repeated redirection between the wallet and the client.</li>
  <li><strong>Advantage</strong>: Excellent  <strong>security</strong>  as the private key is not exposed to the client.</li>
  <li><strong>Disadvantage</strong>: Repeated redirections can be annoying for  <strong>users</strong>.</li>
</ul>

<h3 id="dapp-transaction-signing-architecture-using-function-call-key">dApp Transaction Signing Architecture Using Function Call Key</h3>
<blockquote>
  <p>It is possible to address the Disadvantage without significantly compromising the Advantage.</p>
</blockquote>

<p><strong>1. Add Key</strong></p>

<p><img src="/assets/2023-11-18-near-protocol/add-key.webp" alt="" /></p>
<blockquote>
  <p><a href="https://docs.near.org/concepts/web3/near">Source</a></p>
</blockquote>

<p><strong>2. Call a Specific Function within a dApp’s Contract</strong></p>

<p><img src="/assets/2023-11-18-near-protocol/call a specific function within a dapps contract.webp" alt="" /></p>
<blockquote>
  <p><a href="https://docs.near.org/concepts/web3/near">Source</a></p>
</blockquote>

<h1 id="2-transaction-story">2. Transaction Story</h1>

<p><strong>Overall Execution Flow of the Transactions</strong></p>

<p><img src="/assets/2023-11-18-near-protocol/transaction-story.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.youtube.com/@NEARProtocol">Source</a></p>
</blockquote>

<p><strong>Important Terms</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Transaction</code></li>
  <li><code class="language-plaintext highlighter-rouge">Action</code></li>
  <li><code class="language-plaintext highlighter-rouge">Receipt</code></li>
</ul>

<h2 id="21-transactions">2.1. Transactions</h2>
<p><strong>A Transaction is:</strong></p>
<ul>
  <li>a set of  <code class="language-plaintext highlighter-rouge">actions</code>  that need to be performed on the receiving account.</li>
  <li>🙅🏻‍♂️ In other words, a transaction is NOT the atomic unit driving state changes in Near Blockchain.</li>
</ul>

<h2 id="22-actions">2.2. Actions</h2>
<p><strong>An Action is:</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">the unit of work</code>  that the virtual machine needs to process through a transaction.</li>
  <li>There are a total of 8 types recognizable by the Near Protocol. (You have already checked them above!)</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Transfer</span><span class="p">,</span> <span class="c1"># Transfer Tokens  
</span><span class="n">CreateAccount</span><span class="p">,</span> <span class="c1"># Create Accounts  
</span><span class="n">DeleteAccount</span><span class="p">,</span> <span class="c1"># Delete Accounts  
</span><span class="n">DeployContract</span><span class="p">,</span> <span class="c1"># Deploy Contracts  
</span><span class="n">FunctionCall</span><span class="p">,</span> <span class="c1"># Call Functions of Contracts  
</span><span class="n">Stake</span><span class="p">,</span> <span class="c1"># Staking  
</span><span class="n">AddKey</span><span class="p">,</span> <span class="c1"># Add Keys  
</span><span class="n">DeleteKey</span> <span class="c1"># Delete Keys
</span></code></pre></div></div>

<h2 id="23-receipts">2.3. Receipts</h2>
<p><strong>A Receipt is:</strong></p>
<ul>
  <li>the smallest unit executed by the virtual machine, in other words,  <code class="language-plaintext highlighter-rouge">the execution object</code>.</li>
</ul>

<h2 id="24-a-sample-transaction-case">2.4. A Sample Transaction Case</h2>

<h3 id="a-randomly-chosen-transaction-case">A Randomly Chosen Transaction Case</h3>

<p><strong>1. A Transaction Sending 0.02 NEAR</strong></p>

<p><img src="/assets/2023-11-18-near-protocol/A Transaction Sending 0.02 NEAR.webp" alt="" /></p>
<blockquote>
  <p><a href="https://nearblocks.io/txns/6aqjvabatzFkvoBzYmnpEZbAfnLbGo6PsUM6WdpUYxmG#">Source</a></p>
</blockquote>

<p><strong>2. Receipt Executions - (1) TRANSFER Action</strong></p>

<p><img src="/assets/2023-11-18-near-protocol/Receipt Executions TRANSFER Action.webp" alt="" /></p>
<blockquote>
  <p><a href="https://nearblocks.io/txns/6aqjvabatzFkvoBzYmnpEZbAfnLbGo6PsUM6WdpUYxmG#">Source</a></p>
</blockquote>

<p><strong>2. Receipt Executions - (2) Receiving a Refund for the difference between Gas Limit and Gas Used</strong></p>

<p><img src="/assets/2023-11-18-near-protocol/Receipt Executions Receiving a Refund for the difference between Gas Limit and Gas Used.webp" alt="" /></p>
<blockquote>
  <p><a href="https://nearblocks.io/txns/6aqjvabatzFkvoBzYmnpEZbAfnLbGo6PsUM6WdpUYxmG#">Source</a></p>
</blockquote>

<h1 id="3-personal-thoughts">3. Personal Thoughts</h1>

<h3 id="1-protocolized-address-system-for-dns">1. Protocolized Address System for DNS</h3>

<p>It seems that the computational burden on nodes has been compromised to become a user-friendly blockchain. (Due to the increased size of dtype…)</p>
<ul>
  <li>Wouldn’t there be a slowdown and an increase in gas fees then?</li>
  <li>It seems that this has been addressed by dividing a block into multiple chunks to create the block.</li>
  <li>Let me study deeper when I have more expertise to check out if there are any potential security drawbacks of this approach. 😁</li>
</ul>

<p><img src="/assets/2023-11-18-near-protocol/nightshade.webp" alt="" /></p>
<blockquote>
  <p><a href="https://near.org/papers/nightshade">Source</a></p>
</blockquote>

<h3 id="2-key-generation-structure-for-dapp-end-user-ux">2. Key Generation Structure for dApp End-User UX</h3>

<p>Of course, in the initial Add Key situation, wallet redirection still occurs, so it may not be possible to completely alleviate user confusion.</p>
<ul>
  <li>🗣️<strong>Picky Users (say, Joshua)</strong>: “Earlier, my signature was required, but why are you executing things now without it?” 😠😡</li>
</ul>

<p><img src="/assets/2023-11-18-near-protocol/add-key.webp" alt="" /></p>
<blockquote>
  <p><a href="https://docs.near.org/concepts/web3/near">Source</a></p>
</blockquote>

<h1 id="4-references">4. References</h1>
<ul>
  <li><strong>Near</strong>  <strong>Whitepaper</strong>:  <a href="https://near.org/papers/nightshade">https://near.org/papers/nightshade</a></li>
  <li><strong>Near Official Docs</strong>:  <a href="https://docs.near.org/">https://docs.near.org</a></li>
  <li><strong>Near Official Dev Docs</strong>:  <a href="https://nomicon.io/">https://nomicon.io</a></li>
  <li><strong>Near Official YouTube Channel</strong>:  <a href="https://www.youtube.com/@NEARProtocol">https://www.youtube.com/@NEARProtocol</a></li>
  <li><strong>Blockchain Explorer (Nearblocks)</strong>:  <a href="https://nearblocks.io/">https://nearblocks.io</a></li>
  <li><strong>Vital Point AI Content</strong>:  <a href="https://www.vitalpoint.ai/understanding-near-keys">https://www.vitalpoint.ai/understanding-near-keys</a></li>
</ul>

<p><img src="/assets/2023-11-18-near-protocol/near-logo.webp" alt="" /></p>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="english" /><category term="blockchain" /><summary type="html"><![CDATA[Dive into the intricate world of blockchain with Joshua. Uncover the complexities of Near Protocol’s account model, transaction stories, and personal insights. This article offers a captivating exploration of addresses, private keys, and the execution flow of transactions, providing a unique perspective on user experience and protocol design. Join me on this insightful journey, backed by personal research and a wealth of references from the blockchain realm.]]></summary></entry><entry><title type="html">Intro to Encoding &amp;amp; Decoding Ethereum Contract Functions</title><link href="http://localhost:4000/encoding-and-decoding-ethereum-contract-functions/" rel="alternate" type="text/html" title="Intro to Encoding &amp;amp; Decoding Ethereum Contract Functions" /><published>2023-10-16T00:00:00+09:00</published><updated>2023-10-16T00:00:00+09:00</updated><id>http://localhost:4000/encoding-and-decoding-ethereum-contract-functions</id><content type="html" xml:base="http://localhost:4000/encoding-and-decoding-ethereum-contract-functions/"><![CDATA[<blockquote>
  <p>In this article, I will briefly explore the Ethereum ABI Specification and show you how to decode contract functions when conducting on-chain data analysis. Additionally, I will demonstrate a simple data extraction and analysis case about “Who are the Top 10 Recipients of USDT approve Functions?” using DuneSQL while handling ABIs.</p>
</blockquote>

<h3 id="contents">CONTENTS</h3>
<ol>
  <li>Argument Types Key Content
    <ul>
      <li>1.1. Elementary Types</li>
      <li>1.2. Fixed-size Types</li>
      <li>1.3. Dynamic-size Types</li>
    </ul>
  </li>
  <li>Key Points of Argument Padding to 32 Bytes Rules</li>
  <li>A Contract Example
    <ul>
      <li>3.1. How to Call <code class="language-plaintext highlighter-rouge">baz(uint32 x, bool y)</code></li>
      <li>3.2. How to Call <code class="language-plaintext highlighter-rouge">bar(bytes3[2])</code></li>
      <li>3.3. How to Call <code class="language-plaintext highlighter-rouge">sam(bytes, bool, uint[])</code></li>
    </ul>
  </li>
  <li>Case Study: Who are the Top 10 Recipients of USDT <code class="language-plaintext highlighter-rouge">approve</code> Functions?
    <ul>
      <li>4.1. Function Selector</li>
      <li>4.2. Extract only the transactions that have called the <code class="language-plaintext highlighter-rouge">approve</code> function on the USDT Contract.</li>
      <li>4.3. Extract the first argument value, <code class="language-plaintext highlighter-rouge">address</code>, from the functions.</li>
      <li>4.4. Now, aggregate the number of unique addresses that executed <code class="language-plaintext highlighter-rouge">approve</code> function, grouped by each <code class="language-plaintext highlighter-rouge">approve</code> recipient, over the past week.</li>
      <li>4.5. Label the <code class="language-plaintext highlighter-rouge">approve</code> recipient addresses based on Dune Tables regarding “address labeling”.</li>
      <li>4.6. The Final Query Results</li>
    </ul>
  </li>
  <li>Let’s Conclude!</li>
  <li>References</li>
</ol>

<hr />

<h1 id="1-argument-types-key-content">1. Argument Types Key Content</h1>

<p>Before diving into the Ethereum ABI specification, let’s take a quick look at the argument data types of Ethereum contracts. Ethereum contract functions can have various parameter data types, and among them, I have listed some of the important types and summarize their key characteristics.</p>

<h2 id="11-elementary-types">1.1. Elementary Types</h2>

<p><code class="language-plaintext highlighter-rouge">uint</code></p>
<ul>
  <li>Same as  <code class="language-plaintext highlighter-rouge">uint256</code>,</li>
  <li>which means it should be considered as  <code class="language-plaintext highlighter-rouge">uint256</code>  type during encoding.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">int</code></p>
<ul>
  <li>Same as  <code class="language-plaintext highlighter-rouge">int256</code>,</li>
  <li>which means it should be considered as  <code class="language-plaintext highlighter-rouge">int256</code>  type during encoding.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">bool</code></p>
<ul>
  <li>Same as  <code class="language-plaintext highlighter-rouge">uint8</code>,</li>
  <li>which means only 0 or 1 can be assigned to it.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">bytes{n}</code></p>
<ul>
  <li>Binary type with a length of n bytes (0 &lt; n ≤ 32)</li>
</ul>

<h2 id="12-fixed-size-types">1.2. Fixed-size Types</h2>

<p><code class="language-plaintext highlighter-rouge">{type_name}[{n}]</code></p>
<ul>
  <li>An array with n elements (n ≥ 0)</li>
</ul>

<h2 id="13-dynamic-size-types">1.3. Dynamic-size Types</h2>

<p><code class="language-plaintext highlighter-rouge">bytes</code></p>
<ul>
  <li>Binary type with a dynamic length of bytes</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">string</code></p>
<ul>
  <li>A dynamically sized string (assuming it’s UTF-8 encoded)</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">{type_name}[]</code></p>
<ul>
  <li>An array with a dynamic number of elements</li>
</ul>

<h1 id="2-key-points-of-argument-padding-to-32-bytes-rules">2. Key Points of Argument Padding to 32 Bytes Rules</h1>

<p>When calling Ethereum contract functions, you need to encode each argument and input them concatenated. In this process, there are rules regarding “length.” To avoid confusion, I’ve summarized the key rules for you in advance.</p>

<p><code class="language-plaintext highlighter-rouge">uint{n}</code></p>
<ul>
  <li>Padding with preceding 0 to achieve a length of 32 bytes</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">int{n}</code></p>
<ul>
  <li>Padding with preceding 0 to achieve a length of 32 bytes</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">bytes{n}</code></p>
<ul>
  <li>Padding with trailing 0 to achieve a length of 32 bytes</li>
</ul>

<h1 id="3-a-contract-example">3. A Contract Example</h1>

<p>The following example has been taken from  <a href="https://docs.soliditylang.org/en/develop/abi-spec.html#examples">Contract ABI Specification Docs</a>. Let me explain this in simpler terms.</p>

<p><strong>Given the Contract:</strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pragma</span> <span class="nx">solidity</span> <span class="o">^</span><span class="mf">0.4</span><span class="p">.</span><span class="mi">16</span><span class="p">;</span>  
  
<span class="nx">contract</span> <span class="nx">Foo</span> <span class="p">{</span>  
  <span class="kd">function</span> <span class="nf">baz</span><span class="p">(</span><span class="nx">uint32</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">bool</span> <span class="nx">y</span><span class="p">)</span> <span class="kr">public</span> <span class="nx">pure</span> <span class="nf">returns </span><span class="p">(</span><span class="nx">bool</span> <span class="nx">r</span><span class="p">)</span> <span class="p">{</span> <span class="nx">r</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">&gt;</span> <span class="mi">32</span> <span class="o">||</span> <span class="nx">y</span><span class="p">;</span> <span class="p">}</span>  
  <span class="kd">function</span> <span class="nf">bar</span><span class="p">(</span><span class="nx">bytes3</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="kr">public</span> <span class="nx">pure</span> <span class="p">{}</span>  
  <span class="kd">function</span> <span class="nf">sam</span><span class="p">(</span><span class="nx">bytes</span><span class="p">,</span> <span class="nx">bool</span><span class="p">,</span> <span class="nx">uint</span><span class="p">[])</span> <span class="kr">public</span> <span class="nx">pure</span> <span class="p">{}</span>  
<span class="p">}</span>
</code></pre></div></div>

<h2 id="31-how-to-call-bazuint32-x-bool-y">3.1. How to Call <code class="language-plaintext highlighter-rouge">baz(uint32 x, bool y)</code></h2>

<p>Let’s say you’re calling the function in the format of:  <code class="language-plaintext highlighter-rouge">baz(69, true)</code></p>

<p><strong>Function Selector</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">baz(uint32,bool)</code>  → Keccak-256 Hash
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mh">0xcdcd77c0992ec5bbfc459984220f8c45084cc24d9b6efed1fae540db8de801d2</span>
</code></pre></div>    </div>
  </li>
  <li>Slice the left 4 bytes.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mh">0xcdcd77c0</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>Parameter 1:</strong>  <code class="language-plaintext highlighter-rouge">69</code></p>
<ul>
  <li>Convert it to hexadecimal.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mh">0x45</span>
</code></pre></div>    </div>
  </li>
  <li>Left pad it to a length of 32 bytes.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mh">0x0000000000000000000000000000000000000000000000000000000000000045</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>Parameter 2:</strong>  <code class="language-plaintext highlighter-rouge">true</code></p>
<ul>
  <li>Convert it to uint8.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span>
</code></pre></div>    </div>
  </li>
  <li>Left pad it to a length of 32 bytes.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mh">0x0000000000000000000000000000000000000000000000000000000000000001</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>The Final Encoding with Concatenating All</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mh">0xcdcd77c0</span> <span class="c1"># Function Selector  
</span><span class="mh">0x0000000000000000000000000000000000000000000000000000000000000045</span> <span class="c1"># 69  
</span><span class="mh">0x0000000000000000000000000000000000000000000000000000000000000001</span> <span class="c1"># true  
</span>  
<span class="c1"># Concat  
</span><span class="mh">0xdcdcd77c000000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001</span>
</code></pre></div></div>

<h2 id="32-how-to-call-barbytes32">3.2. How to Call <code class="language-plaintext highlighter-rouge">bar(bytes3[2])</code></h2>

<p>Let’s say you’re calling the function in the format of:  <code class="language-plaintext highlighter-rouge">baz("abc", "def")</code></p>

<p><strong>Function Selector</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">bar(bytes3[2])</code>  → Keccak-256 Hash
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mh">0xfce353f601a3db60cb33e4b6ef4f91e4465eaf93c292b64fcde1bf4ba6819b6a</span>
</code></pre></div>    </div>
  </li>
  <li>Slice the left 4 bytes.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mh">0xfce353f6</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>Parameter 1:</strong>  <code class="language-plaintext highlighter-rouge">“abc”</code></p>
<ul>
  <li>Convert it to utf-8 bytes (<a href="https://onlinetools.com/utf8/convert-utf8-to-bytes">String to UTF-8 Bytes Convertor</a>)
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">616263</span>
</code></pre></div>    </div>
  </li>
  <li>Right pad it to a length of 32 bytes.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mh">0x6162630000000000000000000000000000000000000000000000000000000000</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>Parameter 2</strong>:  <code class="language-plaintext highlighter-rouge">“def”</code></p>
<ul>
  <li>Convert it to utf-8 bytes (<a href="https://onlinetools.com/utf8/convert-utf8-to-bytes">String to UTF-8 Bytes Convertor</a>)
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">646566</span>
</code></pre></div>    </div>
  </li>
  <li>Right pad it to a length of 32 bytes.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mh">0x6465660000000000000000000000000000000000000000000000000000000000</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>The Final Encoding with Concatenating All</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mh">0xfce353f6</span> <span class="c1"># Function Selector  
</span><span class="mi">6162630000000000000000000000000000000000000000000000000000000000</span> <span class="c1"># "abc"  
</span><span class="mi">6465660000000000000000000000000000000000000000000000000000000000</span> <span class="c1"># "def"  
</span>  
<span class="c1"># Concat  
</span><span class="mh">0xfce353f661626300000000000000000000000000000000000000000000000000000000006465660000000000000000000000000000000000000000000000000000000000</span>
</code></pre></div></div>

<h2 id="33-how-to-call-sambytes-bool-uint">3.3. How to Call <code class="language-plaintext highlighter-rouge">sam(bytes, bool, uint[])</code></h2>

<p>Let’s say you’re calling the function in the format of:  <code class="language-plaintext highlighter-rouge">sam(“dave”, true, [1, 2, 3])</code></p>

<p><strong>Function Selector</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">sam(bytes,bool,uint256[])</code>  → Keccak-256 Hash</li>
  <li>Note that  <code class="language-plaintext highlighter-rouge">uint</code>  is replaced with its canonical representation  <code class="language-plaintext highlighter-rouge">uint256</code>.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mh">0xa5643bf27e2786816613d3eeb0b62650200b5a98766dfcfd4428f296fb56d043</span>
</code></pre></div>    </div>
  </li>
  <li>Slice the left 4 bytes.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mh">0xa5643bf2</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>Parameters</strong></p>
<ul>
  <li>In the order of: “<strong>iLoc &gt; Len &gt; Value</strong>”</li>
</ul>

<p><img src="/assets/2023-10-16-encoding-and-decoding-ethereum-contract-functions/parameters.webp" alt="" /></p>
<blockquote>
  <p>made by Joshua</p>
</blockquote>

<p><strong>The Final Encoding with Concatenating All</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mh">0xa5643bf2</span> <span class="c1"># Function Selector  
</span>  
<span class="mh">0x0000000000000000000000000000000000000000000000000000000000000060</span> <span class="c1"># 1st Param iLoc : 96 bytes  
</span><span class="mh">0x0000000000000000000000000000000000000000000000000000000000000001</span> <span class="c1"># 2nd Param Value : true   
</span><span class="mh">0x00000000000000000000000000000000000000000000000000000000000000a0</span> <span class="c1"># 3rd Param iLoc : 160 bytes  
</span><span class="mh">0x0000000000000000000000000000000000000000000000000000000000000004</span> <span class="c1"># 1st Param Len : 4 bytes  
</span><span class="mh">0x6461766500000000000000000000000000000000000000000000000000000000</span> <span class="c1"># 1sst Param Value : "dave"  
</span><span class="mh">0x0000000000000000000000000000000000000000000000000000000000000003</span> <span class="c1"># 3rd Params Len : 3 items  
</span><span class="mh">0x0000000000000000000000000000000000000000000000000000000000000001</span> <span class="c1"># 3rd Param Value (item 0) : 1  
</span><span class="mh">0x0000000000000000000000000000000000000000000000000000000000000002</span> <span class="c1"># 3rd Param Value (item 1) : 2  
</span><span class="mh">0x0000000000000000000000000000000000000000000000000000000000000003</span> <span class="c1"># 3rd Param Value (item 2) : 3  
</span>  
<span class="c1"># Concat  
</span><span class="mh">0xa5643bf20000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000464617665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003</span>
</code></pre></div></div>

<h1 id="4-case-study-who-are-the-top-10-recipients-of-usdt-approve-functions">4. Case Study: Who are the Top 10 Recipients of USDT <code class="language-plaintext highlighter-rouge">approve</code> Functions?</h1>

<p>According to  <a href="https://docs.openzeppelin.com/contracts/2.x/api/token/erc20">ERC-20 Interface</a>, it is possible to delegate the permission to use a specific token (the authority to transfer the token, specifically) to a particular account using the <code class="language-plaintext highlighter-rouge">approve</code> function. This permission is frequently requested, particularly in DeFi platforms. In this case study, I aim to aggregate and analyze the top 10 accounts that people commonly delegate their USDT through <code class="language-plaintext highlighter-rouge">approve</code> function.</p>

<h2 id="41-function-selector">4.1. Function Selector</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">approve(address,uint256)</code>  → Keccak-256 Hash
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mh">0x095ea7b334ae44009aa867bfb386f5c3b4b443ac6f0ee573fa91c4608fbadfba</span>
</code></pre></div>    </div>
  </li>
  <li>Slice the left 4 bytes.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mh">0x095ea7b3</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="42-extract-only-the-transactions-that-have-called-the-approve-function-on-the-usdt-contract">4.2. Extract only the transactions that have called the <code class="language-plaintext highlighter-rouge">approve</code> function on the USDT Contract.</h2>

<ul>
  <li>For more info about <code class="language-plaintext highlighter-rouge">BYTEARRAY_STARTS_WITH</code> Function, click  <a href="https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/varbinary/#bytearray_starts_with">here</a>.</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>  
    <span class="o">*</span>  
<span class="k">FROM</span>  
    <span class="n">ethereum</span><span class="p">.</span><span class="n">transactions</span>  
<span class="k">WHERE</span>  
    <span class="nv">"to"</span> <span class="o">=</span> <span class="mi">0</span><span class="n">xdAC17F958D2ee523a2206206994597C13D831ec7</span> <span class="c1">-- USDT ERC-20 Contract  </span>
    <span class="k">AND</span> <span class="n">BYTEARRAY_STARTS_WITH</span><span class="p">(</span><span class="k">data</span><span class="p">,</span> <span class="mi">0</span><span class="n">x095ea7b3</span><span class="p">)</span> <span class="c1">-- approve(address,uint256) Function Call</span>
</code></pre></div></div>

<h2 id="43-extract-the-first-argument-value-address-from-the-functions">4.3. Extract the first argument value, <code class="language-plaintext highlighter-rouge">address</code>, from the functions.</h2>

<ul>
  <li>For more info about <code class="language-plaintext highlighter-rouge">BYTEARRAY_SUBSTRING</code> Function, click  <a href="https://dune.com/docs/query/DuneSQL-reference/Functions-and-operators/varbinary/#bytearray_substring">here</a>.</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>  
    <span class="n">BYTEARRAY_SUBSTRING</span><span class="p">(</span>  
        <span class="n">BYTEARRAY_SUBSTRING</span><span class="p">(</span><span class="k">data</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">32</span><span class="p">),</span>  
        <span class="mi">13</span><span class="p">,</span>  
        <span class="mi">20</span>  
    <span class="p">)</span> <span class="k">AS</span> <span class="n">approved_to</span>  
<span class="k">FROM</span>  
    <span class="n">ethereum</span><span class="p">.</span><span class="n">transactions</span>  
<span class="k">WHERE</span>  
    <span class="nv">"to"</span> <span class="o">=</span> <span class="mi">0</span><span class="n">xdAC17F958D2ee523a2206206994597C13D831ec7</span> <span class="c1">-- USDT ERC-20 Contract  </span>
    <span class="k">AND</span> <span class="n">BYTEARRAY_STARTS_WITH</span><span class="p">(</span><span class="k">data</span><span class="p">,</span> <span class="mi">0</span><span class="n">x095ea7b3</span><span class="p">)</span> <span class="c1">-- approve(address,uint256) Function Call</span>
</code></pre></div></div>

<h2 id="44-now-aggregate-the-number-of-unique-addresses-that-executed-approve-function-grouped-by-each-approve-recipient-over-the-past-week">4.4. Now, aggregate the number of unique addresses that executed <code class="language-plaintext highlighter-rouge">approve</code> function, grouped by each <code class="language-plaintext highlighter-rouge">approve</code> recipient, over the past week.</h2>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>  
    <span class="n">BYTEARRAY_SUBSTRING</span><span class="p">(</span>  
        <span class="n">BYTEARRAY_SUBSTRING</span><span class="p">(</span><span class="k">data</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">32</span><span class="p">),</span>  
        <span class="mi">13</span><span class="p">,</span>  
        <span class="mi">20</span>  
    <span class="p">)</span> <span class="k">AS</span> <span class="n">approved_to</span><span class="p">,</span>  
    <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="nv">"from"</span><span class="p">)</span> <span class="k">AS</span> <span class="n">approved_from_cnt</span>  
<span class="k">FROM</span>  
    <span class="n">ethereum</span><span class="p">.</span><span class="n">transactions</span>  
<span class="k">WHERE</span>  
    <span class="k">CAST</span><span class="p">(</span><span class="n">block_date</span> <span class="k">AS</span> <span class="nb">DATE</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">DATE_ADD</span><span class="p">(</span><span class="s1">'DAY'</span><span class="p">,</span> <span class="o">-</span><span class="mi">7</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="c1">-- Recent 7 Days  </span>
    <span class="k">AND</span> <span class="nv">"to"</span> <span class="o">=</span> <span class="mi">0</span><span class="n">xdAC17F958D2ee523a2206206994597C13D831ec7</span> <span class="c1">-- USDT ERC-20 Contract  </span>
    <span class="k">AND</span> <span class="n">BYTEARRAY_STARTS_WITH</span><span class="p">(</span><span class="k">data</span><span class="p">,</span> <span class="mi">0</span><span class="n">x095ea7b3</span><span class="p">)</span> <span class="c1">-- approve(address,uint256) Function Call  </span>
<span class="k">GROUP</span> <span class="k">BY</span>  
    <span class="mi">1</span>
</code></pre></div></div>

<h2 id="45-label-the-approve-recipient-addresses-based-on-dune-tables-regarding-address-labeling">4.5. Label the <code class="language-plaintext highlighter-rouge">approve</code> recipient addresses based on Dune Tables regarding “address labeling”.</h2>

<ul>
  <li>Looking at the original address values alone does not provide any meaningful information, as y’all know here.</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">WITH</span>  
<span class="n">CTE_approves</span> <span class="k">AS</span> <span class="p">(</span>  
    <span class="k">SELECT</span>  
        <span class="n">BYTEARRAY_SUBSTRING</span><span class="p">(</span>  
            <span class="n">BYTEARRAY_SUBSTRING</span><span class="p">(</span><span class="k">data</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">32</span><span class="p">),</span>  
            <span class="mi">13</span><span class="p">,</span>  
            <span class="mi">20</span>  
        <span class="p">)</span> <span class="k">AS</span> <span class="n">approved_to</span><span class="p">,</span>  
        <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="nv">"from"</span><span class="p">)</span> <span class="k">AS</span> <span class="n">approved_from_cnt</span>  
    <span class="k">FROM</span>  
        <span class="n">ethereum</span><span class="p">.</span><span class="n">transactions</span>  
    <span class="k">WHERE</span>  
        <span class="k">CAST</span><span class="p">(</span><span class="n">block_date</span> <span class="k">AS</span> <span class="nb">DATE</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">DATE_ADD</span><span class="p">(</span><span class="s1">'DAY'</span><span class="p">,</span> <span class="o">-</span><span class="mi">7</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="c1">-- Recent 7 Days  </span>
        <span class="k">AND</span> <span class="nv">"to"</span> <span class="o">=</span> <span class="mi">0</span><span class="n">xdAC17F958D2ee523a2206206994597C13D831ec7</span> <span class="c1">-- USDT ERC-20 Contract  </span>
        <span class="k">AND</span> <span class="n">BYTEARRAY_STARTS_WITH</span><span class="p">(</span><span class="k">data</span><span class="p">,</span> <span class="mi">0</span><span class="n">x095ea7b3</span><span class="p">)</span> <span class="c1">-- approve(address,uint256) Function Call  </span>
    <span class="k">GROUP</span> <span class="k">BY</span>  
        <span class="mi">1</span>  
<span class="p">)</span>  
  
<span class="k">SELECT</span>  
    <span class="n">MAIN</span><span class="p">.</span><span class="n">approved_to</span><span class="p">,</span>  
    <span class="n">COALESCE</span><span class="p">(</span>  
        <span class="n">SUB1</span><span class="p">.</span><span class="n">dex_name</span> <span class="o">||</span> <span class="s1">' - '</span> <span class="o">||</span> <span class="n">SUB1</span><span class="p">.</span><span class="n">distinct_name</span><span class="p">,</span>  
        <span class="n">SUB2</span><span class="p">.</span><span class="n">project</span> <span class="o">||</span> <span class="s1">' - '</span> <span class="o">||</span> <span class="n">SUB2</span><span class="p">.</span><span class="n">project_type</span><span class="p">,</span>  
        <span class="n">SUB3</span><span class="p">.</span><span class="n">bridge_name</span> <span class="o">||</span> <span class="s1">' - '</span> <span class="o">||</span> <span class="n">SUB3</span><span class="p">.</span><span class="n">description</span><span class="p">,</span>  
        <span class="n">SUB4</span><span class="p">.</span><span class="n">cex_name</span> <span class="o">||</span> <span class="s1">' - '</span> <span class="o">||</span> <span class="n">SUB4</span><span class="p">.</span><span class="n">distinct_name</span><span class="p">,</span>  
        <span class="s1">'Unknown'</span>  
    <span class="p">)</span> <span class="k">AS</span> <span class="n">name</span><span class="p">,</span>  
    <span class="n">MAIN</span><span class="p">.</span><span class="n">approved_from_cnt</span> <span class="k">AS</span> <span class="n">addresses_cnt</span>  
<span class="k">FROM</span>  
    <span class="n">CTE_approves</span> <span class="n">MAIN</span>  
<span class="k">LEFT</span> <span class="k">JOIN</span>  
    <span class="n">addresses_ethereum</span><span class="p">.</span><span class="n">dex</span> <span class="n">SUB1</span> <span class="c1">-- DEX named addresses  </span>
    <span class="k">ON</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">approved_to</span> <span class="o">=</span> <span class="n">SUB1</span><span class="p">.</span><span class="n">address</span>  
<span class="k">LEFT</span> <span class="k">JOIN</span>  
    <span class="n">addresses_ethereum</span><span class="p">.</span><span class="n">defi</span> <span class="n">SUB2</span> <span class="c1">-- DeFi named addresses  </span>
    <span class="k">ON</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">approved_to</span> <span class="o">=</span> <span class="n">SUB2</span><span class="p">.</span><span class="n">address</span>  
<span class="k">LEFT</span> <span class="k">JOIN</span>  
    <span class="n">addresses_ethereum</span><span class="p">.</span><span class="n">bridges</span> <span class="n">SUB3</span> <span class="c1">-- Bridge named addresses  </span>
    <span class="k">ON</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">approved_to</span> <span class="o">=</span> <span class="n">SUB3</span><span class="p">.</span><span class="n">address</span>  
<span class="k">LEFT</span> <span class="k">JOIN</span>  
    <span class="n">addresses_ethereum</span><span class="p">.</span><span class="n">cex</span> <span class="n">SUB4</span> <span class="c1">-- CEX named addresses  </span>
    <span class="k">ON</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">approved_to</span> <span class="o">=</span> <span class="n">SUB4</span><span class="p">.</span><span class="n">address</span>  
<span class="k">ORDER</span> <span class="k">BY</span>  
    <span class="mi">3</span> <span class="k">DESC</span>  
<span class="k">LIMIT</span>  
    <span class="mi">10</span>  
<span class="p">;</span>
</code></pre></div></div>

<h2 id="46-the-final-query-results">4.6. The Final Query Results</h2>

<p><img src="/assets/2023-10-16-encoding-and-decoding-ethereum-contract-functions/query-results.webp" alt="" /></p>
<blockquote>
  <p>Dune Analytics</p>
</blockquote>

<h1 id="5-lets-conclude">5. Let’s Conclude!</h1>

<p>So far, we have delved into <strong>the Ethereum’s ABI Specification</strong>, learned how data is encoded when transactions call contract functions, and understood how to extract meaningful insights by decoding specific function names and arguments from Ethereum transactions data.</p>

<p>In fact, Dune Analytics, Etherscan, and many other on-chain data platforms all incorporate these decoding processes internally.</p>

<p>Hopefully this article will serve as an excellent foundation for your future, more detailed and complex on-chain data analysis endeavors.</p>

<h1 id="6-references">6. References</h1>

<ul>
  <li><a href="https://docs.soliditylang.org/en/develop/abi-spec.html#function-selector-and-argument-encoding">Contract ABI Specification</a></li>
  <li><a href="https://docs.openzeppelin.com/contracts/4.x/api/token/erc721">OpenZeppelin Docs</a></li>
  <li><a href="https://dune.com/joshua_web3">Dune Analytics</a></li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="english" /><category term="blockchain" /><category term="on_chain_data" /><category term="sql" /><summary type="html"><![CDATA[In this article, I will briefly explore the Ethereum ABI Specification and show you how to decode contract functions when conducting on-chain data analysis. Additionally, I will demonstrate a simple data extraction and analysis case about “Who are the Top 10 Recipients of USDT approve Functions?” using DuneSQL while handling ABIs.]]></summary></entry><entry><title type="html">Finding all NFTs (ERC721) held by an address (feat. Dune Analytics)</title><link href="http://localhost:4000/finding-nfts/" rel="alternate" type="text/html" title="Finding all NFTs (ERC721) held by an address (feat. Dune Analytics)" /><published>2023-10-08T00:00:00+09:00</published><updated>2023-10-08T00:00:00+09:00</updated><id>http://localhost:4000/finding-nfts</id><content type="html" xml:base="http://localhost:4000/finding-nfts/"><![CDATA[<blockquote>
  <p>Embark on a journey through blockchain data with Joshua. Explore the intricacies of smart contracts, ERC721, and data analysis techniques. Joshua’s expertise shines as he guides you through interpreting transfer events using tools like Dune Analytics. Don’t miss the case study featuring Binance 7 EOA addresses. Verify insights with Etherscan for a deeper understanding of on-chain data architecture.</p>
</blockquote>

<h3 id="contents">CONTENTS</h3>
<ol>
  <li>Contract = Functions + Events</li>
  <li>ERC721 Interface</li>
  <li>Summary: From Collecting Transfer Events To Calculating Wallet Balance</li>
  <li>Step by Step
    <ul>
      <li>4.1️. Collect All Transfer Events.</li>
      <li>4.2️. Filter Out the Most Recent Transfer Events for Each Token.</li>
      <li>4.3. Filter the Results to Show Only Those Related to the Specific Address.</li>
      <li>4.4️. Determine the Acquisition Price of the Tokens and Label the Contracts.</li>
    </ul>
  </li>
  <li>Case Study</li>
  <li>References</li>
</ol>

<hr />

<h1 id="1-contract--functions--events">1. Contract = Functions + Events</h1>

<p><img src="/assets/2023-10-08-finding-nfts/flowchart.webp" alt="" /></p>

<h3 id="functions"><code class="language-plaintext highlighter-rouge">Functions</code></h3>
<p>When you call a <code class="language-plaintext highlighter-rouge">function</code>:</p>
<ul>
  <li>
    <ol>
      <li>it returns a value, or</li>
    </ol>
  </li>
  <li>
    <ol>
      <li>it trigers an event. (= emits an event.)</li>
    </ol>
  </li>
</ul>

<h3 id="events"><code class="language-plaintext highlighter-rouge">Events</code></h3>
<p>WHen an <code class="language-plaintext highlighter-rouge">event</code> is emitted:</p>
<ul>
  <li>
    <ol>
      <li>it creates and. broadcasts a TX message, then</li>
    </ol>
  </li>
  <li>
    <ol>
      <li>the TX message leads to state change of Ethereum.</li>
    </ol>
  </li>
</ul>

<h1 id="2-erc721-interface">2. ERC721 Interface</h1>

<h3 id="functions-1"><code class="language-plaintext highlighter-rouge">Functions</code></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">balanceOf</span><span class="p">(</span><span class="n">owner</span><span class="p">):</span>  
    <span class="k">return</span> <span class="sh">"</span><span class="s">Number of Tokens held by the Owner</span><span class="sh">'</span><span class="s">s Account</span><span class="sh">"</span>  
<span class="k">def</span> <span class="nf">ownerOf</span><span class="p">(</span><span class="n">tokenId</span><span class="p">):</span>  
    <span class="k">return</span> <span class="sh">"</span><span class="s">Owner</span><span class="sh">'</span><span class="s">s Address holding the Token</span><span class="sh">"</span>  
<span class="k">def</span> <span class="nf">transferFrom</span><span class="p">(</span><span class="k">from</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span> <span class="n">tokenId</span><span class="p">):</span>  
    <span class="n">emit</span> <span class="n">Transfer</span>  
<span class="k">def</span> <span class="nf">approve</span><span class="p">(</span><span class="n">to</span><span class="p">,</span> <span class="n">tokenId</span><span class="p">):</span>  
    <span class="n">emit</span> <span class="n">Approval</span>  
<span class="bp">...</span>
</code></pre></div></div>

<h3 id="events-1"><code class="language-plaintext highlighter-rouge">Events</code></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">event</span> <span class="nc">Transfer</span><span class="p">(</span><span class="k">from</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span> <span class="n">tokenId</span><span class="p">):</span>  
    <span class="c1">#  "tokenId" token is transferred from "from" to "to".  
</span><span class="n">event</span> <span class="nc">Approval</span><span class="p">(</span><span class="n">owner</span><span class="p">,</span> <span class="n">approved</span><span class="p">,</span> <span class="n">tokenId</span><span class="p">):</span>  
    <span class="c1"># "owner" enables "approved" to manage the "tokenId" token.  
</span><span class="bp">...</span>
</code></pre></div></div>

<h1 id="3-summary-from-collecting-transfer-events-to-calculating-wallet-balance">3. Summary: From Collecting Transfer Events To Calculating Wallet Balance</h1>

<h3 id="collect-all-events-involving--david">Collect All Events Involving  <code class="language-plaintext highlighter-rouge">David</code>.</h3>

<p><strong>Transfer Event #1:</strong></p>
<ul>
  <li>from = “Joshua”</li>
  <li>to = “David”</li>
  <li>tokenId = <code class="language-plaintext highlighter-rouge">1234</code></li>
</ul>

<p><strong>Transfer Event #2:</strong></p>
<ul>
  <li>from = “Angela”</li>
  <li>to = “David”</li>
  <li>tokenId = <code class="language-plaintext highlighter-rouge">5678</code></li>
</ul>

<p><strong>Transfer Event #3:</strong></p>
<ul>
  <li>from = “David”</li>
  <li>to = “Angela”</li>
  <li>tokenId = <code class="language-plaintext highlighter-rouge">1234</code></li>
</ul>

<h3 id="then-sum-up-all-the-events-to-determine-wallet-balance">Then Sum Up All the Events to Determine Wallet Balance.</h3>

<p><strong>Tokens List “David” currently owns:</strong></p>
<ul>
  <li>tokenId = <code class="language-plaintext highlighter-rouge">5678</code></li>
</ul>

<h1 id="4-step-by-step">4. Step by Step</h1>

<h2 id="41️-collect-all-transfer-events">4.1️. Collect All Transfer Events.</h2>

<p><img src="/assets/2023-10-08-finding-nfts/erc721-evt_Transfer.webp" alt="" /></p>
<blockquote>
  <p>Dune Analytics</p>
</blockquote>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">WITH</span>  
<span class="n">CTE_all_transfers</span> <span class="k">AS</span> <span class="p">(</span>  
    <span class="k">SELECT</span>  
        <span class="n">contract_address</span><span class="p">,</span>  
        <span class="n">tokenId</span><span class="p">,</span>  
        <span class="n">evt_tx_hash</span><span class="p">,</span>  
        <span class="nv">"to"</span><span class="p">,</span>  
        <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span>  
            <span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">contract_address</span><span class="p">,</span> <span class="n">tokenId</span>  
            <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">evt_block_number</span> <span class="k">DESC</span><span class="p">,</span> <span class="n">evt_index</span> <span class="k">DESC</span>  
        <span class="p">)</span> <span class="k">AS</span> <span class="n">recent_idx</span>  
    <span class="k">FROM</span>  
        <span class="n">erc721_ethereum</span><span class="p">.</span><span class="n">evt_Transfer</span>  
    <span class="k">WHERE</span>  
        <span class="n">contract_address</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span>  
<span class="p">),</span>
</code></pre></div></div>

<p><strong>Query Results</strong></p>

<table>
  <thead>
    <tr>
      <th><strong>contract_address</strong></th>
      <th><strong>tokenId</strong></th>
      <th><strong>evt_tx_hash</strong></th>
      <th><strong>to</strong></th>
      <th><strong>recent_idx</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">0x0000...8e25</code></td>
      <td>106</td>
      <td><code class="language-plaintext highlighter-rouge">0xc8c0...4e4c</code></td>
      <td><code class="language-plaintext highlighter-rouge">0x826e...1ff3</code></td>
      <td>2</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">0x0000...8e25</code></td>
      <td>113</td>
      <td><code class="language-plaintext highlighter-rouge">0xcd01...66a2</code></td>
      <td><code class="language-plaintext highlighter-rouge">0xc412...0620</code></td>
      <td>2</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">0x0000...8e25</code></td>
      <td>118</td>
      <td><code class="language-plaintext highlighter-rouge">0x28dd...6e20</code></td>
      <td><code class="language-plaintext highlighter-rouge">0x4d98...e5a8</code></td>
      <td>2</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">0x0000...b183</code></td>
      <td>3</td>
      <td><code class="language-plaintext highlighter-rouge">0xd503...672a</code></td>
      <td><code class="language-plaintext highlighter-rouge">0x8636...a5e9</code></td>
      <td>2</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">0x0000...b183</code></td>
      <td>13</td>
      <td><code class="language-plaintext highlighter-rouge">0x3cc9...4121</code></td>
      <td><code class="language-plaintext highlighter-rouge">0x47a1...c78a</code></td>
      <td>2</td>
    </tr>
  </tbody>
</table>

<h2 id="42️-filter-out-the-most-recent-transfer-events-for-each-token">4.2️. Filter Out the Most Recent Transfer Events for Each Token.</h2>
<blockquote>
  <p>So that we can see who owns the tokens at the moment!</p>
</blockquote>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CTE_last_transfers</span> <span class="k">AS</span> <span class="p">(</span>  
    <span class="k">SELECT</span>  
        <span class="o">*</span>  
    <span class="k">FROM</span>  
        <span class="n">CTE_all_transfers</span>  
    <span class="k">WHERE</span>  
        <span class="n">recent_idx</span> <span class="o">=</span> <span class="mi">1</span>  
<span class="p">),</span>
</code></pre></div></div>

<p><strong>Query Results</strong></p>

<table>
  <thead>
    <tr>
      <th><strong>contract_address</strong></th>
      <th><strong>tokenId</strong></th>
      <th><strong>evt_tx_hash</strong></th>
      <th><strong>to</strong></th>
      <th><strong>recent_idx</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">0x0000...8e25</code></td>
      <td>0</td>
      <td><code class="language-plaintext highlighter-rouge">0xfa58...164a</code></td>
      <td><code class="language-plaintext highlighter-rouge">0x0000...5e92</code></td>
      <td>1</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">0x0000...8e25</code></td>
      <td>1</td>
      <td><code class="language-plaintext highlighter-rouge">0x0595...c802</code></td>
      <td><code class="language-plaintext highlighter-rouge">0x0000...5e92</code></td>
      <td>1</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">0x0000...8e25</code></td>
      <td>2</td>
      <td><code class="language-plaintext highlighter-rouge">0x0595...c802</code></td>
      <td><code class="language-plaintext highlighter-rouge">0x0000...5e92</code></td>
      <td>1</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">0x0000...8e25</code></td>
      <td>3</td>
      <td><code class="language-plaintext highlighter-rouge">0x0595...c802</code></td>
      <td><code class="language-plaintext highlighter-rouge">0x0000...5e92</code></td>
      <td>1</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">0x0000...8e25</code></td>
      <td>4</td>
      <td><code class="language-plaintext highlighter-rouge">0x0595...c802</code></td>
      <td><code class="language-plaintext highlighter-rouge">0x0000...5e92</code></td>
      <td>1</td>
    </tr>
  </tbody>
</table>

<h2 id="43-filter-the-results-to-show-only-those-related-to-the-specific-address">4.3. Filter the Results to Show Only Those Related to the Specific Address.</h2>
<blockquote>
  <p>So that we can see all the tokens that the address owns at the moment.</p>
</blockquote>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CTE_last_transfers_cohort</span> <span class="k">AS</span> <span class="p">(</span>  
    <span class="k">SELECT</span>  
        <span class="o">*</span>  
    <span class="k">FROM</span>  
        <span class="n">CTE_last_transfers</span>  
    <span class="k">WHERE</span>  
        <span class="nv">"to"</span> <span class="o">=</span>   
<span class="p">),</span>
</code></pre></div></div>

<p><strong>Query Results</strong></p>

<table>
  <thead>
    <tr>
      <th><strong>contract_address</strong></th>
      <th><strong>tokenId</strong></th>
      <th><strong>evt_tx_hash</strong></th>
      <th><strong>to</strong></th>
      <th><strong>recent_idx</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">0x0000...8e25</code></td>
      <td>0</td>
      <td><code class="language-plaintext highlighter-rouge">0xfa58...164a</code></td>
      <td><code class="language-plaintext highlighter-rouge">0x0000...5e92</code></td>
      <td>1</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">0x0000...8e25</code></td>
      <td>1</td>
      <td><code class="language-plaintext highlighter-rouge">0x0595...c802</code></td>
      <td><code class="language-plaintext highlighter-rouge">0x0000...5e92</code></td>
      <td>1</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">0x0000...8e25</code></td>
      <td>2</td>
      <td><code class="language-plaintext highlighter-rouge">0x0595...c802</code></td>
      <td><code class="language-plaintext highlighter-rouge">0x0000...5e92</code></td>
      <td>1</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">0x0000...8e25</code></td>
      <td>3</td>
      <td><code class="language-plaintext highlighter-rouge">0x0595...c802</code></td>
      <td><code class="language-plaintext highlighter-rouge">0x0000...5e92</code></td>
      <td>1</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">0x0000...8e25</code></td>
      <td>4</td>
      <td><code class="language-plaintext highlighter-rouge">0x0595...c802</code></td>
      <td><code class="language-plaintext highlighter-rouge">0x0000...5e92</code></td>
      <td>1</td>
    </tr>
  </tbody>
</table>

<h2 id="44️-determine-the-acquisition-price-of-the-tokens-and-label-the-contracts">4.4️. Determine the Acquisition Price of the Tokens and Label the Contracts.</h2>

<p><strong>Determine the Acquisition Price of the Tokens.</strong></p>

<p><img src="/assets/2023-10-08-finding-nfts/flowchart.webp" alt="" /></p>

<ul>
  <li><strong>JOIN <code class="language-plaintext highlighter-rouge">hash</code> with <code class="language-plaintext highlighter-rouge">evt_tx_hash</code> and SELECT <code class="language-plaintext highlighter-rouge">value</code>.</strong></li>
</ul>

<p><img src="/assets/2023-10-08-finding-nfts/ethereum.transactions.webp" alt="" /></p>
<blockquote>
  <p>Dune Analytics</p>
</blockquote>

<p><strong>Label the Contracts.</strong></p>

<p><img src="/assets/2023-10-08-finding-nfts/label-the-contracts.webp" alt="" /></p>
<blockquote>
  <p>Dune Analytics</p>
</blockquote>

<ul>
  <li><strong>JOIN <code class="language-plaintext highlighter-rouge">contract_address</code> with <code class="language-plaintext highlighter-rouge">contract_address</code> and SELECT <code class="language-plaintext highlighter-rouge">name</code>.</strong></li>
</ul>

<p><img src="/assets/2023-10-08-finding-nfts/tokens.nft.webp" alt="" /></p>
<blockquote>
  <p>Dune Analytics</p>
</blockquote>

<p><strong>Final Query to Wrap Up</strong></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CTE_summary</span> <span class="k">AS</span> <span class="p">(</span>  
    <span class="k">SELECT</span>  
        <span class="n">LABELS</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>  
        <span class="n">TRANSFERS</span><span class="p">.</span><span class="n">contract_address</span><span class="p">,</span>  
        <span class="n">TRANSFERS</span><span class="p">.</span><span class="n">tokenId</span><span class="p">,</span>  
        <span class="n">TXS</span><span class="p">.</span><span class="n">value</span> <span class="o">/</span> <span class="mi">1</span><span class="n">e18</span> <span class="k">AS</span> <span class="n">acquisition_cost</span>  
    <span class="k">FROM</span>  
        <span class="n">CTE_last_transfers_cohort</span> <span class="n">TRANSFERS</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span>  
        <span class="n">ethereum</span><span class="p">.</span><span class="n">transactions</span> <span class="n">TXS</span>  
        <span class="k">ON</span> <span class="n">TRANSFERS</span><span class="p">.</span><span class="n">evt_tx_hash</span> <span class="o">=</span> <span class="n">TXS</span><span class="p">.</span><span class="n">hash</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span>  
        <span class="n">tokens</span><span class="p">.</span><span class="n">nft</span> <span class="n">LABELS</span>  
        <span class="k">ON</span> <span class="n">TRANSFERS</span><span class="p">.</span><span class="n">contract_address</span> <span class="o">=</span> <span class="n">LABELS</span><span class="p">.</span><span class="n">contract_address</span>  
            <span class="k">AND</span> <span class="n">LABELS</span><span class="p">.</span><span class="n">blockchain</span> <span class="o">=</span> <span class="s1">'ethereum'</span>  
<span class="p">)</span>
<span class="k">SELECT</span>
    <span class="o">*</span>
<span class="k">FROM</span>
    <span class="n">CTE_summary</span>
<span class="p">;</span>
</code></pre></div></div>

<h1 id="5-case-study">5. Case Study</h1>

<h3 id="binance-7--eoa-address"><code class="language-plaintext highlighter-rouge">Binance 7</code>  EOA Address</h3>
<blockquote>
  <p>☎️ <code class="language-plaintext highlighter-rouge">0xBE0eB53F46cd790Cd13851d5EFf43D12404d33E8</code></p>
</blockquote>

<h3 id="query-results">Query Results</h3>

<p><img src="/assets/2023-10-08-finding-nfts/query-results.webp" alt="" /></p>
<blockquote>
  <p>🟠  <a href="https://dune.com/joshua_web3/blpas-sample-dashboard?address_t7a5e7=0xBE0eB53F46cd790Cd13851d5EFf43D12404d33E8">dune.com/joshua_web3</a></p>
</blockquote>

<h3 id="check-it-out-with--etherscan--just-in-case-its-not-been-correctly-queried">Check it out with  <code class="language-plaintext highlighter-rouge">Etherscan</code>  just in case it’s not been correctly queried.</h3>

<ul>
  <li>Holders of  <code class="language-plaintext highlighter-rouge">Documenta X by Vuk Cosic</code></li>
</ul>

<p><img src="/assets/2023-10-08-finding-nfts/etherscan-documenta.webp" alt="" /></p>
<blockquote>
  <p>Etherscan</p>
</blockquote>

<ul>
  <li>Holders of  <code class="language-plaintext highlighter-rouge">New World Babies</code></li>
</ul>

<p><img src="/assets/2023-10-08-finding-nfts/etherscan-new-world-babies.webp" alt="" /></p>
<blockquote>
  <p>Etherscan</p>
</blockquote>

<h1 id="6-references">6. References</h1>

<ul>
  <li><a href="https://docs.openzeppelin.com/contracts/4.x/api/token/erc721">OpenZeppelin Docs</a></li>
  <li><a href="https://dune.com/joshua_web3/blpas-sample-dashboard?address_t7a5e7=0xBE0eB53F46cd790Cd13851d5EFf43D12404d33E8">Dune Dashboard</a>  (created by Joshua)</li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="english" /><category term="blockchain" /><category term="on_chain_data" /><category term="sql" /><summary type="html"><![CDATA[Embark on a journey through blockchain data with Joshua. Explore the intricacies of smart contracts, ERC721, and data analysis techniques. Joshua’s expertise shines as he guides you through interpreting transfer events using tools like Dune Analytics. Don’t miss the case study featuring Binance 7 EOA addresses. Verify insights with Etherscan for a deeper understanding of on-chain data architecture.]]></summary></entry><entry><title type="html">OpenSea에서 발생한 트랜잭션 데이터 구조</title><link href="http://localhost:4000/opensea-transaction/" rel="alternate" type="text/html" title="OpenSea에서 발생한 트랜잭션 데이터 구조" /><published>2023-09-18T00:00:00+09:00</published><updated>2023-09-18T00:00:00+09:00</updated><id>http://localhost:4000/opensea-transaction</id><content type="html" xml:base="http://localhost:4000/opensea-transaction/"><![CDATA[<blockquote>
  <p>안녕하세요. 저는 블록체인 기반 서비스 기업에서 데이터 분석을 담당하고 있는 Joshua라고 합니다. 이번 아티클에서는 OpenSea에서 NFT Transfer가 발생했을 때, EVM 계열 블록체인의 온체인 상에 데이터가 어떤 모습으로 남아 있는지 파헤쳐 보도록 하겠습니다.</p>
</blockquote>

<h3 id="contents">CONTENTS</h3>
<ol>
  <li>오늘의 토픽</li>
  <li>바쁘신 분들을 위한 두괄식 결론</li>
  <li>상세 내용 파헤치기
    <ul>
      <li>3.1. TransactionReceipt</li>
      <li>3.2. OpenSea의 Wyvern 컨트랙트로부터 발생한 Internal TXs</li>
      <li>3.3. <code class="language-plaintext highlighter-rouge">atomicMatch_</code> 함수로부터 발생한 Events</li>
    </ul>
  </li>
  <li>정리하기</li>
</ol>

<hr />

<h1 id="1-오늘의-토픽">1. 오늘의 토픽</h1>

<p>먼저 오늘 사례로 살펴볼 NFT는 <strong>Bored Ape Yacht Club</strong>의 <code class="language-plaintext highlighter-rouge">tokenId</code> = <code class="language-plaintext highlighter-rouge">3238</code>인 NFT입니다.</p>

<p><img src="/assets/2023-09-18-opensea-transaction/bayc.webp" alt="" /></p>
<blockquote>
  <p><a href="https://opensea.io/assets/ethereum/0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d/3238">Source</a></p>
</blockquote>

<p>이 NFT의 활동 내역을 보면 Transfers 히스토리가 많이 남아 있는데요. 그 중에서, <code class="language-plaintext highlighter-rouge">wizmo</code> 계정으로부터 <code class="language-plaintext highlighter-rouge">LGHTWRK</code> 계정으로의 Transfer 내역을 뜯어보도록 할게요.</p>

<p><img src="/assets/2023-09-18-opensea-transaction/bayc-transfers.webp" alt="" /></p>
<blockquote>
  <p><a href="https://opensea.io/assets/ethereum/0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d/3238">Source</a></p>
</blockquote>

<p>이 Transfer 내역의 우측 바로가기 버튼을 클릭하면 아래와 같이 Etherscan의 <code class="language-plaintext highlighter-rouge">Transaction Receipt</code> 페이지가 팝업합니다. 하지만 안타깝게도 일반적인 ETH 송금과 달리, 트랜잭션이 상당히 난해하여 도대체 어떤 구조와 절차를 통해 실행된 것인지 알기란 참 어려워요. 특히, 블록체인 초심자라면 더욱 난감하겠죠.</p>

<p><img src="/assets/2023-09-18-opensea-transaction/etherscan-overview.webp" alt="" /></p>
<blockquote>
  <p><a href="https://etherscan.io/tx/0xe769c002eb1a13e9384d8b62270c963188a686068f2833a9c1b07b160468e80c">Source</a></p>
</blockquote>

<h1 id="2-바쁘신-분들을-위한-두괄식-결론">2. 바쁘신 분들을 위한 두괄식 결론</h1>

<blockquote>
  <p><strong><code class="language-plaintext highlighter-rouge">wizmo</code>의 NFT 경매에 대하여 <code class="language-plaintext highlighter-rouge">LGHTWRK</code>의 Offer가 수락되어, <code class="language-plaintext highlighter-rouge">wizmo</code>가 <code class="language-plaintext highlighter-rouge">LGHTWRK</code>에게 NFT를 전송하는 거래가 성사되었다.</strong></p>
</blockquote>

<p><img src="/assets/2023-09-18-opensea-transaction/flowchart.webp" alt="" /></p>
<blockquote>
  <p>Joshua가 작성한 Flowchart</p>
</blockquote>

<h1 id="3-상세-내용-파헤치기">3. 상세 내용 파헤치기</h1>

<h2 id="31-transactionreceipt">3.1. TransactionReceipt</h2>

<p>우선, 크게 다음과 같은 내용을 알 수 있습니다.</p>

<table>
  <thead>
    <tr>
      <th><strong>파라미터</strong></th>
      <th><strong>값</strong></th>
      <th><strong>참고내용</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>from</strong></td>
      <td>0x869c…Bf89</td>
      <td><code class="language-plaintext highlighter-rouge">LGHTWRK</code>의 주소</td>
    </tr>
    <tr>
      <td><strong>to</strong></td>
      <td>0x7Be8…D12b</td>
      <td><code class="language-plaintext highlighter-rouge">OpenSea: Wyvern Exchange v1</code>의 주소</td>
    </tr>
    <tr>
      <td><strong>value</strong></td>
      <td>2.1000 ETH</td>
      <td>0.1050 ETH + 1.9950 ETH</td>
    </tr>
    <tr>
      <td><strong>tx fee</strong></td>
      <td>0.0084 ETH</td>
      <td>-</td>
    </tr>
    <tr>
      <td><strong>data</strong></td>
      <td><code class="language-plaintext highlighter-rouge">atomicMatch_</code></td>
      <td>함수 호출</td>
    </tr>
  </tbody>
</table>

<p>즉, 이 트랜잭션의 기본 골격은 다음과 같습니다.</p>
<blockquote>
  <p><strong><code class="language-plaintext highlighter-rouge">LGHTWRK</code>로부터 <code class="language-plaintext highlighter-rouge">OpenSea의 Wyvern 컨트랙트</code>를 향해 <code class="language-plaintext highlighter-rouge">2.1000</code> ETH를 송금함과 동시에 해당 컨트랙트의 ABI에 정의되어 있는  <code class="language-plaintext highlighter-rouge">atomicMatch_</code>  함수를 실행하는 것을 목표로 한다.</strong></p>
</blockquote>

<p>참고로, 제가 <code class="language-plaintext highlighter-rouge">2.1000</code> ETH를 <code class="language-plaintext highlighter-rouge">0.1050</code> ETH + <code class="language-plaintext highlighter-rouge">1.9950</code> ETH 로 쪼개어 표현했는데요. 제가 왜 그랬을까요? 바로 아래를 보시죠.</p>

<h2 id="32-opensea의-wyvern-컨트랙트로부터-발생한-internal-txs">3.2. OpenSea의 Wyvern 컨트랙트로부터 발생한 Internal TXs</h2>

<p><code class="language-plaintext highlighter-rouge">LGHTWRK</code>가 <code class="language-plaintext highlighter-rouge">OpenSea의 Wyvern 컨트랙트</code>를 향해 송금하게 되면서, 컨트랙트로부터 총 2개의 트랜잭션이 파생적으로 발생했습니다. 바로, NFT를 구매하고 싶은 <code class="language-plaintext highlighter-rouge">LGHTWRK</code>가 OpenSea에 수수료를 납부하고, NFT 소유자인 <code class="language-plaintext highlighter-rouge">wizmo</code>에게 제시한 가격을 지불해야 하는 내용인 것이죠.</p>

<p><strong>1. <code class="language-plaintext highlighter-rouge">OpenSea의 Wyvern 컨트랙트</code>가  <code class="language-plaintext highlighter-rouge">OpenSea 수수료 전용 EOA</code>에 <code class="language-plaintext highlighter-rouge">0.1050</code> ETH를 송금한다.</strong></p>
<ul>
  <li><strong>from</strong>  = 0x7Be8…D12b (<code class="language-plaintext highlighter-rouge">OpenSea: Wyvern Exchange v1</code>)</li>
  <li><strong>to</strong>  = 0x5b32…1073 (<code class="language-plaintext highlighter-rouge">OpenSea: Wallet</code>)</li>
</ul>

<p><strong>2. <code class="language-plaintext highlighter-rouge">OpenSea의 Wyvern 컨트랙트</code>가  <code class="language-plaintext highlighter-rouge">wizmo</code>에게 <code class="language-plaintext highlighter-rouge">1.9950</code> ETH를 송금한다.</strong></p>
<ul>
  <li><strong>from</strong>  = 0x7Be8…D12b (<code class="language-plaintext highlighter-rouge">OpenSea: Wyvern Exchange v1</code>)</li>
  <li><strong>to</strong>  = 0xc4CB…9B26 (<code class="language-plaintext highlighter-rouge">wizmo</code>)</li>
</ul>

<p>참고로, Etherscan의 Transaction Receipt 페이지에서 <strong>Internal Txns 탭</strong>을 클릭하면 위 내용을 확인하실 수 있는데요. 블록체인 데이터 측면에서는 이러한 <strong>Internal TX</strong>를 흔히 <code class="language-plaintext highlighter-rouge">Trace</code>라고도 표현합니다.</p>

<p><img src="/assets/2023-09-18-opensea-transaction/ethersacn-internal-tx.webp" alt="" /></p>
<blockquote>
  <p><a href="https://etherscan.io/tx/0xe769c002eb1a13e9384d8b62270c963188a686068f2833a9c1b07b160468e80c#internal">Source</a></p>
</blockquote>

<h2 id="33-atomicmatch_-함수로부터-발생한-events">3.3. <code class="language-plaintext highlighter-rouge">atomicMatch_</code> 함수로부터 발생한 Events</h2>

<p><code class="language-plaintext highlighter-rouge">OpenSea의 Wyvern 컨트랙트</code>에게 Input Data로 적어준  <strong>_atomicMatch__</strong>  함수를 통해,  <code class="language-plaintext highlighter-rouge">OpenSea의 Wyvern 컨트랙트</code>  에서는 총 3개의 Events가 발생(emit)하게 됩니다.</p>

<p>사실, <strong>_atomicMatch__</strong> 함수를 통해 어떤 Events가 실행되는지 명확하게 알기 위해서는 아래와 같이  <code class="language-plaintext highlighter-rouge">OpenSea의 Wyvern 컨트랙트</code>의 코드를 분석해야 하는데요. 이것까지 살펴보려면 분량이 너무 길어질 것 같으니, 오늘은 생략할게요.</p>

<p><img src="/assets/2023-09-18-opensea-transaction/etherscan-source-code.webp" alt="" /></p>
<blockquote>
  <p><a href="https://etherscan.io/address/0x7be8076f4ea4a4ad08075c2508e481d6c946d12b#code">Source</a></p>
</blockquote>

<p><strong>1. Approval 이벤트</strong></p>
<ul>
  <li>ERC-721 ABI의 <code class="language-plaintext highlighter-rouge">Approval</code> 이벤트와 파라미터 구조가 똑같습니다. ERC-721 ABI의 <code class="language-plaintext highlighter-rouge">Approval</code> 이벤트는 “특정 Address가 소유자를 대신하여 NFT를 사용할 수 있는 권한을 주게는” 것을 의미합니다.</li>
  <li>Approval 이벤트는 ERC-721 ABI의 <code class="language-plaintext highlighter-rouge">approve</code> 함수를 통해 발생하게 되는데, 이번 아티클에서 소개 드리고 있는 트랜잭션에서는 approve 함수가 실행된 적이 없는 것으로 보아, 아마 소유자인  <code class="language-plaintext highlighter-rouge">wizmo</code>가 자신의 NFT를 경매에 올린 시점에 오프체인 상에서 Signed된 트랜잭션 메시지를 본 트랜잭션과 묶음 단위로 브로드캐스트했기 때문이지 않을까 추측해봅니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">owner</span> <span class="o">=</span> <span class="mh">0xc4cb</span><span class="err">…</span><span class="mi">9</span><span class="n">b26</span> <span class="c1"># wizmo
</span><span class="n">approved</span> <span class="o">=</span> <span class="mh">0x0000</span><span class="err">…</span><span class="mi">0000</span>  
<span class="n">tokenId</span> <span class="o">=</span> <span class="mi">3238</span>
</code></pre></div></div>

<p><strong>2. Transfer 이벤트</strong></p>
<ul>
  <li>NFT의 소유권이 <code class="language-plaintext highlighter-rouge">wizmo</code>로부터 <code class="language-plaintext highlighter-rouge">LGHTWRK</code>로 넘어가게 되는 이벤트입니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">from</span> <span class="o">=</span> <span class="mh">0xc4cb</span><span class="err">…</span><span class="mi">9</span><span class="n">b26</span> <span class="c1"># wizmo  
</span><span class="n">to</span> <span class="o">=</span> <span class="mh">0x869c</span><span class="err">…</span><span class="n">bf89</span> <span class="c1"># LGHTWRK
</span><span class="n">tokenId</span> <span class="o">=</span> <span class="mi">3238</span>
</code></pre></div></div>

<p><strong>3. OrdersMatched 이벤트</strong></p>
<ul>
  <li>정확히 어떤 것을 의미하는지 알기 위해서는  <code class="language-plaintext highlighter-rouge">OpenSea의 Wyvern 컨트랙트</code>  의 코드를 분석해야 하겠지만, 우선 경매를 통해 성사된 거래 내역이 기록된 것이라고 생각하고 넘어가봅시다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">maker</span> <span class="o">=</span> <span class="mh">0xc4cb</span><span class="err">…</span><span class="mi">9</span><span class="n">b26</span> <span class="c1"># wizmo (OpenSea 경매 시장의 Maker)
</span><span class="n">taker</span> <span class="o">=</span> <span class="mh">0x869c</span><span class="err">…</span><span class="n">bf89</span> <span class="c1"># LGHTWRK (OpenSea 경매 시장의 Taker)
</span><span class="n">metadata</span> <span class="o">=</span> <span class="mh">0x0000</span><span class="err">…</span><span class="mi">0000</span> <span class="c1"># data  
</span><span class="n">buyHash</span> <span class="o">=</span> <span class="mi">0000</span><span class="err">…</span><span class="mi">0000</span>  
<span class="n">sellHash</span> <span class="o">=</span> <span class="n">A7B1</span><span class="err">…</span><span class="mi">297</span><span class="n">F</span>  
<span class="n">price</span> <span class="o">=</span> <span class="mf">2.1000</span> <span class="c1"># ETH
</span></code></pre></div></div>

<h1 id="4-정리하기">4. 정리하기</h1>

<p>지금까지 가벼운 마음으로(?) 아래 내용을 데이터적으로 뜯어보았습니다.</p>

<blockquote>
  <p><strong><code class="language-plaintext highlighter-rouge">wizmo</code>의 NFT 경매에 대하여 <code class="language-plaintext highlighter-rouge">LGHTWRK</code>의 Offer가 수락되어, <code class="language-plaintext highlighter-rouge">wizmo</code>가 <code class="language-plaintext highlighter-rouge">LGHTWRK</code>에게 NFT를 전송하는 거래가 성사되었다.</strong></p>
</blockquote>

<p><img src="/assets/2023-09-18-opensea-transaction/flowchart.webp" alt="" /></p>
<blockquote>
  <p>Joshua가 작성한 Flowchart</p>
</blockquote>

<p>ETH, ERC-20의 송금과 달리, ERC-721은 좀 더 다양한 메타데이터를 지니고 있고, 심지어 OpenSea는 자체적으로 컨트랙트를 구현하여 ERC-721 토큰의 경매가 자동으로 성사될 수 있도록 프로토콜을 구현했습니다. <code class="language-plaintext highlighter-rouge">OpenSea의 Wyvern 컨트랙트</code>는 사실 최근에는 사용 빈도가 줄어들게 되었는데요. 그럼에도 불구하고, OpenSea와 같은 NFT Marketplace에서 발생한 NFT 매매 과정이 온체인 상에 어떻게 기록되어 있는지 조회하기에 좋은 예시라고 생각합니다.</p>

<p>참고로, OpenSea는 경매 과정의 각 특정 행위가 발생할 때마다 매번 온체인 상에 기록하는 것이 아니라, 오프체인 상에서 서명이 완료된 트랜잭션 메시지를 보관하고 있다가, 한꺼번에 Bulk 단위로 온체인 상에 메시지를 브로드캐스트하는 방식을 사용하곤 합니다. 이는 최종 사용자 측면에서 TX Fee의 부담을 줄여 사업의 P&amp;L을 최적화하기 위한 작업으로 보이지만, 블록체인의 트릴레마 항목 중 하나인 “탈중앙화” 훼손 논란의 여지가 있어 보이기도 합니다.</p>

<p>읽어주셔서 감사합니다.</p>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="korean" /><category term="blockchain" /><category term="on_chain_data" /><summary type="html"><![CDATA[안녕하세요. 저는 블록체인 기반 서비스 기업에서 데이터 분석을 담당하고 있는 Joshua라고 합니다. 이번 아티클에서는 OpenSea에서 NFT Transfer가 발생했을 때, EVM 계열 블록체인의 온체인 상에 데이터가 어떤 모습으로 남아 있는지 파헤쳐 보도록 하겠습니다.]]></summary></entry><entry><title type="html">데이터 분석가의 파이썬 클라이언트 개발기 feat. pyinstaller</title><link href="http://localhost:4000/pyinstaller/" rel="alternate" type="text/html" title="데이터 분석가의 파이썬 클라이언트 개발기 feat. pyinstaller" /><published>2023-07-15T00:00:00+09:00</published><updated>2023-07-15T00:00:00+09:00</updated><id>http://localhost:4000/pyinstaller</id><content type="html" xml:base="http://localhost:4000/pyinstaller/"><![CDATA[<blockquote>
  <p>파이썬 파일을 실행하기 위해서는 파이썬의 High-level 언어를 Low-level로 변환해주는 <strong>Interpreter</strong>가 필요하고, 또 파이썬 파일 내에서 Load해야 하는 <strong>모듈</strong> 역시 함께 사전에 설치되어야 하는데요.  <code class="language-plaintext highlighter-rouge">pyinstaller</code>는 이러한 Interpreter와 모듈을 함께 동봉한 채로 파이썬 파일을 패키징하여 하나의 실행 파일로 만들어주는 역할을 하는 것이죠.</p>
</blockquote>

<h3 id="contents">CONTENTS</h3>
<ol>
  <li>데이터 분석가로 살아가며</li>
  <li>누워서 떡 먹듯 업무 자동화를 경험하실 수 있도록 하려면 어떻게 해야 할까요?</li>
  <li>파이썬 설치와 실행 방법을 모르더라도 <code class="language-plaintext highlighter-rouge">pyinstaller</code> 하나면 모든 것이 가능해요!</li>
  <li><code class="language-plaintext highlighter-rouge">.ipynb</code> 파일을 <code class="language-plaintext highlighter-rouge">.exe</code> 파일로 만드는 방법</li>
  <li>데이터 분석가가 갖추어야 하는 중요한 태도, “떠먹여 드리기”</li>
</ol>

<hr />

<h1 id="1-데이터-분석가로-살아가며">1. 데이터 분석가로 살아가며</h1>

<p><img src="/assets/2023-07-15-pyinstaller/milk.png" alt="" /></p>

<p>저는 블록체인 지갑 기업에서 데이터 분석가로 근무하고 있는 Joshua라고 합니다. 원래 이 업계에서 다른 포지션으로 근무하고 있었지만, 머신러닝과 빅데이터에 대한 천명(?)과 같은 깊은 흥미를 느끼게 되어 직장과 AI 대학원 생활을 2년 동안 병행해왔는데요. 정말 감사하게도 대학원을 잘 졸업하고, 지금 회사에서 데이터 분석가 포지션으로 근무하게 된지 1년이 넘어가고 있습니다.</p>

<p>훌륭하신, 그리고 인간적인 동료 분들과 함께 매일 치열하게 프로덕트에 대해 고민하고 있는데요. 특히, 한 분, 한 분과 이야기를 하거나 협업을 하다보면 제게 많은 자극을 알게 모르게 주시기도 하고, 스스로도 성장 욕구가 끊임 없이 일어나기도 한답니다. (입사 당시에도 그렇고, 1년이 지난 지금도 그 감정이 오롯이 유지되고 있어요.)</p>

<p><strong>머리로 기억하고 있는 선배 동료 분들의 어록 모음</strong></p>
<blockquote>
  <p>“조급한 마음으로 업무를 하게 되면 나중에 어떤 모습으로든 사고가 날 수 있다. 항상 차근차근 기초에 충실하는 게 중요해요.”
“3년 후, 5년 후의 미래를 종종 그려보며 커리어 방향을 점검해보는 게 되게 중요해요.”
“저는 나이가 들수록 말을 하거나 글을 쓰는 등 표현하는 게 부담스러워져요. 내가 알고 느끼는 것이 틀릴 수도 있으니까요.”</p>
</blockquote>

<p>이런 동료 분들과 함께, 그리고 성장 가능성이 무궁무진한 블록체인 도메인 속에서 매일 밤 이불을 덮으며 “<strong>나는 꼭 월드 클래스가 될 거야</strong>”라는 생각을 하며 지내고 있어요.</p>

<p>데이터 분석가의 메인 업무에 대한 이야기는 다음 아티클에서 또 전달해드리도록 하고, 오늘은 조금 희귀한(?) 스토리를 전달해드리고자 합니다.</p>

<p>가끔 몇몇 동료 분들이 제게 이런 말씀을 하실 때가 많아요.</p>
<blockquote>
  <p>“Joshua님은 데이터 분석가인데 왜 개발을 하고 계세요?”</p>
</blockquote>

<p>그럴 때마다 저는 이렇게 답변 드리곤 합니다.</p>
<blockquote>
  <p>“저.. 저는 단지 데이터 추출과 가공 때문에 코드를 짜고 있는 건데요? 개발 잘 몰라요^^;;;;;”</p>
</blockquote>

<p>물론 시간이 흐르며, 프론트엔드와 백엔드 개발도 데이터 크롤링과 가공의 프로세스도 지니고 있어서 상당히 유사한 작업이 많다는 사실을 이해하게 되어 지금은 살짝 인정을 하고 있어요. (그럼에도 불구하고 데이터 분석은 결이 좀 다르다구요!😆)</p>

<p>아무튼, 이번 아티클에서 제가 전달해드리려는 내용은 “<strong>데이터 분석가로서 반드시 알 필요는 없는, 그렇지만 알아두면 재미있고 쓸모 있는 클라이언트 개발 후기</strong>”입니다!</p>

<p>곰곰이 생각해보면, 현 회사에서 데이터 분석가로서 Day-to-day Responsibilities가 크게  <strong>메인 업무</strong>와  <strong>서브 업무</strong>  두 가지로 카테고리화되는 것 같아요.</p>

<p><strong>| 메인 업무</strong></p>
<ul>
  <li>핵심 지표 모니터링을 위한 대시보드 생성 및 관리</li>
  <li>Ad-hoc 데이터 분석</li>
  <li>A/B 테스트 결과 데이터 분석</li>
  <li>이벤트 로그 스키마 정의</li>
</ul>

<p><strong>| 서브 업무</strong></p>
<ul>
  <li>API 크롤링을 통한 시장 데이터 수집 후 분석</li>
  <li>블록체인 온체인 데이터 수집 후 분석</li>
  <li>블록체인 메인넷 리서치</li>
  <li>기타 등등</li>
</ul>

<p>특히  <strong>서브 업무</strong>는 데이터 분석가로서 Must-have 업무가 아닐 수 있지만, 저는 개인적으로 서브 업무를 함으로써 회사의 사업 전략과 프로덕트에 대한 Domain Knowledge를 키워갈 수 있는 매우 값진 경험이라고 생각하는데요.</p>

<p>최근에는 사내 재무팀 분들을 위해 내부용 파이썬 업무 자동화 클라이언트를 개발하여 배포하는 과정을 겪으며, 재무팀 동료 분들이 어떤 고민을 하시는지, 그리고 어떤 목표와 역할을 위해 최선을 다하고 계시는지 진득하게 이해할 수 있었어요.</p>

<h1 id="2-누워서-떡-먹듯-업무-자동화를-경험하실-수-있도록-하려면-어떻게-해야-할까요">2. 누워서 떡 먹듯 업무 자동화를 경험하실 수 있도록 하려면 어떻게 해야 할까요?</h1>

<p><img src="/assets/2023-07-15-pyinstaller/i-dont-know-why.png" alt="" /></p>

<p>회사 내부용 목적에 대해 공개할 수는 없지만, 재무팀 업무시 매뉴얼하게 데이터를 확인하는 것이 거의 불가능한 업무 포인트가 있었는데요. 그 부분을 API를 통해 크롤링할 수 있도록 파이썬 모듈을 만들 수 있겠다는 생각이 들었어요.</p>

<p>파이썬 크롤러 자체를 만드는 것은 어려운 일이 아니었지만, 파이썬 실행 환경에 대해 생각해보니 고민이 생겼어요.</p>
<blockquote>
  <p>“데이터 분석가와 백엔드 개발자에게는 파이썬 클라이언트를 설치하고, 노트북 상에서 코드를 실행하거나 명령 프롬프트 상에서 파이썬을 실행하는 게 너무나도 익숙한 일인데, 이게 과연 재무팀 분들께도 익숙한 일일까?”</p>
</blockquote>

<p>물론, 업무 자동화로 인한 시간 절감 효과가 파이썬 실행 환경 적응 시간보다 훨씬 크다면 큰 문제가 되지는 않겠지만, 그럼에도 불구하고  <code class="language-plaintext highlighter-rouge">CX(Colleague Experience?)</code>를 고려한 업무 자동화 환경을 제공해드리고 싶었거든요.</p>

<h1 id="3-파이썬-설치와-실행-방법을-모르더라도-pyinstaller-하나면-모든-것이-가능해요">3. 파이썬 설치와 실행 방법을 모르더라도 <code class="language-plaintext highlighter-rouge">pyinstaller</code> 하나면 모든 것이 가능해요!</h1>

<p>개발자 친구에게 이 고민을 털어놓기도 하고, 개인적으로 구글링을 하면서 알게 된 것은 바로  <strong>Python Executable File</strong>이라는 개념이었어요. 즉, 파이썬 환경을 구축하지 않고, 혹은 명령 프롬프트 같은 화성 같은 환경을 경험하지 않고도, <code class="language-plaintext highlighter-rouge">.exe</code> 확장자의 파일 자체를 클릭하는 것만으로 업무 자동화가 진행되는 실행 파일을 만드는 방법인 것이죠.</p>

<p><img src="/assets/2023-07-15-pyinstaller/infinite-challenge.jpeg" alt="" /></p>

<p>정말 감사하게도, 파이썬에는  <code class="language-plaintext highlighter-rouge">pyinstaller</code>라는 모듈이 있어요.</p>

<p><a href="https://pyinstaller.org/en/stable/">PyInstaller Manual</a>에 따르면,  <code class="language-plaintext highlighter-rouge">pyinstaller</code>는 Python 애플리케이션 및 실행에 필요한 모든 환경을 하나의 패키지로 묶어줌으로써, 사용자가 Python Interpreter나 모듈을 설치하지 않고 패키지 자체를 실행할 수 있도록 해주는 유틸리티입니다.</p>

<p>파이썬 파일을 실행하기 위해서는 파이썬의 High-level 언어를 Low-level로 변환해주는 <strong>Interpreter</strong>가 필요하고, 또 파이썬 파일 내에서 Load해야 하는 <strong>모듈</strong> 역시 함께 사전에 설치되어야 하는데요.  <code class="language-plaintext highlighter-rouge">pyinstaller</code>는 이러한 Interpreter와 모듈을 함께 동봉한 채로 파이썬 파일을 패키징하여 하나의 실행 파일로 만들어주는 역할을 하는 것이죠.</p>

<p><img src="https://miro.medium.com/v2/resize:fit:1400/0*uKgfsMJQvUG5okP2.jpg" alt="" /></p>

<h1 id="4-ipynb-파일을-exe-파일로-만드는-방법">4. <code class="language-plaintext highlighter-rouge">.ipynb</code> 파일을 <code class="language-plaintext highlighter-rouge">.exe</code> 파일로 만드는 방법</h1>

<p>우선 업무 자동화에 필요한 파이썬 코드를 Jupyter Notebook으로 완성을 합니다.</p>

<p><img src="/assets/2023-07-15-pyinstaller/step01.webp" alt="" /></p>

<p>사용자가 입력한 정수의 제곱값을 리턴해주는 귀여운 코드를 적어봤어요.</p>

<p><code class="language-plaintext highlighter-rouge">.ipynb</code>을 <code class="language-plaintext highlighter-rouge">.py</code> 형식의 파일로 변환하여 다운로드합니다.</p>

<p><img src="/assets/2023-07-15-pyinstaller/step02.webp" alt="" /></p>

<p>원하는 경로에 .py 파일을 이동해줍니다.</p>

<p><img src="/assets/2023-07-15-pyinstaller/step03.webp" alt="" /></p>

<p>이제  <code class="language-plaintext highlighter-rouge">pyinstaller</code>  모듈을 설치하기 위해 명령 프롬프트를 실행합니다. (Anaconda Powershell Prompt나 Anaconda Prompt가 아닌, Windows 자체의 Command Prompt를 의미해요.)</p>

<p><img src="/assets/2023-07-15-pyinstaller/step04.webp" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">pyinstaller</code>  모듈 설치를 위해  <code class="language-plaintext highlighter-rouge">pip install pyinstaller</code>  명령어를 입력해줍니다.</p>

<p><img src="/assets/2023-07-15-pyinstaller/step05.webp" alt="" /></p>

<p>이제 명령 환경을 <code class="language-plaintext highlighter-rouge">.py</code> 파일이 보관되어 있는 디렉토리로 변경해줍니다.</p>

<p><img src="/assets/2023-07-15-pyinstaller/step06.webp" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">pyinstaller --onefile joshua_pyinstaller_practice.py</code>  명령어를 통해 패키징을 시작합니다. (onefile은 하나의 파일로 패키징해줘야 함을 의미해요!)</p>

<p><img src="/assets/2023-07-15-pyinstaller/step07.webp" alt="" /></p>

<p>그런데 가끔(아니 매우 자주), 안타깝게도 프롬프트가  <code class="language-plaintext highlighter-rouge">pyinstaller</code>라는 명령어를 제대로 이해하지 못하는 경우가 발생해요. 이 경우, 대부분 시스템 환경 변수를 프롬프트가 모르기 때문에 발생합니다.</p>

<p>Windows Task Bar의 검색창에서 <code class="language-plaintext highlighter-rouge">Environment Variables</code>를 검색하여 시스템 환경 변수 관리 페이지를 실행합니다.</p>

<p><img src="/assets/2023-07-15-pyinstaller/step08.webp" alt="" /></p>

<p>Advanced 탭 내의 Environment Variables 버튼을 클릭합니다.</p>

<p><img src="/assets/2023-07-15-pyinstaller/step09.webp" alt="" /></p>

<p>User variables의 New를 클릭합니다.</p>

<p><img src="/assets/2023-07-15-pyinstaller/step10.webp" alt="" /></p>

<p>잠시 홀드하고, 파이썬이 설치되어 있는 경로를 확인해야 해요. 즉, 파이썬의 Scripts 폴더를 찾아야 하는데요. 보통  <code class="language-plaintext highlighter-rouge">Users\AppData\Local\Programs\Python\Python311</code>  경로에 Scripts 폴더가 있어요.</p>

<p><img src="/assets/2023-07-15-pyinstaller/step11.webp" alt="" /></p>

<p>경로를 PATH 이름으로 환경 변수 리스트에 추가해주세요.</p>

<p><img src="/assets/2023-07-15-pyinstaller/step12.webp" alt="" /></p>

<p><img src="/assets/2023-07-15-pyinstaller/step13.webp" alt="" /></p>

<p>이런 환경 설정이 너무 어렵다면, 사실  <a href="https://www.python.org/downloads/">Python3 Setup 파일</a>을 다시 다운로드하여 Modify하는 방법이 있어요. 그럼 자동으로 환경 변수 세팅을 완료해주거든요.</p>

<p><img src="/assets/2023-07-15-pyinstaller/step14.webp" alt="" /></p>

<p>Modify를 클릭하세요.</p>

<p>pip 체크 여부를 반드시 확인한 후 Next 버튼을 클릭합니다.</p>

<p><img src="/assets/2023-07-15-pyinstaller/step15.webp" alt="" /></p>

<p>pip을 꼭 체크해주세요.</p>

<p>Add Python to environment variables를 꼭 체크 후 Install을 진행해주세요.</p>

<p><img src="/assets/2023-07-15-pyinstaller/step16.webp" alt="" /></p>

<p>그런 후, Add Python to environment variables를 반드시 체크해주세요.</p>

<p>자 이제 다시,  <code class="language-plaintext highlighter-rouge">pyinstaller</code>  패키징을 시작합니다.</p>

<p><img src="/assets/2023-07-15-pyinstaller/step17.webp" alt="" /></p>

<p>드디어 성공했군요! 👏</p>

<p><img src="/assets/2023-07-15-pyinstaller/step18.webp" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">.py</code> 파일이 보관되어 있는 경로를 찾아가보면, 새로운 폴더와 파일들이 생성된 것을 확인할 수 있습니다. 이 중, 우리가 배포해야 할 실행 파일은 <code class="language-plaintext highlighter-rouge">dist</code> 폴더에 있으니, <code class="language-plaintext highlighter-rouge">dist</code> 폴더를 클릭합니다.</p>

<p><img src="/assets/2023-07-15-pyinstaller/step19.webp" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">.exe</code> 파일이 생성이 된 것을 확인할 수 있습니다. 한 번 실행해볼까요?</p>

<p><img src="/assets/2023-07-15-pyinstaller/step20.webp" alt="" /></p>

<p>잘 실행되네요!😃</p>

<p><img src="/assets/2023-07-15-pyinstaller/step21.webp" alt="" /></p>

<p><img src="/assets/2023-07-15-pyinstaller/congratulations.jpeg" alt="" /></p>

<p>이제 마치 클라이언트 형태로 <code class="language-plaintext highlighter-rouge">.exe</code> 파일만 배포하면, 파이썬 환경 설치에 대한 부담 없이도 누구나 편리하게 원클릭 업무 자동화를 누릴 수 있답니다!</p>

<h1 id="5--데이터-분석가가-갖추어야-하는-중요한-태도-떠먹여-드리기">5.  데이터 분석가가 갖추어야 하는 중요한 태도, “떠먹여 드리기”</h1>

<p><img src="/assets/2023-07-15-pyinstaller/feeding.png" alt="" /></p>

<p>제가 회사에서 동료 분들께 반 농담, 반 진담으로 말씀 드리는 슬로건이 있는데요. 바로 “<code class="language-plaintext highlighter-rouge">떠먹여 드릴게요</code>”라는 표현입니다.</p>

<p>데이터는 늘 어렵고, 핵심을 꿰뚫이는 더욱 어려운 것 같아요. 데이터 분석가에게도 늘 어려운 일인데, 다른 동료 분들께는 얼마나 더 어려울까요.</p>

<p><strong>데이터 드리븐 문화</strong>를 위해 함께 데이터를 F/UP해야 하는 동료 분들의 부담을 조금이라도 줄여드리는 Soft한 역량이 데이터 분석가에게 요구되기 때문에, 떠먹여 드리기 위한 노력을 지속적으로 실천하는 것이 정말 중요하다고 생각하는데요. 가만히 누워서 입만 벌리고 계셔도 떠먹여 드릴 수 있는, 그런 데이터 분석가가 되는 것이 제게는 Midterm 목표가 된 것 같습니다.</p>

<p>이런 의미에서 이번 파이썬 클라이언트 개발기는 단순한 개발기 이상으로, 데이터를 업무에 빠르게 반영하여 Pain Point를 손쉽게 해결해드리고자 노력해본 저의 “<code class="language-plaintext highlighter-rouge">떠먹여 드릴게요</code>” 프로젝트 중 하나였습니다.</p>

<p>떠먹여 드리기도 하고, 저 또한 귀중한 서브 지식들을 함양할 수 있었던 것 같아서 참 뿌듯하기도 했어요. 앞으로 또 어떤  <strong>서브 업무</strong>들이 저를 기다리고 있을까요? 먼 산을 보며 글을 마칩니다. 읽어주셔서 감사합니다.</p>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="korean" /><category term="python" /><summary type="html"><![CDATA[파이썬 파일을 실행하기 위해서는 파이썬의 High-level 언어를 Low-level로 변환해주는 Interpreter가 필요하고, 또 파이썬 파일 내에서 Load해야 하는 모듈 역시 함께 사전에 설치되어야 하는데요. pyinstaller는 이러한 Interpreter와 모듈을 함께 동봉한 채로 파이썬 파일을 패키징하여 하나의 실행 파일로 만들어주는 역할을 하는 것이죠.]]></summary></entry><entry><title type="html">The Last Click Attribution Model Using BigQuery</title><link href="http://localhost:4000/last-click-attribution/" rel="alternate" type="text/html" title="The Last Click Attribution Model Using BigQuery" /><published>2023-07-09T00:00:00+09:00</published><updated>2023-07-09T00:00:00+09:00</updated><id>http://localhost:4000/last-click-attribution</id><content type="html" xml:base="http://localhost:4000/last-click-attribution/"><![CDATA[<blockquote>
  <p>In this article, you will explore how to easily aggregate the Last Click Attribution Model using BigQuery.</p>
</blockquote>

<h3 id="contents">CONTENTS</h3>
<ol>
  <li>Introduction</li>
  <li>Enable the export of Google Analytics 4 data to BigQuery.</li>
  <li>Flatten Table</li>
  <li>Standardize the session UTM values for all events within each session.</li>
  <li>Replace NULL session UTM values with the value “<code class="language-plaintext highlighter-rouge">(direct)</code>”.</li>
  <li>Extract only the necessary columns for calculating attribution.</li>
  <li>Assign journey numbers to each user’s purchase event.</li>
  <li>Assign Priorities to indicate the order of events for applying the Last Click Attribution Model.</li>
  <li>The <code class="language-plaintext highlighter-rouge">session_campaign</code> with the highest priority will be attributed to 100% of the revenue.</li>
  <li>Now, let’s perform the Last Click Attribution aggregation for each channel.</li>
  <li>Let’s create a dashboard using Redash.</li>
</ol>

<hr />

<h1 id="1--introduction">1.  Introduction</h1>

<p>When you go to the Attribution Settings of Google Analytics 4, you can easily choose the Attribution Model that you love.</p>

<p><img src="/assets/2023-07-09-last-click-attribution/attribution-settings.webp" alt="" /></p>
<blockquote>
  <p>Google Analytics 4 &gt; Settings &gt; Attribution Settings</p>
</blockquote>

<p><strong>Data Driven</strong></p>
<ul>
  <li>It does not explicitly specify what kind of model is being used, and I think it’s a little risky when it comes to making a marketing decision.</li>
</ul>

<p><strong>Last Click</strong></p>
<ul>
  <li>The channel that immediately precedes the purchase is considered to have a 100% contribution.</li>
</ul>

<p><strong>First Click</strong></p>
<ul>
  <li>The channel that initially brings in the user is considered to have a 100% contribution.</li>
</ul>

<p><strong>Linear</strong></p>
<ul>
  <li>All channels, from the user’s initial acquisition channel to the channel immediately preceding the purchase, are considered to have an equal contribution of 1/N, where N represents the total number of channels.</li>
</ul>

<p><img src="/assets/2023-07-09-last-click-attribution/user-acquisition.webp" alt="" /></p>
<blockquote>
  <p>Google Analytics 4 &gt; Acquisition &gt; User Acquisition</p>
</blockquote>

<p>However, due to the post hoc nature of Attribution Settings in Google Analytics 4, there is a limitation where if the marketing strategy changes, you would need to aggregate the data again from the beginning.</p>

<p>Therefore, considering alternatives outside of Google Analytics 4, I have started contemplating using BigQuery to apply Attribution Models more flexibly and regularly monitor them.</p>

<p>In this article, you will explore how to easily aggregate the Last Click Attribution Model using BigQuery.</p>

<h1 id="2-enable-the-export-of-google-analytics-4-data-to-bigquery">2. Enable the export of Google Analytics 4 data to BigQuery.</h1>

<p><img src="/assets/2023-07-09-last-click-attribution/bigquery-links.webp" alt="" /></p>
<blockquote>
  <p>Google Analytics 4 &gt; Settings &gt; BigQuery Links</p>
</blockquote>

<p>For detailed info and how to, refer to  <a href="https://support.google.com/analytics/answer/9358801?hl=en">here</a>.</p>

<h1 id="3-flatten-table">3. Flatten Table</h1>

<p>Unlike Bigtable, a column-wide store NoSQL database, BigQuery is a data warehouse. However, BigQuery still offers a lot of nested columns to handle future additions or deletions of schema, events, parameters, and more. For analytical purposes, it’s necessary to flatten tables composed of these columns to simplify queries.</p>

<p><img src="/assets/2023-07-09-last-click-attribution/flatten-table.webp" alt="" /></p>
<blockquote>
  <p>BigQuery table has nested columns that look like this.</p>
</blockquote>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">WITH</span>  
<span class="n">CTE_flattened</span> <span class="k">AS</span> <span class="p">(</span>  
    <span class="k">SELECT</span>    
        <span class="c1">-- ==========================================================  </span>
        <span class="c1">-- [Datetime]  </span>
        <span class="c1">-- ==========================================================  </span>
        <span class="n">event_date</span><span class="p">,</span> <span class="c1">-- Event Date  </span>
        <span class="n">event_timestamp</span><span class="p">,</span> <span class="c1">-- Event Timestamp  </span>
        <span class="n">user_first_touch_timestamp</span><span class="p">,</span> <span class="c1">-- User's First Visit Timestamp  </span>

        <span class="c1">-- ==========================================================  </span>
        <span class="c1">-- [User &amp; Session ID]  </span>
        <span class="c1">-- ==========================================================    </span>
        <span class="n">user_pseudo_id</span><span class="p">,</span> <span class="c1">-- User ID  </span>
        <span class="n">ga_session_id</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">int_value</span> <span class="k">AS</span> <span class="n">ga_session_id</span><span class="p">,</span> <span class="c1">-- Session ID  </span>
        <span class="n">ga_session_number</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">int_value</span> <span class="k">AS</span> <span class="n">ga_session_number</span><span class="p">,</span> <span class="c1">-- User's Session Index (starting from 1)  </span>

        <span class="c1">-- ==========================================================  </span>
        <span class="c1">-- [Event Name]  </span>
        <span class="c1">-- ==========================================================    </span>
        <span class="n">event_name</span><span class="p">,</span>  

        <span class="c1">-- ==========================================================  </span>
        <span class="c1">-- [Geography &amp; Device]  </span>
        <span class="c1">-- ==========================================================    </span>
        <span class="n">geo</span><span class="p">.</span><span class="n">country</span><span class="p">,</span> <span class="c1">-- Country  </span>
        <span class="n">device</span><span class="p">.</span><span class="n">category</span> <span class="k">AS</span> <span class="n">device_category</span><span class="p">,</span> <span class="c1">-- Device Category  </span>
        <span class="n">device</span><span class="p">.</span><span class="n">operating_system</span> <span class="k">AS</span> <span class="n">device_os</span><span class="p">,</span> <span class="c1">-- Device OS  </span>
  
        <span class="c1">-- ==========================================================  </span>
        <span class="c1">-- [Acquisition]  </span>
        <span class="c1">-- ==========================================================  </span>
        <span class="c1">-- Landing Info  </span>
        <span class="n">entrances</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">int_value</span> <span class="k">AS</span> <span class="n">entrances</span><span class="p">,</span> <span class="c1">-- If it's the first landing page of this session (page_view Event only)  </span>
        <span class="k">REPLACE</span><span class="p">(</span><span class="n">REGEXP_REPLACE</span><span class="p">(</span><span class="k">LOWER</span><span class="p">(</span><span class="n">page_referrer</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">string_value</span><span class="p">),</span> <span class="n">r</span><span class="s1">'/$'</span><span class="p">,</span> <span class="s1">''</span><span class="p">),</span> <span class="s1">'https://'</span><span class="p">,</span> <span class="s1">''</span><span class="p">)</span> <span class="k">AS</span> <span class="n">page_referrer</span><span class="p">,</span>  
        <span class="c1">-- Session UTM  </span>
        <span class="n">campaign</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">string_value</span> <span class="k">AS</span> <span class="n">session_campaign</span><span class="p">,</span> <span class="c1">-- UTM Campaign (Session-based)  </span>
        <span class="n">medium</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">string_value</span> <span class="k">AS</span> <span class="n">session_medium</span><span class="p">,</span> <span class="c1">-- UTM Medium (Session-based)  </span>
        <span class="k">source</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">string_value</span> <span class="k">AS</span> <span class="n">session_source</span><span class="p">,</span> <span class="c1">-- UTM Source (Session-based)  </span>
        <span class="n">term</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">string_value</span> <span class="k">AS</span> <span class="n">session_term</span><span class="p">,</span> <span class="c1">-- UTM Term (Session-based)  </span>
        <span class="c1">-- First UTM  </span>
        <span class="n">traffic_source</span><span class="p">.</span><span class="n">name</span> <span class="k">AS</span> <span class="n">first_campaign</span><span class="p">,</span> <span class="c1">-- UTM Campaign (First-based)  </span>
        <span class="n">traffic_source</span><span class="p">.</span><span class="n">medium</span> <span class="k">AS</span> <span class="n">first_medium</span><span class="p">,</span> <span class="c1">-- UTM Medium (First-based)  </span>
        <span class="n">traffic_source</span><span class="p">.</span><span class="k">source</span> <span class="k">AS</span> <span class="n">first_source</span><span class="p">,</span> <span class="c1">-- UTM Source (First-based)  </span>
        <span class="c1">-- Manual UTM  </span>
        <span class="n">collected_traffic_source</span><span class="p">.</span><span class="n">manual_campaign_id</span> <span class="k">AS</span> <span class="n">manual_campaign_id</span><span class="p">,</span> <span class="c1">-- UTM Campaign ID (Manual-based)  </span>
        <span class="n">collected_traffic_source</span><span class="p">.</span><span class="n">manual_campaign_name</span> <span class="k">AS</span> <span class="n">manual_campaign</span><span class="p">,</span> <span class="c1">-- UTM Campaign (Manual-based)  </span>
        <span class="n">collected_traffic_source</span><span class="p">.</span><span class="n">manual_medium</span> <span class="k">AS</span> <span class="n">manual_medium</span><span class="p">,</span> <span class="c1">-- UTM Medium (Manual-based)  </span>
        <span class="n">collected_traffic_source</span><span class="p">.</span><span class="n">manual_source</span> <span class="k">AS</span> <span class="n">manual_source</span><span class="p">,</span> <span class="c1">-- UTM Source (Manual-based)  </span>
        <span class="n">collected_traffic_source</span><span class="p">.</span><span class="n">manual_term</span> <span class="k">AS</span> <span class="n">manual_term</span><span class="p">,</span> <span class="c1">-- UTM Term (Manual-based)  </span>
        <span class="n">collected_traffic_source</span><span class="p">.</span><span class="n">manual_content</span> <span class="k">AS</span> <span class="n">manual_content</span><span class="p">,</span> <span class="c1">-- UTM Content (Manual-based)  </span>
        <span class="c1">-- Ads Identifiers  </span>
        <span class="n">collected_traffic_source</span><span class="p">.</span><span class="n">gclid</span> <span class="k">AS</span> <span class="n">manual_gclid</span><span class="p">,</span> <span class="c1">-- Google Click Identifier  </span>
        <span class="n">collected_traffic_source</span><span class="p">.</span><span class="n">dclid</span> <span class="k">AS</span> <span class="n">manual_dclid</span><span class="p">,</span> <span class="c1">-- Google Marketing Platform Identifier  </span>
        <span class="n">collected_traffic_source</span><span class="p">.</span><span class="n">srsltid</span> <span class="k">AS</span> <span class="n">manual_srsltid</span><span class="p">,</span> <span class="c1">-- Google Merchant Center Identifier  </span>
  
        <span class="c1">-- ==========================================================  </span>
        <span class="c1">-- [Page]  </span>
        <span class="c1">-- ==========================================================  </span>
        <span class="n">REGEXP_REPLACE</span><span class="p">(</span><span class="k">LOWER</span><span class="p">(</span><span class="n">device</span><span class="p">.</span><span class="n">web_info</span><span class="p">.</span><span class="n">hostname</span><span class="p">),</span> <span class="n">r</span><span class="s1">'/$'</span><span class="p">,</span> <span class="s1">''</span><span class="p">)</span> <span class="k">AS</span> <span class="n">hostname</span><span class="p">,</span> <span class="c1">-- Domain or Subdomain  </span>
        <span class="k">REPLACE</span><span class="p">(</span><span class="n">REGEXP_REPLACE</span><span class="p">(</span><span class="n">REGEXP_REPLACE</span><span class="p">(</span><span class="k">LOWER</span><span class="p">(</span><span class="n">page_location</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">string_value</span><span class="p">),</span> <span class="n">r</span><span class="s1">'(</span><span class="se">\?</span><span class="s1">.*)$'</span><span class="p">,</span> <span class="s1">''</span><span class="p">),</span> <span class="n">r</span><span class="s1">'/$'</span><span class="p">,</span> <span class="s1">''</span><span class="p">),</span> <span class="s1">'https://'</span><span class="p">,</span> <span class="s1">''</span><span class="p">)</span> <span class="k">AS</span> <span class="n">page_location</span><span class="p">,</span> <span class="c1">-- Current Page URL  </span>
  
        <span class="c1">-- ==========================================================  </span>
        <span class="c1">-- [Engagement]  </span>
        <span class="c1">-- ==========================================================  </span>
        <span class="n">session_engaged</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">int_value</span> <span class="k">AS</span> <span class="n">session_engaged</span><span class="p">,</span> <span class="c1">-- If the session is engaged (session_start Event only)  </span>
        <span class="n">engagement_time_msec</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">int_value</span> <span class="k">AS</span> <span class="n">engagement_time_msec</span><span class="p">,</span> <span class="c1">-- session engagement time (msec)  </span>
  
        <span class="c1">-- ==========================================================  </span>
        <span class="c1">-- [Click Event]  </span>
        <span class="c1">-- ==========================================================  </span>
        <span class="n">outbound</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">string_value</span> <span class="k">AS</span> <span class="n">outbound</span><span class="p">,</span> <span class="c1">-- If the click Event is outbound from the current domain  </span>
        <span class="n">REGEXP_REPLACE</span><span class="p">(</span><span class="k">LOWER</span><span class="p">(</span><span class="n">link_domain</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">string_value</span><span class="p">),</span> <span class="n">r</span><span class="s1">'/$'</span><span class="p">,</span> <span class="s1">''</span><span class="p">)</span> <span class="k">AS</span> <span class="n">link_domain</span><span class="p">,</span> <span class="c1">-- Domain from the click Event  </span>
        <span class="k">REPLACE</span><span class="p">(</span><span class="n">REGEXP_REPLACE</span><span class="p">(</span><span class="n">REGEXP_REPLACE</span><span class="p">(</span><span class="k">LOWER</span><span class="p">(</span><span class="n">link_url</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">string_value</span><span class="p">),</span> <span class="n">r</span><span class="s1">'(</span><span class="se">\?</span><span class="s1">.*)$'</span><span class="p">,</span> <span class="s1">''</span><span class="p">),</span> <span class="n">r</span><span class="s1">'/$'</span><span class="p">,</span> <span class="s1">''</span><span class="p">),</span> <span class="s1">'https://'</span><span class="p">,</span> <span class="s1">''</span><span class="p">)</span> <span class="k">AS</span> <span class="n">link_url</span><span class="p">,</span> <span class="c1">-- Page URL from the click Event  </span>
  
        <span class="c1">-- ==========================================================  </span>
        <span class="c1">-- [Scroll Event]  </span>
        <span class="c1">-- ==========================================================  </span>
        <span class="n">percent_scrolled</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">int_value</span> <span class="k">AS</span> <span class="n">percent_scrolled</span><span class="p">,</span> <span class="c1">-- Scroll Percentage (default = 90 only)  </span>
  
        <span class="c1">-- ==========================================================  </span>
        <span class="c1">-- [Ecommerce Event]  </span>
        <span class="c1">-- ==========================================================    </span>
        <span class="c1">-- View Item ~  </span>
        <span class="n">ecomm_pagetype</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">string_value</span> <span class="k">AS</span> <span class="n">ecomm_pagetype</span><span class="p">,</span> <span class="c1">-- Type of the Page (product, cart) (view_item, add_to_cart, begin_checkout Event)   </span>
        <span class="n">ecomm_prodid</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">string_value</span> <span class="k">AS</span> <span class="n">ecomm_prodid</span><span class="p">,</span> <span class="c1">-- Product ID (view_item, begin_checkout, add_to_cart Event)  </span>
        <span class="n">ecommerce</span><span class="p">.</span><span class="n">total_item_quantity</span> <span class="k">AS</span> <span class="n">ecommerce_total_item_quantity</span><span class="p">,</span> <span class="c1">-- Amount of Total Items purchased (view_item, add_to_cart, begin_checkout, purchase Event)   </span>
        <span class="n">ecommerce</span><span class="p">.</span><span class="n">unique_items</span> <span class="k">AS</span> <span class="n">ecommerce_unique_items</span><span class="p">,</span> <span class="c1">-- Amount of Unique Items purchased (view_item, add_to_cart, begin_checkout, purchase Event)  </span>
        <span class="c1">-- Add to Cart ~  </span>
        <span class="n">ecomm_totalvalue</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">int_value</span> <span class="k">AS</span> <span class="n">ecomm_totalvalue</span><span class="p">,</span> <span class="c1">-- Total Value of Items (add_to_cart, begin_checkout Event)  </span>
        <span class="n">currency</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">string_value</span> <span class="k">AS</span> <span class="n">currency</span><span class="p">,</span> <span class="c1">-- Currency (add_to_cart, begin_checkout, add_payment_info, purchase Event)    </span>
        <span class="c1">-- Add Payment Info ~    </span>
        <span class="n">total</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">int_value</span> <span class="k">AS</span> <span class="n">total</span><span class="p">,</span> <span class="c1">-- Total Value (add_payment_info Event only)  </span>
        <span class="c1">-- Purchase ~  </span>
        <span class="n">ecommerce</span><span class="p">.</span><span class="n">transaction_id</span> <span class="k">AS</span> <span class="n">ecommerce_transaction_id</span><span class="p">,</span> <span class="c1">-- Transaction ID (purchase Event only)  </span>
        <span class="n">event_value_in_usd</span><span class="p">,</span> <span class="c1">-- Total value of purchase (purchase Event only)  </span>
        <span class="n">ecommerce</span><span class="p">.</span><span class="n">shipping_value_in_usd</span> <span class="k">AS</span> <span class="n">ecommerce_shipping_value_in_usd</span><span class="p">,</span> <span class="c1">-- shipping fee (purchase Event only)  </span>
        <span class="c1">-- Lifetime Value  </span>
        <span class="n">user_ltv</span><span class="p">.</span><span class="n">revenue</span> <span class="k">AS</span> <span class="n">user_ltv_revenue</span><span class="p">,</span> <span class="c1">-- User's Lifetime Value  </span>
        <span class="n">user_ltv</span><span class="p">.</span><span class="n">currency</span> <span class="k">AS</span> <span class="n">user_ltv_currency</span><span class="p">,</span> <span class="c1">-- User's Lifetime Value Currency  </span>
  
    <span class="k">FROM</span> <span class="nv">`iotrust-data.analytics_123456789.events_*`</span> <span class="n">MAIN</span>  
  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">ga_session_id</span> <span class="k">ON</span> <span class="n">ga_session_id</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'ga_session_id'</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">ga_session_number</span> <span class="k">ON</span> <span class="n">ga_session_number</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'ga_session_number'</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">session_engaged</span> <span class="k">ON</span> <span class="n">session_engaged</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'session_engaged'</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">engagement_time_msec</span> <span class="k">ON</span> <span class="n">engagement_time_msec</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'engagement_time_msec'</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">percent_scrolled</span> <span class="k">ON</span> <span class="n">percent_scrolled</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'percent_scrolled'</span>  
  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">page_location</span> <span class="k">ON</span> <span class="n">page_location</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'page_location'</span>  
  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">entrances</span> <span class="k">ON</span> <span class="n">entrances</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'entrances'</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">page_referrer</span> <span class="k">ON</span> <span class="n">page_referrer</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'page_referrer'</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">campaign</span> <span class="k">ON</span> <span class="n">campaign</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'campaign'</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">medium</span> <span class="k">ON</span> <span class="n">medium</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'medium'</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="k">source</span> <span class="k">ON</span> <span class="k">source</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'source'</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">term</span> <span class="k">ON</span> <span class="n">term</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'term'</span>  
      
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">outbound</span> <span class="k">ON</span> <span class="n">outbound</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'outbound'</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">link_domain</span> <span class="k">ON</span> <span class="n">link_domain</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'link_domain'</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">link_url</span> <span class="k">ON</span> <span class="n">link_url</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'link_url'</span>  
      
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">transaction_id</span> <span class="k">ON</span> <span class="n">transaction_id</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'transaction_id'</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">ecomm_prodid</span> <span class="k">ON</span> <span class="n">ecomm_prodid</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'ecomm_prodid'</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">ecomm_pagetype</span> <span class="k">ON</span> <span class="n">ecomm_pagetype</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'ecomm_pagetype'</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">currency</span> <span class="k">ON</span> <span class="n">currency</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'currency'</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">ecomm_totalvalue</span> <span class="k">ON</span> <span class="n">ecomm_totalvalue</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'ecomm_totalvalue'</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">total</span> <span class="k">ON</span> <span class="n">total</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'total'</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">value</span> <span class="k">ON</span> <span class="n">value</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'value'</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">shipping</span> <span class="k">ON</span> <span class="n">shipping</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'shipping'</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="k">UNNEST</span> <span class="p">(</span><span class="n">event_params</span><span class="p">)</span> <span class="k">AS</span> <span class="n">tax</span> <span class="k">ON</span> <span class="n">tax</span><span class="p">.</span><span class="k">key</span> <span class="o">=</span> <span class="s1">'tax'</span>  
  
    <span class="k">WHERE</span>  
        <span class="n">_table_suffix</span> <span class="k">BETWEEN</span> 
            <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'yyyy-mm-dd'</span><span class="p">)</span>
            <span class="k">AND</span> <span class="n">FORMAT_DATE</span><span class="p">(</span><span class="s1">'%Y%m%d'</span><span class="p">,</span> <span class="s1">'yyyy-mm-dd'</span><span class="p">)</span>  
        <span class="k">AND</span> <span class="n">user_pseudo_id</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span>  
        <span class="k">AND</span> <span class="n">ga_session_id</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">int_value</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span>  
        <span class="k">AND</span> <span class="n">ga_session_number</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">int_value</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span>  
<span class="p">),</span>
</code></pre></div></div>

<h1 id="4-standardize-the-session-utm-values-for-all-events-within-each-session">4. Standardize the session UTM values for all events within each session.</h1>

<p>For some reason that is not entirely clear, due to the inaccuracies in GA4, there are cases where the UTM values that contributed to the acquisition of specific sessions are occasionally lost.</p>

<table>
  <thead>
    <tr>
      <th><strong>User ID</strong></th>
      <th><strong>Session ID</strong></th>
      <th><strong>Event Name</strong></th>
      <th><strong>Session Campaign</strong></th>
      <th><strong>Session Medium</strong></th>
      <th><strong>Session Source</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Joshua</td>
      <td>12345</td>
      <td><code class="language-plaintext highlighter-rouge">session_start</code></td>
      <td>(n/a)</td>
      <td>(n/a)</td>
      <td>(n/a)</td>
    </tr>
    <tr>
      <td>Joshua</td>
      <td>12345</td>
      <td><code class="language-plaintext highlighter-rouge">page_view</code></td>
      <td>summer-event</td>
      <td>owned-media</td>
      <td>facebook</td>
    </tr>
    <tr>
      <td>Joshua</td>
      <td>12345</td>
      <td><code class="language-plaintext highlighter-rouge">user_engagement</code></td>
      <td>summer-event</td>
      <td>owned-media</td>
      <td>facebook</td>
    </tr>
    <tr>
      <td>Joshua</td>
      <td>12345</td>
      <td><code class="language-plaintext highlighter-rouge">scroll</code></td>
      <td>(n/a)</td>
      <td>(n/a)</td>
      <td>(n/a)</td>
    </tr>
    <tr>
      <td>Joshua</td>
      <td>12345</td>
      <td><code class="language-plaintext highlighter-rouge">begin_checkout</code></td>
      <td>summer-event</td>
      <td>owned-media</td>
      <td>facebook</td>
    </tr>
    <tr>
      <td>Joshua</td>
      <td>12345</td>
      <td><code class="language-plaintext highlighter-rouge">add_payment_info</code></td>
      <td>summer-event</td>
      <td>owned-media</td>
      <td>facebook</td>
    </tr>
  </tbody>
</table>

<p>I have encountered several weird cases like this.</p>

<p>Therefore, in such cases, if there are session UTM values within the same session, the UTM values from the first event that occurred should be propagated to all the other events within the same session, ensuring they have the same values.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CTE_session_campaign_sequence</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
        <span class="n">user_pseudo_id</span><span class="p">,</span> <span class="n">ga_session_id</span><span class="p">,</span>
        <span class="n">session_campaign</span><span class="p">,</span>
        <span class="n">session_medium</span><span class="p">,</span>
        <span class="n">session_source</span><span class="p">,</span>
        <span class="n">session_term</span><span class="p">,</span>
        <span class="k">CASE</span>
            <span class="k">WHEN</span> <span class="n">session_campaign</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">THEN</span>
                <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span>
                    <span class="k">PARTITION</span> <span class="k">BY</span>
                        <span class="n">user_pseudo_id</span><span class="p">,</span> <span class="n">ga_session_id</span><span class="p">,</span>
                        <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">session_campaign</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">THEN</span> <span class="mi">1</span> <span class="k">ELSE</span> <span class="mi">0</span> <span class="k">END</span>
                    <span class="k">ORDER</span> <span class="k">BY</span>
                        <span class="n">event_timestamp</span>
                <span class="p">)</span>
            <span class="k">WHEN</span> <span class="n">session_campaign</span> <span class="k">IS</span> <span class="k">NULL</span> <span class="k">THEN</span>
                <span class="mi">1</span>
        <span class="k">END</span> <span class="k">AS</span> <span class="n">row_num</span>
    <span class="k">FROM</span>
        <span class="n">CTE_flattened</span>
<span class="p">),</span>

<span class="n">CTE_utm_spread</span> <span class="k">AS</span> <span class="p">(</span> <span class="c1">-- spread session utm parameters throughout each user &amp; session  </span>
    <span class="k">SELECT</span>  
        <span class="n">MAIN</span><span class="p">.</span><span class="o">*</span> <span class="k">EXCEPT</span> <span class="p">(</span><span class="n">session_campaign</span><span class="p">,</span> <span class="n">session_medium</span><span class="p">,</span> <span class="n">session_source</span><span class="p">,</span> <span class="n">session_term</span><span class="p">),</span>  
        <span class="n">SUB</span><span class="p">.</span><span class="n">real_session_campaign</span> <span class="k">AS</span> <span class="n">session_campaign</span><span class="p">,</span>  
        <span class="n">SUB</span><span class="p">.</span><span class="n">real_session_medium</span> <span class="k">AS</span> <span class="n">session_medium</span><span class="p">,</span>  
        <span class="n">SUB</span><span class="p">.</span><span class="n">real_session_source</span> <span class="k">AS</span> <span class="n">session_source</span><span class="p">,</span>  
        <span class="n">SUB</span><span class="p">.</span><span class="n">real_session_term</span> <span class="k">AS</span> <span class="n">session_term</span>  
    <span class="k">FROM</span> 
        <span class="n">CTE_flattened</span> <span class="n">MAIN</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="p">(</span>  
        <span class="k">SELECT</span>  
            <span class="n">user_pseudo_id</span><span class="p">,</span> <span class="n">ga_session_id</span><span class="p">,</span>  
            <span class="k">MAX</span><span class="p">(</span><span class="n">session_campaign</span><span class="p">)</span> <span class="k">AS</span> <span class="n">real_session_campaign</span><span class="p">,</span>  
            <span class="k">MAX</span><span class="p">(</span><span class="n">session_medium</span><span class="p">)</span> <span class="k">AS</span> <span class="n">real_session_medium</span><span class="p">,</span>  
            <span class="k">MAX</span><span class="p">(</span><span class="n">session_source</span><span class="p">)</span> <span class="k">AS</span> <span class="n">real_session_source</span><span class="p">,</span>  
            <span class="k">MAX</span><span class="p">(</span><span class="n">session_term</span><span class="p">)</span> <span class="k">AS</span> <span class="n">real_session_term</span>  
        <span class="k">FROM</span>
            <span class="n">CTE_session_campaign_sequence</span>
        <span class="k">WHERE</span>
            <span class="n">row_num</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">GROUP</span> <span class="k">BY</span>
            <span class="n">user_pseudo_id</span><span class="p">,</span> <span class="n">ga_session_id</span>
    <span class="p">)</span> <span class="n">SUB</span>
    <span class="k">ON</span> 
        <span class="n">MAIN</span><span class="p">.</span><span class="n">user_pseudo_id</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">user_pseudo_id</span> 
        <span class="k">AND</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">ga_session_id</span> <span class="o">=</span> <span class="n">SUB</span><span class="p">.</span><span class="n">ga_session_id</span>  
    <span class="k">ORDER</span> <span class="k">BY</span>  
        <span class="n">MAIN</span><span class="p">.</span><span class="n">user_pseudo_id</span><span class="p">,</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">ga_session_id</span><span class="p">,</span> <span class="n">MAIN</span><span class="p">.</span><span class="n">event_timestamp</span>
<span class="p">),</span>
</code></pre></div></div>

<h1 id="5--replace-null-session-utm-values-with-the-value-direct">5.  Replace NULL session UTM values with the value “<code class="language-plaintext highlighter-rouge">(direct)</code>”.</h1>

<p>Personally, I tend to consider the “<code class="language-plaintext highlighter-rouge">(direct)</code>” values more as “unknown” rather than the direct traffic. Nevertheless, to ensure that calculations are not affected by NULL values during the aggregation process, here I proceeded with replacing all NULL values with “<code class="language-plaintext highlighter-rouge">(direct)</code>”.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CTE_fill_na</span> <span class="k">AS</span> <span class="p">(</span> <span class="c1">-- Replace NULL session_utms with (direct)</span>
    <span class="k">SELECT</span>  
        <span class="o">*</span> <span class="k">EXCEPT</span> <span class="p">(</span><span class="n">session_campaign</span><span class="p">,</span> <span class="n">session_medium</span><span class="p">,</span> <span class="n">session_source</span><span class="p">,</span> <span class="n">session_term</span><span class="p">),</span>  
        <span class="n">IFNULL</span><span class="p">(</span><span class="n">session_campaign</span><span class="p">,</span> <span class="s1">'(direct)'</span><span class="p">)</span> <span class="k">AS</span> <span class="n">session_campaign</span><span class="p">,</span>  
        <span class="n">IFNULL</span><span class="p">(</span><span class="n">session_medium</span><span class="p">,</span> <span class="s1">'(none)'</span><span class="p">)</span> <span class="k">AS</span> <span class="n">session_medium</span><span class="p">,</span>  
        <span class="n">IFNULL</span><span class="p">(</span><span class="n">session_source</span><span class="p">,</span> <span class="s1">'(direct)'</span><span class="p">)</span> <span class="k">AS</span> <span class="n">session_source</span><span class="p">,</span>  
        <span class="n">IFNULL</span><span class="p">(</span><span class="n">session_term</span><span class="p">,</span> <span class="s1">'(direct)'</span><span class="p">)</span> <span class="k">AS</span> <span class="n">session_term</span>  
    <span class="k">FROM</span> <span class="n">CTE_utm_spread</span>  
<span class="p">),</span>
</code></pre></div></div>

<h1 id="6-extract-only-the-necessary-columns-for-calculating-attribution">6. Extract only the necessary columns for calculating attribution.</h1>

<p>You only need the following columns:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">user_pseudo_id</code></li>
  <li><code class="language-plaintext highlighter-rouge">event_date</code></li>
  <li><code class="language-plaintext highlighter-rouge">event_timestamp</code></li>
  <li><code class="language-plaintext highlighter-rouge">session_campaign</code></li>
  <li><code class="language-plaintext highlighter-rouge">session_medium</code></li>
  <li><code class="language-plaintext highlighter-rouge">session_source</code></li>
  <li><code class="language-plaintext highlighter-rouge">conversion</code> (whether they have made their purchase or not)</li>
  <li><code class="language-plaintext highlighter-rouge">revenue</code> (total value of purchase)</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CTE_user_sessions_channel_conversion</span> <span class="k">AS</span> <span class="p">(</span>    
    <span class="k">SELECT</span>
        <span class="n">user_pseudo_id</span><span class="p">,</span>  
        <span class="n">event_date</span><span class="p">,</span> <span class="n">event_timestamp</span><span class="p">,</span>  
        <span class="n">session_campaign</span><span class="p">,</span> <span class="n">session_medium</span><span class="p">,</span> <span class="n">session_source</span><span class="p">,</span>  
        <span class="k">CASE</span>  
            <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'session_start'</span> <span class="k">THEN</span> <span class="mi">0</span>  
            <span class="k">WHEN</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'purchase'</span> <span class="k">THEN</span> <span class="mi">1</span>  
        <span class="k">END</span> <span class="k">AS</span> <span class="k">conversion</span><span class="p">,</span>  
        <span class="n">event_value_in_usd</span> <span class="k">AS</span> <span class="n">revenue</span>  
    <span class="k">FROM</span>
        <span class="n">CTE_fill_na</span>  
    <span class="k">WHERE</span>  
        <span class="n">event_name</span> <span class="k">IN</span> <span class="p">(</span>
            <span class="s1">'session_start'</span><span class="p">,</span> 
            <span class="s1">'purchase'</span>
        <span class="p">)</span>  
    <span class="k">ORDER</span> <span class="k">BY</span>  
        <span class="n">user_pseudo_id</span><span class="p">,</span> <span class="n">event_timestamp</span>  
<span class="p">),</span>
</code></pre></div></div>

<h1 id="7-assign-journey-numbers-to-each-users-purchase-event">7. Assign journey numbers to each user’s purchase event.</h1>

<p>Since a user may make multiple purchases, it’s necessary to recalculate attribution after the first purchase event.</p>

<p><img src="/assets/2023-07-09-last-click-attribution/joshua-flowchart-1.webp" alt="" /></p>

<p>You’ll need to separate each journey when it comes to calculating Joshua’s attribution model.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CTE_purchase_journey</span> <span class="k">AS</span> <span class="p">(</span>    
    <span class="k">SELECT</span>  
        <span class="n">user_pseudo_id</span><span class="p">,</span>  
        <span class="n">event_date</span><span class="p">,</span> <span class="n">event_timestamp</span><span class="p">,</span>  
        <span class="n">session_campaign</span><span class="p">,</span> <span class="n">session_medium</span><span class="p">,</span> <span class="n">session_source</span><span class="p">,</span>  
        <span class="k">conversion</span><span class="p">,</span>  
        <span class="n">revenue</span><span class="p">,</span>  
        <span class="n">COALESCE</span><span class="p">(</span><span class="n">cumsum_conversion</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">AS</span> <span class="n">purchase_journey</span>  
    <span class="k">FROM</span>  
    <span class="p">(</span>  
        <span class="k">SELECT</span>  
            <span class="o">*</span><span class="p">,</span>  
            <span class="k">SUM</span><span class="p">(</span><span class="k">conversion</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span>  
                <span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">user_pseudo_id</span>  
                <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">event_timestamp</span>  
                <span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="n">UNBOUNDED</span> <span class="k">PRECEDING</span> <span class="k">AND</span> <span class="mi">1</span> <span class="k">PRECEDING</span>  
            <span class="p">)</span> <span class="k">AS</span> <span class="n">cumsum_conversion</span>  
        <span class="k">FROM</span>
            <span class="n">CTE_user_sessions_channel_conversion</span>  
    <span class="p">)</span>  
    <span class="k">ORDER</span> <span class="k">BY</span>  
        <span class="n">user_pseudo_id</span><span class="p">,</span> <span class="n">event_timestamp</span>  
<span class="p">),</span>
</code></pre></div></div>

<h1 id="8-assign-priorities-to-indicate-the-order-of-events-for-applying-the-last-click-attribution-model">8. Assign Priorities to indicate the order of events for applying the Last Click Attribution Model.</h1>

<p>When applying Last Click Attribution mechanically, there is a high possibility of incorrect attribution in cases like the following:</p>
<ul>
  <li>Joshua was initially acquired through the Summer Event campaign, then explored other information, and later started a new session through a Google search before making a purchase.</li>
  <li>In this case, it should be considered that Joshua made the purchase not primarily due to the effectiveness of our Google SEO strategy, as he was already aware of our website. Instead, it can be attributed to the appeal of the Summer Event, which influenced his decision to make the purchase.</li>
</ul>

<p><img src="/assets/2023-07-09-last-click-attribution/joshua-flowchart-2.webp" alt="" /></p>

<p>Therefore, I have assigned priorities based on the session_campaign as follows:</p>
<ul>
  <li>1 &lt; <code class="language-plaintext highlighter-rouge">direct</code> &lt; 2</li>
  <li>2 &lt; <code class="language-plaintext highlighter-rouge">organic</code> &lt; 3</li>
  <li>3 &lt; <code class="language-plaintext highlighter-rouge">referral</code> &lt; 4</li>
  <li>4 &lt; <code class="language-plaintext highlighter-rouge">identified campaign</code></li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CTE_attribution_priority</span> <span class="k">AS</span> <span class="p">(</span> <span class="c1">-- Adjusted Last Click Model</span>
    <span class="k">SELECT</span>  
        <span class="o">*</span><span class="p">,</span>  
        <span class="k">CASE</span>  
            <span class="k">WHEN</span> <span class="n">session_campaign</span> <span class="o">=</span> <span class="s1">'(direct)'</span>
                <span class="k">THEN</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span>
                    <span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">user_pseudo_id</span><span class="p">,</span> <span class="n">purchase_journey</span>
                    <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">event_timestamp</span>
                <span class="p">)</span> <span class="o">/</span> <span class="mi">1000</span>  
            <span class="k">WHEN</span> <span class="n">session_campaign</span> <span class="o">=</span> <span class="s1">'(organic)'</span>
                <span class="k">THEN</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span>
                    <span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">user_pseudo_id</span><span class="p">,</span> <span class="n">purchase_journey</span> 
                    <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">event_timestamp</span>
                <span class="p">)</span> <span class="o">/</span> <span class="mi">1000</span>  
            <span class="k">WHEN</span> <span class="n">session_campaign</span> <span class="o">=</span> <span class="s1">'(referral)'</span>
                <span class="k">THEN</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span>
                    <span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">user_pseudo_id</span><span class="p">,</span> <span class="n">purchase_journey</span>
                    <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">event_timestamp</span>
                <span class="p">)</span> <span class="o">/</span> <span class="mi">1000</span>  
            <span class="k">ELSE</span> 
                <span class="mi">4</span> <span class="o">+</span> <span class="n">ROW_NUMBER</span><span class="p">()</span> <span class="n">OVER</span> <span class="p">(</span>
                    <span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">user_pseudo_id</span><span class="p">,</span> <span class="n">purchase_journey</span> 
                    <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">event_timestamp</span>
                <span class="p">)</span> <span class="o">/</span> <span class="mi">1000</span>  
        <span class="k">END</span> <span class="k">AS</span> <span class="n">attribution_priority</span>  
    <span class="k">FROM</span>
        <span class="n">CTE_purchase_journey</span>
    <span class="k">ORDER</span> <span class="k">BY</span>  
        <span class="n">user_pseudo_id</span><span class="p">,</span> <span class="n">event_timestamp</span>    
<span class="p">),</span>
</code></pre></div></div>

<h1 id="9--the-session_campaign-with-the-highest-priority-will-be-attributed-to-100-of-the-revenue">9.  The <code class="language-plaintext highlighter-rouge">session_campaign</code> with the highest priority will be attributed to 100% of the revenue.</h1>

<p>I have assigned priority classes based on the campaigns such as direct, organic, referral, and identifiable campaigns. However, within the same class, the attribution will be applied based on the most recent event, following the Last Click Attribution Model. Now, you can call this approach “<strong>Joshua’s Adjusted Last Click Attribution Model</strong>”. 😄</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CTE_revenue_attribution</span> <span class="k">AS</span> <span class="p">(</span>  
    <span class="k">SELECT</span>  
        <span class="n">user_pseudo_id</span><span class="p">,</span>  
        <span class="n">event_date</span><span class="p">,</span> <span class="n">event_timestamp</span><span class="p">,</span>  
        <span class="n">session_campaign</span><span class="p">,</span> <span class="n">session_medium</span><span class="p">,</span> <span class="n">session_source</span><span class="p">,</span>  
        <span class="k">conversion</span><span class="p">,</span>  
        <span class="n">revenue</span><span class="p">,</span>  
        <span class="n">purchase_journey</span><span class="p">,</span>  
        <span class="k">CASE</span>  
            <span class="k">WHEN</span> <span class="n">attribution_priority</span> <span class="o">=</span> <span class="k">MAX</span><span class="p">(</span><span class="n">attribution_priority</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span>
                <span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">user_pseudo_id</span><span class="p">,</span> <span class="n">purchase_journey</span>
            <span class="p">)</span>  
                <span class="k">THEN</span> <span class="k">MAX</span><span class="p">(</span><span class="n">revenue</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span>
                    <span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">user_pseudo_id</span><span class="p">,</span> <span class="n">purchase_journey</span>
                <span class="p">)</span>  
            <span class="k">ELSE</span> 
                <span class="k">NULL</span>  
        <span class="k">END</span> <span class="k">AS</span> <span class="n">revenue_attribution</span>  
    <span class="k">FROM</span>
        <span class="n">CTE_attribution_priority</span>  
    <span class="k">ORDER</span> <span class="k">BY</span>  
        <span class="n">user_pseudo_id</span><span class="p">,</span> <span class="n">event_timestamp</span>  
<span class="p">)</span>
</code></pre></div></div>

<h1 id="10-now-lets-perform-the-last-click-attribution-aggregation-for-each-channel">10. Now, let’s perform the Last Click Attribution aggregation for each channel.</h1>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>  
    <span class="k">CASE</span>  
        <span class="k">WHEN</span> <span class="n">session_campaign</span> <span class="o">=</span> <span class="s1">'(organic)'</span> <span class="k">THEN</span> <span class="s1">'Search Engine'</span>  
        <span class="k">WHEN</span> <span class="n">session_campaign</span> <span class="o">=</span> <span class="s1">'(direct)'</span> <span class="k">THEN</span> <span class="s1">'Direct or Unknown'</span>  
        <span class="k">WHEN</span> <span class="n">session_campaign</span> <span class="o">=</span> <span class="s1">'(referral)'</span> <span class="k">THEN</span> <span class="s1">'Social Media, Blogs, etc. (without UTM)'</span>  
        <span class="k">ELSE</span> <span class="n">session_campaign</span>  
    <span class="k">END</span> <span class="k">AS</span> <span class="n">session_campaign_edited</span><span class="p">,</span>  
    <span class="k">CASE</span>  
        <span class="k">WHEN</span> <span class="n">session_campaign</span> <span class="o">=</span> <span class="s1">'(organic)'</span> <span class="k">THEN</span> <span class="n">session_source</span>  
        <span class="k">WHEN</span> <span class="n">session_campaign</span> <span class="o">=</span> <span class="s1">'(referral)'</span> <span class="k">THEN</span> <span class="n">session_source</span>  
        <span class="k">ELSE</span> <span class="k">NULL</span>  
    <span class="k">END</span> <span class="k">AS</span> <span class="n">session_source</span><span class="p">,</span>  
    <span class="k">SUM</span><span class="p">(</span><span class="n">revenue_attribution</span><span class="p">)</span> <span class="k">AS</span> <span class="n">revenue</span><span class="p">,</span>  
    <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_pseudo_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">acquisition_user_cnt</span><span class="p">,</span>  
    <span class="k">SUM</span><span class="p">(</span><span class="n">revenue_attribution</span><span class="p">)</span> <span class="o">/</span> <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_pseudo_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">avg_revenue_per_user</span><span class="p">,</span>  
    <span class="k">COUNT</span><span class="p">(</span><span class="n">revenue_attribution</span><span class="p">)</span> <span class="k">AS</span> <span class="n">purchase_cnt</span><span class="p">,</span>  
    <span class="k">SUM</span><span class="p">(</span><span class="n">revenue_attribution</span><span class="p">)</span> <span class="o">/</span> <span class="k">COUNT</span><span class="p">(</span><span class="n">revenue_attribution</span><span class="p">)</span> <span class="k">AS</span> <span class="n">avg_revenue_per_purchase</span>  
<span class="k">FROM</span> 
    <span class="n">CTE_revenue_attribution</span>  
<span class="k">GROUP</span> <span class="k">BY</span> 
    <span class="n">session_campaign_edited</span><span class="p">,</span> <span class="n">session_source</span>  
<span class="k">ORDER</span> <span class="k">BY</span> 
    <span class="n">revenue</span> <span class="k">DESC</span>
<span class="p">;</span>
</code></pre></div></div>

<h1 id="10-lets-create-a-dashboard-using-redash">10. Let’s create a dashboard using Redash.</h1>

<p><img src="/assets/2023-07-09-last-click-attribution/redash.webp" alt="" /></p>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="english" /><category term="data_analytics" /><category term="sql" /><category term="bigquery" /><summary type="html"><![CDATA[In this article, you will explore how to easily aggregate the Last Click Attribution Model using BigQuery.]]></summary></entry></feed>