<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-01-14T17:23:55+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Joshua Kim</title><subtitle>Data Analyst</subtitle><entry><title type="html">Data Warehouse #12-13</title><link href="http://localhost:4000/data-warehouse-12-13/" rel="alternate" type="text/html" title="Data Warehouse #12-13" /><published>2024-01-14T00:00:00+09:00</published><updated>2024-01-14T00:00:00+09:00</updated><id>http://localhost:4000/data-warehouse-12-13</id><content type="html" xml:base="http://localhost:4000/data-warehouse-12-13/"><![CDATA[<blockquote>
  <p>In this article, I’ll summarize key takeaways from:</p>
  <ul>
    <li>SECTION 12. Using a Data Warehouse</li>
    <li>SECTION 13. Optimizing a Data Warehouse</li>
  </ul>
</blockquote>

<h3 id="disclaimer">DISCLAIMER</h3>
<blockquote>
  <p>This article is a compilation of key takeaways after completing <a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Data Warehouse — The Ultimate Guide</a> on Udemy. However, it may be challenging to achieve a comprehensive and deep understanding of Data Warehouse solely through this article. For your in-depth learning, please take the course, which is an excellent resource, and I personally highly recommend it to those who are eager to master data warehousing, dimensional modeling, and the ETL process.</p>
</blockquote>

<p><img src="/assets/2023-12-19-data-warehouse-06/data-warehouse.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Source</a></p>
</blockquote>

<h1 id="using-indexes">Using Indexes</h1>

<p><img src="/assets/2024-01-14-data-warehouse-12-13/1.png" alt="" /></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>
	<span class="n">product_id</span>
<span class="k">FROM</span>
	<span class="n">sales</span>
<span class="k">WHERE</span>
	<span class="n">customer_id</span> <span class="o">=</span> <span class="mi">5</span>
</code></pre></div></div>

<h3 id="without-indexes">WITHOUT Indexes</h3>
<ul>
  <li>Table Scan</li>
  <li>Read Efficiency ⬇️</li>
  <li>Write Efficiency ⬆️</li>
</ul>

<h3 id="with-indexes">WITH Indexes</h3>
<ul>
  <li>Read Efficiency ⬆️</li>
  <li>Write Efficiency ⬇️</li>
  <li>How It Works:
    <ul>
      <li>Write Data in a Specific Order</li>
      <li>Create a Lookup Table (to find a pointer to read later)</li>
    </ul>
  </li>
</ul>

<p><img src="/assets/2024-01-14-data-warehouse-12-13/2.png" alt="" /></p>
<blockquote>
  <p>Write Data in a Specific Order</p>
</blockquote>

<p><img src="/assets/2024-01-14-data-warehouse-12-13/3.png" alt="" /></p>
<blockquote>
  <p>Create a Lookup Table</p>
</blockquote>

<p><img src="/assets/2024-01-14-data-warehouse-12-13/4.png" alt="" /></p>

<h1 id="b-tree-indexes">B-tree Indexes</h1>

<p><img src="/assets/2024-01-14-data-warehouse-12-13/5.png" alt="" /></p>
<blockquote>
  <p><a href="https://velog.io/@gayeong39/B-%ED%8A%B8%EB%A6%AC-%EC%9D%B8%EB%8D%B1%EC%8A%A4">Source</a></p>
</blockquote>

<ul>
  <li>Multi-level Tree Structure</li>
  <li>It breaks data down into pages or blocks.</li>
  <li>Columns should be High Cardinality</li>
  <li>Not Entire Table</li>
  <li>Storage Cost ⬆️</li>
</ul>

<h1 id="bitmap-indexes">Bitmap Indexes</h1>

<p><img src="/assets/2024-01-14-data-warehouse-12-13/6.png" alt="" /></p>
<blockquote>
  <p><a href="https://velog.io/@gayeong39/%EB%B9%84%ED%8A%B8%EB%A7%B5-%EC%9D%B8%EB%8D%B1%EC%8A%A4BitMap-Index">Source</a></p>
</blockquote>

<ul>
  <li>Particularly Good for Data Warehouses</li>
  <li>Columns should be <strong>Low Cardinality</strong> + <strong>Large Amounts of Data</strong></li>
  <li>Storage Cost ⬇️</li>
  <li>Read Optimization ⬆️</li>
  <li>DML Operation ⬆️</li>
</ul>

<h1 id="guidelines">Guidelines</h1>

<table>
  <thead>
    <tr>
      <th><strong>B-tree Index</strong></th>
      <th><strong>Bitmap Index</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Default Index</td>
      <td>Slow Update</td>
    </tr>
    <tr>
      <td>Unique Columns</td>
      <td>Storage Efficiency</td>
    </tr>
    <tr>
      <td>(Surrogate Key, Names)</td>
      <td>Read Performance ⬆️</td>
    </tr>
  </tbody>
</table>

<p><img src="/assets/2024-01-14-data-warehouse-12-13/7.png" alt="" /></p>

<h3 id="fact-tables">Fact Tables</h3>
<ul>
  <li>Choose Columns that are used as <code class="language-plaintext highlighter-rouge">Filters</code>.</li>
  <li>Surrogate Key → <strong>B-tree Index</strong></li>
  <li>Foreign Keys → <strong>Bitmap Index</strong></li>
</ul>

<h3 id="dimension-tables">Dimension Tables</h3>
<ul>
  <li>Are they used in searches a lot?</li>
  <li>Choose based on <code class="language-plaintext highlighter-rouge">Cardinality</code>.</li>
</ul>

<h3 id="create-index-examples">Create Index Examples</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">INDEX</span>
	<span class="n">index_name</span> <span class="k">ON</span> <span class="k">table_name</span> <span class="p">[</span><span class="k">USING</span> <span class="k">method</span><span class="p">]</span>
	<span class="p">(</span>
		<span class="k">column_name</span> <span class="p">[</span><span class="k">ASC</span> <span class="o">|</span> <span class="k">DESC</span><span class="p">],</span>
		<span class="p">...</span>
	<span class="p">)</span>
<span class="p">;</span>
</code></pre></div></div>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="SQL" /><category term="Data Warehouse" /><summary type="html"><![CDATA[In this article, I’ll summarize key takeaways from: SECTION 12. Using a Data Warehouse SECTION 13. Optimizing a Data Warehouse]]></summary></entry><entry><title type="html">Data Warehouse #10</title><link href="http://localhost:4000/data-warehouse-10/" rel="alternate" type="text/html" title="Data Warehouse #10" /><published>2024-01-13T00:00:00+09:00</published><updated>2024-01-13T00:00:00+09:00</updated><id>http://localhost:4000/data-warehouse-10</id><content type="html" xml:base="http://localhost:4000/data-warehouse-10/"><![CDATA[<blockquote>
  <p>In this article, I’ll summarize key takeaways from:</p>
  <ul>
    <li>SECTION 10. Case Study: Creating a Data Warehouse</li>
  </ul>
</blockquote>

<h3 id="disclaimer">DISCLAIMER</h3>
<blockquote>
  <p>This article is a compilation of key takeaways after completing <a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Data Warehouse — The Ultimate Guide</a> on Udemy. However, it may be challenging to achieve a comprehensive and deep understanding of Data Warehouse solely through this article. For your in-depth learning, please take the course, which is an excellent resource, and I personally highly recommend it to those who are eager to master data warehousing, dimensional modeling, and the ETL process.</p>
</blockquote>

<p><img src="/assets/2023-12-19-data-warehouse-06/data-warehouse.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Source</a></p>
</blockquote>

<h1 id="guidelines">Guidelines</h1>
<ol>
  <li>Look at the problem and plan</li>
  <li>Set up tables &amp; schema</li>
  <li>Staging</li>
  <li>Core (Dimension Tables)</li>
  <li>Core (Fact Tables)</li>
  <li>Set up Jobs &amp; Testing</li>
</ol>

<h1 id="fact-table-design">Fact Table Design</h1>
<ol>
  <li><code class="language-plaintext highlighter-rouge">date_FK</code></li>
  <li><code class="language-plaintext highlighter-rouge">product_FK</code></li>
  <li><code class="language-plaintext highlighter-rouge">payment_FK</code></li>
  <li>Additional Columns:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">total_price</code></li>
      <li><code class="language-plaintext highlighter-rouge">total_cost</code></li>
      <li><code class="language-plaintext highlighter-rouge">profit</code></li>
    </ul>
  </li>
</ol>

<p><img src="/assets/2024-01-13-data-warehouse-10/1.png" alt="" /></p>

<h1 id="processing-order">Processing Order</h1>

<p><img src="/assets/2024-01-13-data-warehouse-10/2.png" alt="" /></p>

<h3 id="source--staging">Source → Staging</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Extract</code>
    <ul>
      <li>Add Surrogate Key</li>
      <li>Delta Logic
        <h3 id="staging--core">Staging → Core</h3>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Transform</code> + <code class="language-plaintext highlighter-rouge">Load</code>
    <ul>
      <li>Clean Data</li>
      <li>Add Additional Columns</li>
    </ul>
  </li>
</ul>

<h1 id="scheduling">Scheduling</h1>
<ul>
  <li>Jobs or Packages</li>
  <li>Scheduling at:
    <ul>
      <li>Specific Times</li>
      <li>Frequencies</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="SQL" /><category term="Data Warehouse" /><summary type="html"><![CDATA[In this article, I’ll summarize key takeaways from: SECTION 10. Case Study: Creating a Data Warehouse]]></summary></entry><entry><title type="html">Data Warehouse #11</title><link href="http://localhost:4000/data-warehouse-11/" rel="alternate" type="text/html" title="Data Warehouse #11" /><published>2024-01-13T00:00:00+09:00</published><updated>2024-01-13T00:00:00+09:00</updated><id>http://localhost:4000/data-warehouse-11</id><content type="html" xml:base="http://localhost:4000/data-warehouse-11/"><![CDATA[<blockquote>
  <p>In this article, I’ll summarize key takeaways from:</p>
  <ul>
    <li>SECTION 11. ETL vs. ELT</li>
  </ul>
</blockquote>

<h3 id="disclaimer">DISCLAIMER</h3>
<blockquote>
  <p>This article is a compilation of key takeaways after completing <a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Data Warehouse — The Ultimate Guide</a> on Udemy. However, it may be challenging to achieve a comprehensive and deep understanding of Data Warehouse solely through this article. For your in-depth learning, please take the course, which is an excellent resource, and I personally highly recommend it to those who are eager to master data warehousing, dimensional modeling, and the ETL process.</p>
</blockquote>

<p><img src="/assets/2023-12-19-data-warehouse-06/data-warehouse.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Source</a></p>
</blockquote>

<h1 id="what-is-elt">What is ELT?</h1>

<p><img src="/assets/2024-01-13-data-warehouse-11/1.png" alt="" /></p>

<h3 id="data-sources--data-warehouse">Data Sources → Data Warehouse</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Extract</code> + <code class="language-plaintext highlighter-rouge">Load</code>
    <ul>
      <li>Real-time ⬆️</li>
    </ul>
  </li>
</ul>

<h3 id="data-warehouse--">Data Warehouse → …</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Transform</code>
    <ul>
      <li>Leverage Database</li>
      <li>More Flexible!</li>
    </ul>
  </li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>
    <span class="n">category</span><span class="p">,</span>
    <span class="k">SUM</span><span class="p">(</span><span class="n">sales_amount</span><span class="p">)</span>
<span class="k">FROM</span>
    <span class="n">sales</span>
<span class="k">GROUP</span> <span class="k">BY</span>
    <span class="n">category</span>
</code></pre></div></div>

<h1 id="etl-vs-elt">ETL vs. ELT</h1>

<table>
  <thead>
    <tr>
      <th><strong>ETL</strong></th>
      <th><strong>ELT</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>More Stable with Defined Transformations</td>
      <td>Requires High Performing DB</td>
    </tr>
    <tr>
      <td>More Generic Use Cases</td>
      <td>More Flexible</td>
    </tr>
    <tr>
      <td>Security ⬆️</td>
      <td>Transformations can be Changed Quickly!</td>
    </tr>
    <tr>
      <td>Reporting</td>
      <td>Real-time ⬆️</td>
    </tr>
    <tr>
      <td>Easy to Use</td>
      <td>Data Science, ML</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="SQL" /><category term="Data Warehouse" /><summary type="html"><![CDATA[In this article, I’ll summarize key takeaways from: SECTION 11. ETL vs. ELT]]></summary></entry><entry><title type="html">Data Warehouse #09</title><link href="http://localhost:4000/data-warehouse-09/" rel="alternate" type="text/html" title="Data Warehouse #09" /><published>2024-01-12T00:00:00+09:00</published><updated>2024-01-12T00:00:00+09:00</updated><id>http://localhost:4000/data-warehouse-09</id><content type="html" xml:base="http://localhost:4000/data-warehouse-09/"><![CDATA[<blockquote>
  <p>In this article, I’ll summarize key takeaways from:</p>
  <ul>
    <li>SECTION 09. ETL Tools</li>
  </ul>
</blockquote>

<h3 id="disclaimer">DISCLAIMER</h3>
<blockquote>
  <p>This article is a compilation of key takeaways after completing <a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Data Warehouse — The Ultimate Guide</a> on Udemy. However, it may be challenging to achieve a comprehensive and deep understanding of Data Warehouse solely through this article. For your in-depth learning, please take the course, which is an excellent resource, and I personally highly recommend it to those who are eager to master data warehousing, dimensional modeling, and the ETL process.</p>
</blockquote>

<p><img src="/assets/2023-12-19-data-warehouse-06/data-warehouse.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Source</a></p>
</blockquote>

<h1 id="etl-tools">ETL Tools</h1>

<table>
  <thead>
    <tr>
      <th><strong>Enterprise</strong></th>
      <th><strong>Open-source</strong></th>
      <th><strong>Cloud-native</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Alteryx</td>
      <td>Talend Open Studio</td>
      <td>Azure Data Factory</td>
    </tr>
    <tr>
      <td>Informatica</td>
      <td>Pentaho Data Integration</td>
      <td>AWS Glue</td>
    </tr>
    <tr>
      <td>Oracle Data Integrator</td>
      <td>Hadoop</td>
      <td>Google Cloud Data Flow</td>
    </tr>
    <tr>
      <td>Microsoft SSIS</td>
      <td>-</td>
      <td>Stitch</td>
    </tr>
  </tbody>
</table>

<h1 id="chosing-etl-tools">Chosing ETL Tools</h1>

<h3 id="1-evaluate-current-situation--needs">1. Evaluate Current Situation &amp; Needs</h3>
<ul>
  <li>What do you want to improve?</li>
  <li>Data sources &amp; other tools?</li>
  <li>Define your requirements.</li>
  <li>Define responsibilities.</li>
  <li>Who are the users?</li>
</ul>

<h3 id="2-evaluate-tools">2. Evaluate Tools</h3>
<ul>
  <li>Cost, Connectors, Capabilities, Ease of Use, Reviews, Support, and Extras</li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="SQL" /><category term="Data Warehouse" /><summary type="html"><![CDATA[In this article, I’ll summarize key takeaways from: SECTION 09. ETL Tools]]></summary></entry><entry><title type="html">Data Warehouse #08</title><link href="http://localhost:4000/data-warehouse-08/" rel="alternate" type="text/html" title="Data Warehouse #08" /><published>2024-01-11T00:00:00+09:00</published><updated>2024-01-11T00:00:00+09:00</updated><id>http://localhost:4000/data-warehouse-08</id><content type="html" xml:base="http://localhost:4000/data-warehouse-08/"><![CDATA[<blockquote>
  <p>In this article, I’ll summarize key takeaways from:</p>
  <ul>
    <li>SECTION 08. ETL Process</li>
  </ul>
</blockquote>

<h3 id="disclaimer">DISCLAIMER</h3>
<blockquote>
  <p>This article is a compilation of key takeaways after completing <a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Data Warehouse — The Ultimate Guide</a> on Udemy. However, it may be challenging to achieve a comprehensive and deep understanding of Data Warehouse solely through this article. For your in-depth learning, please take the course, which is an excellent resource, and I personally highly recommend it to those who are eager to master data warehousing, dimensional modeling, and the ETL process.</p>
</blockquote>

<p><img src="/assets/2023-12-19-data-warehouse-06/data-warehouse.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Source</a></p>
</blockquote>

<h1 id="understanding-the-etl-process">Understanding the ETL Process</h1>

<h3 id="the-layer-of-a-data-warehouse">The Layer of a Data Warehouse</h3>

<p><img src="/assets/2024-01-11-data-warehouse-08/1.png" alt="" /></p>

<p><strong>ETL Setup</strong></p>
<ul>
  <li>1️⃣ Building Workflows
    <ul>
      <li>Staging Workflow</li>
      <li>Core Workflow</li>
      <li>Data Mart Workflow</li>
    </ul>
  </li>
  <li>2️⃣ Jobs
    <ul>
      <li>Run the Workflows</li>
      <li>Scheduled based on Defined Rules</li>
    </ul>
  </li>
</ul>

<h1 id="extracting-data-sources--staging">Extracting (Data Sources → Staging)</h1>

<p><img src="/assets/2024-01-11-data-warehouse-08/2.png" alt="" /></p>

<ul>
  <li>Transient, most commonly.
    <ul>
      <li>All the data is copied and then deleted.</li>
    </ul>
  </li>
  <li>Types of Extracting</li>
</ul>

<table>
  <thead>
    <tr>
      <th><strong>Initial Load</strong></th>
      <th><strong>Delta Load</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>First (real) Run</td>
      <td>Subsequent Runs</td>
    </tr>
    <tr>
      <td>All Data</td>
      <td>Only Additional Data</td>
    </tr>
  </tbody>
</table>

<h1 id="extracting-data-sources--staging-1️⃣-initial-load">Extracting (Data Sources → Staging): 1️⃣ Initial Load</h1>

<ul>
  <li>First Initial Extraction from Source Data</li>
  <li>Followings should be discussed:
    <ul>
      <li>What data is needed?</li>
      <li>When is a good time to load the data? (Night? Weekend?)</li>
      <li>Test with smaller extractions.</li>
      <li>All the transformation steps should have been designed. (up to Core and Data Marts)</li>
    </ul>
  </li>
</ul>

<h1 id="extracting-data-sources--staging-2️⃣-delta-load">Extracting (Data Sources → Staging): 2️⃣ Delta Load</h1>

<ul>
  <li>Incremental Periodic Extraction &amp; Load</li>
  <li><strong>Delta Column</strong>
    <ul>
      <li>Remember <code class="language-plaintext highlighter-rouge">MAX(sales_key)</code></li>
    </ul>
  </li>
</ul>

<pre><code class="language-plain">Variable X = MAX(sales_key)
Next Run: sales_key &gt; X
</code></pre>

<p><img src="/assets/2024-01-11-data-warehouse-08/3.png" alt="" /></p>

<p>What if there is no <strong>Delta Column</strong>?</p>
<ul>
  <li>Some tools can capture automatically which data has already been loaded.</li>
  <li>Just full-load every time and compare the data with data that is already loaded.</li>
  <li>Depending on the data volume → Performance Issue!</li>
</ul>

<h1 id="loading-staging--core-insert--update">Loading (Staging → Core): INSERT &amp; UPDATE</h1>

<p><img src="/assets/2024-01-11-data-warehouse-08/4.png" alt="" /></p>

<ul>
  <li><strong>INSERT or APPEND</strong>
    <ul>
      <li>add new values</li>
    </ul>
  </li>
  <li><strong>UPDATE</strong>
    <ul>
      <li>change the existing values</li>
    </ul>
  </li>
  <li><strong>DELETE</strong>?
    <ul>
      <li>typically, we don’t delete data.</li>
    </ul>
  </li>
</ul>

<h1 id="demo-extracting-data-sources--staging">[DEMO] Extracting (Data Sources → Staging)</h1>

<h3 id="create-table">Create Table</h3>

<p><img src="/assets/2024-01-11-data-warehouse-08/5.png" alt="" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">dim_products</code> in Staging Layer</li>
</ul>

<table>
  <thead>
    <tr>
      <th><strong>column</strong></th>
      <th><strong>type</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">product_PK</code></td>
      <td>Surrogate Key</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">product_id</code></td>
      <td>Natural Key</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">product_name</code></td>
      <td> </td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">category</code></td>
      <td> </td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">subcategory</code></td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h3 id="initial-load">Initial Load</h3>

<p><img src="/assets/2024-01-11-data-warehouse-08/6.png" alt="" /></p>

<ul>
  <li>Table input
    <ul>
      <li>from <code class="language-plaintext highlighter-rouge">products</code> in Source</li>
    </ul>
  </li>
  <li>Table output
    <ul>
      <li>to <code class="language-plaintext highlighter-rouge">dim_products</code> in Staging Layer</li>
    </ul>
  </li>
</ul>

<h3 id="delta-load">Delta Load</h3>

<p><img src="/assets/2024-01-11-data-warehouse-08/7.png" alt="" /></p>

<ul>
  <li>Table input
    <ul>
      <li>from <code class="language-plaintext highlighter-rouge">dim_products</code> in Staging Layer</li>
      <li><code class="language-plaintext highlighter-rouge">SELECT MAX(product_id) FROM "Staging".dim_products</code></li>
    </ul>
  </li>
  <li>Set variables
    <ul>
      <li>Save As <code class="language-plaintext highlighter-rouge">LastLoad</code></li>
    </ul>
  </li>
  <li>Get variables
    <ul>
      <li><code class="language-plaintext highlighter-rouge">${LastLoad}</code></li>
    </ul>
  </li>
  <li>Table input
    <ul>
      <li>from <code class="language-plaintext highlighter-rouge">products</code> in Source</li>
      <li><code class="language-plaintext highlighter-rouge">SELECT * FROM "public".products WHERE product_id &gt; ${LastLoad}</code></li>
    </ul>
  </li>
  <li>Table output
    <ul>
      <li>to <code class="language-plaintext highlighter-rouge">dim_products</code> in Staging Layer</li>
    </ul>
  </li>
</ul>

<h1 id="transformations">Transformations</h1>

<h3 id="basic">Basic</h3>

<ul>
  <li>
    <p>Deduplication
<img src="/assets/2024-01-11-data-warehouse-08/8.png" alt="" /></p>
  </li>
  <li>
    <p>Filtering Rows
<img src="/assets/2024-01-11-data-warehouse-08/9.png" alt="" /></p>
  </li>
  <li>
    <p>Filtering Columns
<img src="/assets/2024-01-11-data-warehouse-08/10.png" alt="" /></p>
  </li>
  <li>
    <p>Cleaning &amp; Mapping
<img src="/assets/2024-01-11-data-warehouse-08/11.png" alt="" /></p>
  </li>
  <li>
    <p>Value Standardization
<img src="/assets/2024-01-11-data-warehouse-08/12.png" alt="" /></p>
  </li>
  <li>
    <p>Key Generation
<img src="/assets/2024-01-11-data-warehouse-08/13.png" alt="" /></p>
  </li>
</ul>

<h3 id="advanced">Advanced</h3>

<ul>
  <li>
    <p>Joining
<img src="/assets/2024-01-11-data-warehouse-08/14.png" alt="" /></p>
  </li>
  <li>
    <p>Splitting
<img src="/assets/2024-01-11-data-warehouse-08/15.png" alt="" /></p>
  </li>
  <li>Aggregating
    <ul>
      <li><code class="language-plaintext highlighter-rouge">SUM</code>, <code class="language-plaintext highlighter-rouge">COUNT</code>, <code class="language-plaintext highlighter-rouge">DISTINCT COUNT</code>, <code class="language-plaintext highlighter-rouge">AVERAGE</code>
<img src="/assets/2024-01-11-data-warehouse-08/16.png" alt="" /></li>
    </ul>
  </li>
  <li>Deriving New Values
<img src="/assets/2024-01-11-data-warehouse-08/17.png" alt="" /></li>
</ul>

<h1 id="summary">Summary</h1>

<p><img src="/assets/2024-01-11-data-warehouse-08/18.png" alt="" /></p>

<ul>
  <li><strong>Extract</strong>: Source → Staging
    <ul>
      <li>Add Surrogate Key</li>
      <li>Delta Logic</li>
    </ul>
  </li>
  <li><strong>Transform + Load</strong>: Staging → Core
    <ul>
      <li>Clean Data</li>
      <li>Add Additional Columns</li>
    </ul>
  </li>
</ul>

<h1 id="scheduling">Scheduling</h1>

<h3 id="can-be-done-either">Can be done either:</h3>

<ul>
  <li>directly from the ETL Tool,</li>
  <li>or using External Tool
    <ul>
      <li>e.g., Windows Task Scheduler, Server, etc.</li>
    </ul>
  </li>
</ul>

<h3 id="guidelines">Guidelines</h3>

<ul>
  <li>What are the requirements?
    <ul>
      <li>3 times a day?</li>
      <li>1 time a day?</li>
      <li>Every 30 mins?</li>
    </ul>
  </li>
  <li>How long does it take?
    <ul>
      <li>5 mins?</li>
      <li>1 hour?</li>
    </ul>
  </li>
  <li>What is a good time?
    <ul>
      <li>Initial Load vs. Delta Load</li>
      <li>Effect on the Productive System</li>
      <li>Short Read Access</li>
      <li>Night? Morning?</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="SQL" /><category term="Data Warehouse" /><summary type="html"><![CDATA[In this article, I’ll summarize key takeaways from: SECTION 08. ETL Process]]></summary></entry><entry><title type="html">Data Warehouse #07</title><link href="http://localhost:4000/data-warehouse-07/" rel="alternate" type="text/html" title="Data Warehouse #07" /><published>2024-01-02T00:00:00+09:00</published><updated>2024-01-02T00:00:00+09:00</updated><id>http://localhost:4000/data-warehouse-07</id><content type="html" xml:base="http://localhost:4000/data-warehouse-07/"><![CDATA[<blockquote>
  <p>In this article, I’ll summarize key takeaways from:</p>
  <ul>
    <li>SECTION 07. Slowly Changing Dimensions</li>
  </ul>
</blockquote>

<h3 id="disclaimer">DISCLAIMER</h3>
<blockquote>
  <p>This article is a compilation of key takeaways after completing <a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Data Warehouse — The Ultimate Guide</a> on Udemy. However, it may be challenging to achieve a comprehensive and deep understanding of Data Warehouse solely through this article. For your in-depth learning, please take the course, which is an excellent resource, and I personally highly recommend it to those who are eager to master data warehousing, dimensional modeling, and the ETL process.</p>
</blockquote>

<p><img src="/assets/2023-12-19-data-warehouse-06/data-warehouse.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Source</a></p>
</blockquote>

<h1 id="slowly-changing-dimensions">Slowly Changing Dimensions</h1>

<p>Dimensions are rather static than Facts, but they do change in the real world.</p>

<p>Types of Slowly Changing Dimensions (SCDs)</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Type 0</code>: Retain Original</li>
  <li><code class="language-plaintext highlighter-rouge">Type 1</code>: Overwrite</li>
  <li><code class="language-plaintext highlighter-rouge">Type 2</code>: New Row
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Type 2'</code>: Administrative New Row</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Type 3</code>: Additional Attributes</li>
</ul>

<h1 id="type-0-retain-original">Type 0: Retain Original</h1>
<ul>
  <li>No changes at all.</li>
  <li>Very simple and easy to maintain.</li>
  <li><code class="language-plaintext highlighter-rouge">Dates Table</code> is a great example.</li>
</ul>

<h1 id="type-1-overwrite">Type 1: Overwrite</h1>

<p><img src="/assets/2024-01-02-data-warehouse-07/overwrite.png" alt="" /></p>

<ul>
  <li>Old attributes are just <strong>Overwritten</strong>.</li>
  <li>Only the <strong>Current State</strong> is reflected.</li>
  <li>👍 <strong>Advantages</strong>
    <ul>
      <li>Very simple</li>
      <li>Facts don’t need to be modified.</li>
    </ul>
  </li>
  <li>👎 <strong>Disadvantages</strong>
    <ul>
      <li>History is lost.</li>
      <li>Insignificant Changes ➡️ Do not affect existing queries.
        <ul>
          <li>i.e., product name</li>
        </ul>
      </li>
      <li>Significant Changes ➡️ Affect or break existing queries.
        <ul>
          <li>i.e., category</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="type-2-new-row">Type 2: New Row</h1>

<p><img src="/assets/2024-01-02-data-warehouse-07/new-row.png" alt="" /></p>

<ul>
  <li>Perfectly partitions <strong>history</strong>.</li>
  <li>Changes are reflected in <strong>history</strong>.</li>
  <li>👎 <strong>Disadvantages</strong>
    <ul>
      <li>Difficult to calculate the total number of products in the current view.</li>
    </ul>
  </li>
</ul>

<h1 id="type-2-administrative-new-row">Type 2’: Administrative New Row</h1>

<p><img src="/assets/2024-01-02-data-warehouse-07/administrative-new-row.png" alt="" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">effective_date</code> &amp; <code class="language-plaintext highlighter-rouge">expiration_date</code>
    <ul>
      <li>The period in which values are valid.</li>
      <li><code class="language-plaintext highlighter-rouge">expiration_date</code>
        <ul>
          <li>Avoid <strong>Null</strong> values, and fill in a date far in the future instead.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Requires <strong>Surrogate Key</strong> instead of <strong>Natural Key</strong>.</li>
  <li>Lookup from the Query
    <ul>
      <li>Step 1) Find the Natural Key. (<code class="language-plaintext highlighter-rouge">product_PK</code>)</li>
      <li>Step 2) Then, find the Valid Period. (<code class="language-plaintext highlighter-rouge">effective_date</code> &amp; <code class="language-plaintext highlighter-rouge">expiration_date</code>)</li>
      <li>Step 3) <code class="language-plaintext highlighter-rouge">is_current</code> column is optional.</li>
    </ul>
  </li>
</ul>

<h1 id="type-3-additional-attributes">Type 3: Additional Attributes</h1>

<p><img src="/assets/2024-01-02-data-warehouse-07/additional-attributes.png" alt="" /></p>

<ul>
  <li>Instead of adding a row, we <strong>add a column</strong>.</li>
  <li>Enables to switch between historical &amp; current views.</li>
  <li>It’s typically used for significant changes at a time.
    <ul>
      <li>i.e., Restructuring in an organization</li>
    </ul>
  </li>
  <li>👎 <strong>Disadvantages</strong>
    <ul>
      <li>Minor Changes ➡️ Type 1 is better.</li>
      <li>Frequent or Unpredictable Changes ➡️ Type 2 is better.</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="SQL" /><category term="Data Warehouse" /><summary type="html"><![CDATA[In this article, I’ll summarize key takeaways from: SECTION 07. Slowly Changing Dimensions]]></summary></entry><entry><title type="html">데이터 분석가의 SQL 최적화 일기: 코호트 리텐션 Batch Query 만들기</title><link href="http://localhost:4000/retention-batch-query/" rel="alternate" type="text/html" title="데이터 분석가의 SQL 최적화 일기: 코호트 리텐션 Batch Query 만들기" /><published>2024-01-01T00:00:00+09:00</published><updated>2024-01-01T00:00:00+09:00</updated><id>http://localhost:4000/retention-batch-query</id><content type="html" xml:base="http://localhost:4000/retention-batch-query/"><![CDATA[<blockquote>
  <p>코호트 리텐션의 의미와 중요성에 대해 말씀드리고, Batch Query를 사용하여 회원가입 월 코호트 별로 Monthly Range Retention을 계산하는 방법을 제시해드릴게요.</p>
</blockquote>

<h3 id="contents">CONTENTS</h3>
<ol>
  <li>코호트 리텐션의 의미와 중요성
    <ul>
      <li>1.1. 리텐션</li>
      <li>1.2. 코호트</li>
      <li>1.3. 코호트 리텐션</li>
      <li>1.4. 코호트 리텐션의 중요성</li>
    </ul>
  </li>
  <li>쿼리 작업 목표</li>
  <li>일회성 쿼리문
    <ul>
      <li>3.1. 쿼리문 보기</li>
      <li>3.2. 문제점</li>
    </ul>
  </li>
  <li>해결 아이디어</li>
  <li>Batch Query를 통해 접근하기</li>
  <li>결론</li>
</ol>

<hr />

<h3 id="disclaimer">DISCLAIMER</h3>
<p>본 아티클은 필자의 전/현 재직 기업의 데이터 분석 현황과 관련이 없으며, 단지 평소에 문제 의식을 지녔던 점에 대한 해결 방법을 스스로 도출해본 내용입니다. 쿼리문 작성에 다른 외부 레퍼런스를 참고하지 않았으며, 분석 환경에 따라 본 내용이 적합하지 않을 수 있으므로 반드시 비판적 고찰을 해주시면 감사드리겠습니다.</p>

<h1 id="1-코호트-리텐션의-의미와-중요성">1. 코호트 리텐션의 의미와 중요성</h1>

<h3 id="11-리텐션">1.1. 리텐션</h3>

<p>먼저, 리텐션은 “시간이 흐름에 따라 얼마나 많은 사용자들이 우리 프로덕트에 재참여하는지”를 나타내는 지표입니다. 이미 많은 분들이 아시듯 리텐션은 PMF를 달성하기 위해 분석해야 할 중요한 지표입니다. 이 정의가 꽤나 간단해보이지만, 측정하는 과정에서 실상은 그렇지 않습니다. “재참여”를 “재”와 “참여”로 나누어 각각의 사전 정의가 이루어져야 하기 때문입니다.</p>

<p><strong>“참여” 개념 정의하기</strong></p>

<p>사용자가 우리 프로덕트에 “참여”한다는 것이 정확히 어떤 순간인지 정의해야 합니다. 예를 들어, 접속, 30초 이상 세션 유지, 특정 퍼널 단계 도달 등 여러 이벤트 중 하나가 “참여”로 간주될 수 있습니다. 저는 개인적으로 아래 3가지 측면 정의를 모두 사전에 준비하여 Target Metric에 따라 적시적소에 모니터링하는 것이 필요하다고 느꼈습니다.</p>

<p>(1) “접속”을 하는 것만으로 참여한 것으로 간주하자!</p>
<ul>
  <li>DAU, WAU, MAU, Stickiness 등의 지표와 직접적으로 연관된 정의 방법이며, 광고 노출 효과를 극대화하는 경우 유용합니다.</li>
</ul>

<p>(2) “구매”까지 해야 참여한 것으로 간주하자!</p>
<ul>
  <li>재구매율 등의 지표와 직접적으로 연관된 정의 방법이며, Recurring Revenue가 중요한 프로덕트에서 중요합니다.</li>
</ul>

<p>(3) “아하 모먼트”에 도달해야 참여한 것으로 간주하자!</p>
<ul>
  <li><a href="https://www.youtube.com/watch?v=0KgOCKJ1PG4">토스의 이승건 대표님에 따르면</a>, 아하 모먼트란 프로덕트의 핵심 가치의 경험하는 순간을 의미합니다.</li>
  <li>X, Y, Z의 조합으로 이루어진 여러 가지 “X 이벤트를 Y 기간 내에 Z번 수행한다” 중 리텐션이 극명하게 높은(가령, 95%) 항목을 사전에 발견하여, 빠르게 PMF를 달성해야 할 때 유용합니다.</li>
</ul>

<p><strong>“재” 개념 정의하기</strong></p>

<p>사용자가 복귀했다는 것을 어떻게 계산할 것인가에 대한 정의가 필요합니다. <a href="https://product.kyobobook.co.kr/detail/S000001766457">양승화님의 그로스해킹에 따르면</a>, Classic Retention, Range Retention, Rolling Retention 중 프로덕트의 특성에 따라 적절한 방법을 선택할 수 있습니다.</p>

<p>(1) Classic Retention: 사용자가 최초로 “참여”한 Day 0 이후, 각 Day N 별로 한 번 더 “참여”했는지 계산합니다.</p>

<p>(2) Range Retention: Day N이 아니라 Week N, Bi-week N, Month N 별로 한 번 더 “참여”했는지 계산합니다.</p>

<p>(3) Rolling Retention: Day N 이후에 한 번이라도 “참여”한 경우를 계산합니다. (이탈률의 반대 개념)</p>

<p><strong>이러한 정의와 측정 방법을 통해 효과적인 리텐션 지표 측정이 가능해질 것입니다.</strong></p>

<h3 id="12-코호트">1.2. 코호트</h3>

<p>코호트의 개념을 두 가지로 혼용하는 경향이 있습니다.</p>
<ol>
  <li><em>“코호트는 세그먼트다. 즉, 사용자가 지닌 여러 가지 Feature 조합을 통해 그룹화된 클러스터다.”</em></li>
  <li><em>“코호트는 세그먼트의 일부로서, 특정 이벤트의 최초 수행일시를 기준으로 그룹화된 클러스터다.” (최초 프로덕트 방문일, 회원가입일, 최초 결제일 등)</em></li>
</ol>

<p>개인적으로는 세그먼트와의 혼동을 줄이기 위해 2번의 개념을 선호하지만, 코호트를 융통성 있게 설정하기 위해 1번 개념에서 언급한 다른 Feature 조합도 선택적으로 추가할 수 있는 “열린 개념”으로 받아들이고 있습니다.</p>

<ul>
  <li>예시 1) 사용자를 최초 프로덕트 방문일 기준으로 그룹화한다. → 코호트 O</li>
  <li>예시 2) 사용자를 최초 접속 국가 기준으로 그룹화한다. → 코호트 X</li>
  <li>예시 3) 사용자를 최초 프로덕트 방문일 및 접속 국가 기준으로 그룹화한다. → 코호트 O</li>
</ul>

<p>이렇게 하면 특정 이벤트의 최초 수행일시를 중심으로 하면서도 다양한 특성을 고려할 수 있어서 코호트를 보다 유연하게 활용할 수 있을 것입니다.</p>

<h3 id="13-코호트-리텐션">1.3. 코호트 리텐션</h3>

<p>코호트 리텐션이란, 기존의 리텐션 개념을 코호트에 따라 시리즈를 달리하여 계산한 지표를 의미합니다. 예를 들면, 최초 프로덕트 방문일을 기준으로 사용자들의 리텐션이 상승 추세인지, 혹은 하락 추세인지를 알 수 있는 것이죠.</p>

<h3 id="14-코호트-리텐션의-중요성">1.4. 코호트 리텐션의 중요성</h3>

<p>아래의 리텐션 지표를 통해 PMF 달성 여부를 확인할 수 있지만, 문제를 파악하거나 액션 포인트를 도출하는 데는 그다지 도움이 되지 않습니다.</p>

<p><img src="/assets/2024-01-01-retention-batch-query/retention.webp" alt="" /></p>
<blockquote>
  <p><a href="https://mermaid.js.org/syntax/xyChart.html">mermaid</a>를 통해 필자가 직접 작성</p>
</blockquote>

<p>그러나 코호트 리텐션 값을 확인할 수 있다면, 프로덕트의 기능 업데이트나 캠페인 론칭 등에 따른 사후 효과를 확인하고, 리텐션 향상을 위해 우리가 어떤 액션에 좀 더 집중해야 하는지 확인하는 데 도움을 줄 수 있습니다.</p>

<p><img src="/assets/2024-01-01-retention-batch-query/cohort-retention.webp" alt="" /></p>
<blockquote>
  <p><a href="https://mermaid.js.org/syntax/xyChart.html">mermaid</a>를 통해 필자가 직접 작성</p>
</blockquote>

<h1 id="2-쿼리-작업-목표">2. 쿼리 작업 목표</h1>

<p>쿼리 작업 목표는 다음과 같습니다. 아래와 같은 테이블을 대시보드에 반영해보고자 합니다. 즉, 회원가입 연월(YYYY-MM) 코호트별 리텐션(Monthly Range)테이블을 배포하여 다양한 이해당사자 분들이 리텐션 지표의 시계열 추이를 확인하시는 데 도움을 드리려는 것입니다.</p>

<p><img src="/assets/2024-01-01-retention-batch-query/task-goal.webp" alt="" /></p>
<blockquote>
  <p>제가 직접 샘플로 만들어본 위 테이블에서는 시간이 흐를수록 리텐션이 향상되는 추이를 보여주고 있군요.</p>
</blockquote>

<p>그런데, 위와 같은 테이블을 만들기 위해서는 SQL의 최후 출력 상태가 다음과 같은 Unpivoted한 형태가 되어야 합니다. 물론 Pivoted한 형태로 직접 출력하는 방법도 있지만, 오늘의 토픽인 “Batch Query 만들기”를 위해서는 Unpivoted한 형태가 되어야 합니다. Table을 Update를 방지하고, 오로지 Insert 작업만 수행함으로써 연산 부하를 방지하기 위함인데요. 지금부터 차차 읽어가시면 이해가 되실 겁니다.</p>

<p><img src="/assets/2024-01-01-retention-batch-query/last-query-results.webp" alt="" /></p>
<blockquote>
  <p>필자가 직접 작성</p>
</blockquote>

<h1 id="3-일회성-쿼리문">3. 일회성 쿼리문</h1>

<h3 id="31-쿼리문-보기">3.1. 쿼리문 보기</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">WITH</span>

<span class="c1">-- 1. 사용자들의 "참여" (회원가입 및 로그인 이벤트) 소스 테이블을 불러온다.</span>
<span class="n">CTE_engagements</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
        <span class="n">user_id</span><span class="p">,</span>
        <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'DAY'</span><span class="p">,</span> <span class="nb">datetime</span><span class="p">)</span> <span class="k">AS</span> <span class="nb">date</span>
    <span class="k">FROM</span>
        <span class="n">signups_logins</span>
    <span class="k">GROUP</span> <span class="k">BY</span>
        <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
<span class="p">),</span>

<span class="c1">-- 2. 사용자들을 회원가입일 기준의 코호트로 Labeling해준다.</span>
<span class="n">CTE_cohorts</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
        <span class="n">user_id</span><span class="p">,</span>
        <span class="k">MIN</span><span class="p">(</span><span class="nb">date</span><span class="p">)</span> <span class="k">AS</span> <span class="n">cohort_date</span>
    <span class="k">FROM</span>
        <span class="n">CTE_engagements</span>
    <span class="k">GROUP</span> <span class="k">BY</span>
        <span class="mi">1</span>
<span class="p">),</span>

<span class="c1">-- 3. 사용자들의 "참여" 테이블과 "코호트 Labeling" 테이블을 조인하여 "Day N"도 함께 표시해준다.</span>
<span class="n">CTE_engagements_with_cohorts_daily</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
        <span class="n">ENG</span><span class="p">.</span><span class="n">user_id</span><span class="p">,</span>
        <span class="n">ENG</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span>
        <span class="n">COH</span><span class="p">.</span><span class="n">cohort_date</span><span class="p">,</span>
        <span class="n">DATE_DIFF</span><span class="p">(</span>
            <span class="n">ENG</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span>
            <span class="n">COH</span><span class="p">.</span><span class="n">cohort_date</span><span class="p">,</span>
            <span class="k">DAY</span>
        <span class="p">)</span> <span class="k">AS</span> <span class="n">day_n</span>
    <span class="k">FROM</span>
        <span class="n">CTE_engagements</span> <span class="n">ENG</span>
    <span class="k">LEFT</span> <span class="k">JOIN</span>
        <span class="n">CTE_cohorts</span> <span class="n">COH</span>
        <span class="k">USING</span> <span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
<span class="p">),</span>

<span class="c1">-- 4. "Day N"을 "Month N"으로 변환해준다.</span>
<span class="n">CTE_engagements_with_cohorts_monthly</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
        <span class="n">user_id</span><span class="p">,</span>
        <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="nb">date</span><span class="p">)</span> <span class="k">AS</span> <span class="n">yyyymm</span><span class="p">,</span>
        <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="n">cohort_date</span><span class="p">)</span> <span class="k">AS</span> <span class="n">cohort_yyyymm</span><span class="p">,</span>
        <span class="n">DATE_DIFF</span><span class="p">(</span>
            <span class="nb">date</span><span class="p">,</span>
            <span class="n">cohort_date</span><span class="p">,</span>
            <span class="k">MONTH</span>
        <span class="p">)</span> <span class="k">AS</span> <span class="n">month_n</span>
    <span class="k">FROM</span>
        <span class="n">CTE_engagements_with_cohorts_daily</span>
<span class="p">),</span>

<span class="c1">-- 5. 코호트 및 "Month N" 기준으로 사용자 수를 집계한다.</span>
<span class="n">CTE_month_n_cnt</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
        <span class="n">cohort_yyyymm</span><span class="p">,</span>
        <span class="n">month_n</span><span class="p">,</span>
        <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">users_cnt</span>
    <span class="k">FROM</span>
        <span class="n">CTE_engagements_with_cohorts_monthly</span>
    <span class="k">GROUP</span> <span class="k">BY</span>
        <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
<span class="p">),</span>

<span class="c1">-- 6. 최종 리텐션을 계산한다.</span>
<span class="n">CTE_monthly_retention</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
        <span class="n">cohort_yyyymm</span><span class="p">,</span>
        <span class="n">month_n</span><span class="p">,</span>
        <span class="k">CAST</span><span class="p">(</span><span class="n">users_cnt</span> <span class="k">AS</span> <span class="nb">DOUBLE</span><span class="p">)</span>
        <span class="o">/</span>
        <span class="k">CAST</span><span class="p">(</span><span class="n">FIRST_VALUE</span><span class="p">(</span><span class="n">users_cnt</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span>
            <span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">cohort_yyyymm</span>
            <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">month_n</span>
            <span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="n">UNBOUNDED</span> <span class="k">PRECEDING</span> <span class="k">AND</span> <span class="n">UNBOUNDED</span> <span class="k">FOLLOWING</span>
            <span class="p">)</span> <span class="k">AS</span> <span class="nb">DOUBLE</span>
        <span class="p">)</span> <span class="k">AS</span> <span class="n">monthly_retention</span>
    <span class="k">FROM</span>
        <span class="n">CTE_month_n_cnt</span>
    <span class="k">ORDER</span> <span class="k">BY</span>
        <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
<span class="p">)</span>
<span class="k">SELECT</span>
    <span class="o">*</span>
<span class="k">FROM</span>
    <span class="n">CTE_monthly_retention</span>
<span class="p">;</span>
</code></pre></div></div>

<h3 id="32-문제점">3.2. 문제점</h3>

<p>위 쿼리문의 출력 결과는 앞서 잠깐 보여드린 아래와 같은 형태의 테이블을 출력합니다. 그런데, 매번 전체 소스 테이블을 메모리에 올려 리텐션을 계산하려면 연산량이 과도하게 많이 들어 리소스 낭비로 이어지게 됩니다.</p>

<p><img src="/assets/2024-01-01-retention-batch-query/last-query-results.webp" alt="" /></p>
<blockquote>
  <p>필자가 직접 작성</p>
</blockquote>

<h1 id="4-해결-아이디어">4. 해결 아이디어</h1>

<p>마침, Cohort 칼럼과 Month 칼럼이 시계열 형식을 지니고 있으므로 미래의 데이터가 과거의 데이터에 영향을 끼칠 수 없습니다. 또한, 출력된 테이블은  <a href="https://www.kimballgroup.com/data-warehouse-business-intelligence-resources/kimball-techniques/dimensional-modeling-techniques/periodic-snapshot-fact-table/">Periodic Snapshot Fact Table</a>의 유형에 해당합니다. 바로 이 점으로부터 우리는 Batch Query를 활용할 수 있는 여지를 발견할 수 있습니다. 즉, 아래와 같이 매월 1일 00:01 UTC마다 새롭게 획득한 리텐션 값들을 Insert할 수 있는 Batch Query를 작성할 수 있는 것입니다. 특히 이벤트 로그 데이터의 크기가 매우 큰 프로덕트를 운영하고 있다면, 굳이 매번 일회성 쿼리문을 실행할 필요가 없는 셈이죠.</p>

<p><img src="/assets/2024-01-01-retention-batch-query/idea.webp" alt="" /></p>
<blockquote>
  <p>즉, 매월 초마다 좌측 테이블의 빨간색 영역들을 순차적으로 신규 계산하여 테이블 Insert 스케줄링을 구현할 수 있는 것이죠. (필자가 직접 작성)</p>
</blockquote>

<h1 id="5-batch-query를-통해-접근하기">5. Batch Query를 통해 접근하기</h1>

<p><strong>STEP 1) 사용자들의 “참여” 소스 테이블을 불러온다. (단, 현재 시점 기준으로 7개월 전의 월초부터 1개월 전의 월말까지 항목만)</strong></p>

<p><img src="/assets/2024-01-01-retention-batch-query/step1.webp" alt="" /></p>
<blockquote>
  <p>필자가 직접 작성</p>
</blockquote>

<ul>
  <li>로그인했을 때 사용자가 “참여”했다고 가정 하에, 로그인 이벤트를 불러온다.</li>
  <li>코호트는 “회원가입” 기준으로 정의할 것이므로, 회원가입 이벤트도 함께 불러온다.</li>
  <li>Monthly Range Retention은 Month 0부터 Month 6까지만 계산한다.</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">WITH</span>  
  
<span class="c1">-- 1. 사용자들의 "참여" (회원가입 및 로그인 이벤트) 소스 테이블을 불러온다.  </span>
<span class="c1">-- (단, 현재 시점 기준으로 7개월 전의 월초부터 1개월 전의 월말까지 항목만)  </span>
<span class="n">CTE_engagements</span> <span class="k">AS</span> <span class="p">(</span>  
    <span class="k">SELECT</span>  
        <span class="n">user_id</span><span class="p">,</span>  
        <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'DAY'</span><span class="p">,</span> <span class="nb">datetime</span><span class="p">)</span> <span class="k">AS</span>  <span class="nb">date</span>  
    <span class="k">FROM</span>
        <span class="k">source</span><span class="p">.</span><span class="n">signups_logins</span>
    <span class="nv">"if is_incremental()"</span>
    <span class="k">WHERE</span>  
        <span class="c1">-- 현재 시점 기준으로 7개월 전의 월초부터 ~  </span>
        <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'7'</span> <span class="k">MONTH</span>  
        <span class="o">&lt;=</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'DAY'</span><span class="p">,</span> <span class="nb">datetime</span><span class="p">)</span>  
        <span class="c1">-- ~ 현재 시점 기준으로 1개월 전의 월말까지  </span>
        <span class="k">AND</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'DAY'</span><span class="p">,</span> <span class="nb">datetime</span><span class="p">)</span>  
        <span class="o">&lt;=</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'1'</span> <span class="k">DAY</span>  
    <span class="nv">"endif"</span>
    <span class="k">GROUP</span> <span class="k">BY</span>  
        <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>  
<span class="p">),</span>
</code></pre></div></div>

<p><strong>STEP 2) 사용자들을 회원가입일 기준의 코호트로 Labeling해준다.</strong></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 2. 사용자들을 회원가입일 기준의 코호트로 Labeling해준다.  </span>
<span class="n">CTE_cohorts</span> <span class="k">AS</span> <span class="p">(</span>  
    <span class="k">SELECT</span>  
        <span class="n">user_id</span><span class="p">,</span>  
        <span class="k">MIN</span><span class="p">(</span><span class="nb">date</span><span class="p">)</span> <span class="k">AS</span> <span class="n">cohort_date</span>  
    <span class="k">FROM</span>  
        <span class="n">CTE_engagements</span>  
    <span class="k">GROUP</span> <span class="k">BY</span>  
        <span class="mi">1</span>  
<span class="p">),</span>
</code></pre></div></div>

<p><strong>STEP 3) 사용자들의 “참여” 테이블과 “코호트 Labeling” 테이블을 조인하여 “Day N”도 함께 표시해준다.</strong></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 3. 사용자들의 "참여" 테이블과 "코호트 Labeling" 테이블을 조인하여 "Day N"도 함께 표시해준다.  </span>
<span class="n">CTE_engagements_with_cohorts_daily</span> <span class="k">AS</span> <span class="p">(</span>  
    <span class="k">SELECT</span>  
        <span class="n">ENG</span><span class="p">.</span><span class="n">user_id</span><span class="p">,</span>  
        <span class="n">ENG</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span>  
        <span class="n">COH</span><span class="p">.</span><span class="n">cohort_date</span><span class="p">,</span>  
        <span class="n">DATE_DIFF</span><span class="p">(</span>  
            <span class="n">ENG</span><span class="p">.</span><span class="nb">date</span><span class="p">,</span>  
            <span class="n">COH</span><span class="p">.</span><span class="n">cohort_date</span><span class="p">,</span>  
            <span class="k">DAY</span>  
        <span class="p">)</span> <span class="k">AS</span> <span class="n">day_n</span>  
    <span class="k">FROM</span>  
        <span class="n">CTE_engagements</span> <span class="n">ENG</span>  
    <span class="k">LEFT</span> <span class="k">JOIN</span>  
        <span class="n">CTE_cohorts</span> <span class="n">COH</span>  
        <span class="k">USING</span> <span class="p">(</span><span class="n">user_id</span><span class="p">)</span>  
<span class="p">),</span>
</code></pre></div></div>

<p><strong>STEP 4) “Day N”을 “Month N”으로 변환해준다.</strong></p>
<ul>
  <li>Monthly Range Retention을 계산해야 하기 때문이다.</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 4. "Day N"을 "Month N"으로 변환해준다.  </span>
<span class="n">CTE_engagements_with_cohorts_monthly</span> <span class="k">AS</span> <span class="p">(</span>  
    <span class="k">SELECT</span>  
        <span class="n">user_id</span><span class="p">,</span>  
        <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="nb">date</span><span class="p">)</span> <span class="k">AS</span> <span class="n">yyyymm</span><span class="p">,</span>  
        <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="n">cohort_date</span><span class="p">)</span> <span class="k">AS</span> <span class="n">cohort_yyyymm</span><span class="p">,</span>  
        <span class="n">DATE_DIFF</span><span class="p">(</span>  
            <span class="nb">date</span><span class="p">,</span>  
            <span class="n">cohort_date</span><span class="p">,</span>  
            <span class="k">MONTH</span>  
        <span class="p">)</span> <span class="k">AS</span> <span class="n">month_n</span>  
    <span class="k">FROM</span>  
        <span class="n">CTE_engagements_with_cohorts_daily</span>  
<span class="p">),</span>
</code></pre></div></div>

<p><strong>STEP 5) 코호트 및 “Month N” 기준으로 사용자 수를 집계한다.</strong></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 5. 코호트 및 "Month N" 기준으로 사용자 수를 집계한다.  </span>
<span class="n">CTE_month_n_cnt</span> <span class="k">AS</span> <span class="p">(</span>  
    <span class="k">SELECT</span>  
        <span class="n">cohort_yyyymm</span><span class="p">,</span>  
        <span class="n">month_n</span><span class="p">,</span>  
        <span class="k">COUNT</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">user_id</span><span class="p">)</span> <span class="k">AS</span> <span class="n">users_cnt</span>  
    <span class="k">FROM</span>  
        <span class="n">CTE_engagements_with_cohorts_monthly</span>  
    <span class="k">GROUP</span> <span class="k">BY</span>  
        <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>  
<span class="p">),</span>
</code></pre></div></div>

<p><strong>STEP 6) 최종 리텐션을 계산한다.</strong></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 6. 최종 리텐션을 계산한다.  </span>
<span class="n">CTE_monthly_retention</span> <span class="k">AS</span> <span class="p">(</span>  
    <span class="k">SELECT</span>  
        <span class="n">cohort_yyyymm</span><span class="p">,</span>  
        <span class="n">month_n</span><span class="p">,</span>  
        <span class="k">CAST</span><span class="p">(</span><span class="n">users_cnt</span> <span class="k">AS</span> <span class="nb">DOUBLE</span><span class="p">)</span>  
        <span class="o">/</span>  
        <span class="k">CAST</span><span class="p">(</span><span class="n">FIRST_VALUE</span><span class="p">(</span><span class="n">users_cnt</span><span class="p">)</span> <span class="n">OVER</span> <span class="p">(</span>  
            <span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">cohort_yyyymm</span>  
            <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">month_n</span>  
            <span class="k">ROWS</span> <span class="k">BETWEEN</span> <span class="n">UNBOUNDED</span> <span class="k">PRECEDING</span> <span class="k">AND</span> <span class="n">UNBOUNDED</span> <span class="k">FOLLOWING</span>  
        <span class="p">)</span>  
        <span class="k">AS</span> <span class="n">monthly_retention</span>  
    <span class="k">FROM</span>  
        <span class="n">CTE_month_n_cnt</span>  
    <span class="k">ORDER</span> <span class="k">BY</span>  
        <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>  
<span class="p">)</span>
</code></pre></div></div>

<p><strong>STEP 7) 중복되지 않은 신규 항목들만 Insert할 수 있도록 조건화한다.</strong></p>

<p><img src="/assets/2024-01-01-retention-batch-query/step7.webp" alt="" /></p>
<blockquote>
  <p>필자가 직접 작성</p>
</blockquote>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 7. 중복되지 않은 신규 항목들만 Insert할 수 있도록 조건화한다.  </span>
<span class="n">CTE_monthly_retention_inserted</span> <span class="k">AS</span> <span class="p">(</span>  
    <span class="k">SELECT</span>  
        <span class="o">*</span>  
    <span class="k">FROM</span>  
        <span class="n">CTE_monthly_retention</span>  
    <span class="nv">"if is_incremental()"</span>
    <span class="k">WHERE</span>  
        <span class="c1">-- 현재 시점 기준으로 1개월 전의 코호트: Month 0 리텐션 값만 Insert한다.  </span>
        <span class="p">(</span><span class="n">cohort_yyyymm</span> <span class="o">=</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'1'</span> <span class="k">MONTH</span> <span class="k">AND</span> <span class="n">month_n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>  
        <span class="c1">-- 현재 시점 기준으로 2개월 전의 코호트: Month 1 리텐션 값만 Insert한다.  </span>
        <span class="k">OR</span> <span class="p">(</span><span class="n">cohort_yyyymm</span> <span class="o">=</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'2'</span> <span class="k">MONTH</span> <span class="k">AND</span> <span class="n">month_n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>  
        <span class="c1">-- 현재 시점 기준으로 3개월 전의 코호트: Month 2 리텐션 값만 Insert한다.  </span>
        <span class="k">OR</span> <span class="p">(</span><span class="n">cohort_yyyymm</span> <span class="o">=</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'3'</span> <span class="k">MONTH</span> <span class="k">AND</span> <span class="n">month_n</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span>  
        <span class="c1">-- 현재 시점 기준으로 4개월 전의 코호트: Month 3 리텐션 값만 Insert한다.  </span>
        <span class="k">OR</span> <span class="p">(</span><span class="n">cohort_yyyymm</span> <span class="o">=</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'4'</span> <span class="k">MONTH</span> <span class="k">AND</span> <span class="n">month_n</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span>  
        <span class="c1">-- 현재 시점 기준으로 5개월 전의 코호트: Month 4 리텐션 값만 Insert한다.  </span>
        <span class="k">OR</span> <span class="p">(</span><span class="n">cohort_yyyymm</span> <span class="o">=</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'5'</span> <span class="k">MONTH</span> <span class="k">AND</span> <span class="n">month_n</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>  
        <span class="c1">-- 현재 시점 기준으로 6개월 전의 코호트: Month 5 리텐션 값만 Insert한다.  </span>
        <span class="k">OR</span> <span class="p">(</span><span class="n">cohort_yyyymm</span> <span class="o">=</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'6'</span> <span class="k">MONTH</span> <span class="k">AND</span> <span class="n">month_n</span> <span class="o">=</span> <span class="mi">5</span><span class="p">)</span>  
        <span class="c1">-- 현재 시점 기준으로 7개월 전의 코호트: Month 6 리텐션 값만 Insert한다.  </span>
        <span class="k">OR</span> <span class="p">(</span><span class="n">cohort_yyyymm</span> <span class="o">=</span> <span class="n">DATE_TRUNC</span><span class="p">(</span><span class="s1">'MONTH'</span><span class="p">,</span> <span class="k">CURRENT_DATE</span><span class="p">)</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'7'</span> <span class="k">MONTH</span> <span class="k">AND</span> <span class="n">month_n</span> <span class="o">=</span> <span class="mi">6</span><span class="p">)</span>  
    <span class="nv">"endif"</span>
    <span class="k">ORDER</span> <span class="k">BY</span>  
        <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>  
<span class="p">)</span>
</code></pre></div></div>

<p><strong>STEP 8) 출력한다.</strong></p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span>  
    <span class="o">*</span>  
<span class="k">FROM</span>  
    <span class="n">CTE_monthly_retention_inserted</span>  
<span class="p">;</span>
</code></pre></div></div>

<h1 id="6-결론">6. 결론</h1>

<p>Data Mart나 Batch Query에 대한 이론은 누구나 쉽게 온라인에서 공부할 수 있지만, 실제 Metrics 별로 모범이 될 만한 레퍼런스를 찾기가 어려운 것 같습니다. 특히, 리텐션의 경우 분명히 일회성 쿼리의 문제점을 해결해야 할 필요성이 클 것임에도 불구하고 저는 개인적으로 구글링을 통해서 적절한 레퍼런스를 전혀 찾지 못했습니다. 그래서 이참에 퍼블릭 레퍼런스를 제가 한 번 만들어보자는 결심이 들어 이렇게 글을 적어봤습니다.</p>

<p>그러나 저의 레퍼런스가 절대로 정답은 아닐 것입니다. Batch Query 모범 사례를 찾기 어렵다는 점은 그만큼 각 프로덕트의 도메인 특수성과 데이터의 형태가 극명하게 달라 절대불변의 정답이 없다는 의미일지도 모르겠습니다.</p>

<p>그러므로, 저의 사례는 가볍게 참고만 해주시고, 독자 분들께서 처한 다양한 특수성에 따라 가장 효율적인 리텐션 측정 환경을 구축하시길 바라겠습니다. 물론, 저의 논리적 오류나 개선 방향에 대한 피드백도 언제나 감사히 받겠습니다. 읽어주셔서 감사합니다.</p>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="Data Analysis" /><category term="SQL" /><category term="Data Warehouse" /><summary type="html"><![CDATA[코호트 리텐션의 의미와 중요성에 대해 말씀드리고, Batch Query를 사용하여 회원가입 월 코호트 별로 Monthly Range Retention을 계산하는 방법을 제시해드릴게요.]]></summary></entry><entry><title type="html">Data Warehouse #06</title><link href="http://localhost:4000/data-warehouse-06/" rel="alternate" type="text/html" title="Data Warehouse #06" /><published>2023-12-19T00:00:00+09:00</published><updated>2023-12-19T00:00:00+09:00</updated><id>http://localhost:4000/data-warehouse-06</id><content type="html" xml:base="http://localhost:4000/data-warehouse-06/"><![CDATA[<blockquote>
  <p>In this article, I’ll summarize key takeaways from:</p>
  <ul>
    <li>SECTION 06. Dimensions</li>
  </ul>
</blockquote>

<h3 id="disclaimer">DISCLAIMER</h3>
<blockquote>
  <p>This article is a compilation of key takeaways after completing <a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Data Warehouse — The Ultimate Guide</a> on Udemy. However, it may be challenging to achieve a comprehensive and deep understanding of Data Warehouse solely through this article. For your in-depth learning, please take the course, which is an excellent resource, and I personally highly recommend it to those who are eager to master data warehousing, dimensional modeling, and the ETL process.</p>
</blockquote>

<p><img src="/assets/2023-12-19-data-warehouse-06/data-warehouse.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Source</a></p>
</blockquote>

<h1 id="dimension-tables">Dimension Tables</h1>

<ul>
  <li>A role of “<strong>group &amp; filter</strong>”</li>
  <li>Always has a <strong>PK(Primary Key)</strong>.
    <ul>
      <li>Recommended to iuse a <strong>Surrogate Key</strong>!
        <ul>
          <li>because a Natural Key may or may not have null values.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Number of Rows &amp; Columns (compared to Fact Tables)
    <ul>
      <li>Number of Rows ⬇️</li>
      <li>Number of Columns ⬆️ (with descriptive attributes)</li>
    </ul>
  </li>
</ul>

<p><img src="/assets/2023-12-19-data-warehouse-06/dimension-tables.png" alt="" /></p>

<h1 id="date-dimensions">Date Dimensions</h1>

<ul>
  <li>One of the most common &amp; important dimensions</li>
  <li>Contains date-related features
    <pre><code class="language-plain">Year, Quarter, Month(Name &amp; Number), Week, Day, Weekday(Name &amp; Number), etc.
Combination: Year-quarter, Year-Month, etc.
</code></pre>
  </li>
  <li>Surrogate Key: <strong><code class="language-plaintext highlighter-rouge">YYYYMMDD</code></strong> (Integer Type)
    <ul>
      <li>The recommended way to fill null values: <code class="language-plaintext highlighter-rouge">NULL</code> dates in Source → <code class="language-plaintext highlighter-rouge">19000101</code> in Dimensions</li>
    </ul>
  </li>
</ul>

<p><img src="/assets/2023-12-19-data-warehouse-06/date-dimensions.png" alt="" /></p>

<ul>
  <li>Date Dimensions can be populated in advance. (for the next 5 or 10 years, for example.)</li>
  <li>Don’t combine time with date!
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Time</code> should be a separate dimension from <code class="language-plaintext highlighter-rouge">Date</code>.</li>
    </ul>
  </li>
  <li>Date Feature Examples</li>
</ul>

<table>
  <thead>
    <tr>
      <th><strong>Type</strong></th>
      <th><strong>Examples</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Number &amp; Text</td>
      <td>January / 1</td>
    </tr>
    <tr>
      <td>Long &amp; Abbreviated</td>
      <td>January / Jan / Monday / Mon</td>
    </tr>
    <tr>
      <td>Combinations of Features</td>
      <td>Q1 / 2022-Q1</td>
    </tr>
    <tr>
      <td>Fiscal Dates</td>
      <td>Fiscal Year, etc.</td>
    </tr>
    <tr>
      <td>Flags</td>
      <td>Weekend, Holiday, etc.</td>
    </tr>
  </tbody>
</table>

<h1 id="nulls-in-dimensions">Nulls in Dimensions</h1>

<h3 id="promotion_fk"><code class="language-plaintext highlighter-rouge">promotion_FK</code></h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">NULL</code> values must be avoided so that they can <strong>appear in JOINs</strong>!</li>
</ul>

<p><img src="/assets/2023-12-19-data-warehouse-06/nulls-in-dimensions-1.png" alt="" /></p>

<h3 id="replace-nulls-with-descriptive-values">Replace Nulls with descriptive values!</h3>
<ul>
  <li>More understandable for business users</li>
  <li>Values appear in aggregations in BI tools</li>
</ul>

<p><img src="/assets/2023-12-19-data-warehouse-06/nulls-in-dimensions-2.png" alt="" /></p>

<h1 id="hierarchies-in-dimensions">Hierarchies in Dimensions</h1>

<h3 id="snowflake-schema">Snowflake Schema</h3>
<ul>
  <li>Should be avoided in Data Mart
    <ul>
      <li>👍 Good for “<strong>Normalization</strong>”</li>
      <li>👎 Bad for “<strong>Query Performance (Read)</strong>”</li>
    </ul>
  </li>
</ul>

<p><img src="/assets/2023-12-19-data-warehouse-06/hierarchies-in-dimensions-1.png" alt="" /></p>

<h3 id="star-schema">Star Schema</h3>
<ul>
  <li><strong>Denormalized</strong> &amp; <strong>Flattened</strong></li>
</ul>

<p><img src="/assets/2023-12-19-data-warehouse-06/hierarchies-in-dimensions-2.png" alt="" /></p>

<h3 id="consider-combinations-if-helpful">Consider combinations if helpful!</h3>

<p><img src="/assets/2023-12-19-data-warehouse-06/hierarchies-in-dimensions-3.png" alt="" /></p>

<h1 id="conformed-dimensions">Conformed Dimensions</h1>

<p><strong>A Confirmed Dimension is a dimension shared by multiple fact tables or stars.</strong></p>
<ul>
  <li>Used to compare facts across different fact tables.</li>
</ul>

<p><img src="/assets/2023-12-19-data-warehouse-06/conformed-dimensions-1.png" alt="" /></p>

<p><img src="/assets/2023-12-19-data-warehouse-06/conformed-dimensions-2.png" alt="" /></p>

<p><strong>The same granularity is not necessary, and a different scope of FK can be possible!</strong></p>

<p><img src="/assets/2023-12-19-data-warehouse-06/conformed-dimensions-3.png" alt="" /></p>

<h1 id="degenerate-dimensions">Degenerate Dimensions</h1>

<p><strong>A Degenerate Dimension is a dimension that has no attributes or descriptive information, but only a single identifier or key.</strong></p>
<ul>
  <li>Used to simplify fact tables by eliminating the need for a separate dimension table.</li>
  <li>It can be still useful in the future, so we don’t just drop it.</li>
  <li>Examples: invoice number, billing number, order id, etc.</li>
  <li>with a suffix of <strong><code class="language-plaintext highlighter-rouge">_DD</code></strong></li>
</ul>

<p><img src="/assets/2023-12-19-data-warehouse-06/degenerate-dimensions.png" alt="" /></p>

<h1 id="junk-dimensions">Junk Dimensions</h1>

<p><strong>A Junk Dimension is a dimension with various flags or indicators with low cardinality.</strong></p>
<ul>
  <li>We call it <code class="language-plaintext highlighter-rouge">Junk Dimension</code> only internally. When talking to business users, we can refer to it as the “<strong>Transactional Indicator Dimension</strong>”.</li>
  <li>If there are too many combination cases for the attributes, extract only existing combinations of the fact table.</li>
</ul>

<blockquote>
  <p>💡 <code class="language-plaintext highlighter-rouge">Junk Dimension</code> is a concept in data warehousing that involves <strong>combining low-cardinality fields or attributes into a single-dimension table</strong>. These low-cardinality fields may represent different categories or flags that have a limited number of possible values. By consolidating these attributes into a single table, a Junk Dimension reduces the number of dimension tables in a data warehouse. <a href="https://www.dremio.com/wiki/junk-dimension/">(Source)</a></p>
</blockquote>

<p><img src="/assets/2023-12-19-data-warehouse-06/junk-dimensions.png" alt="" /></p>

<h1 id="role-playing-dimensions">Role-playing Dimensions</h1>

<p><strong>A Role-playing Dimension is a dimension that is referenced multiple times by a fact table.</strong></p>

<p><img src="/assets/2023-12-19-data-warehouse-06/role-playing-dimensions.png" alt="" /></p>

<p><strong>What are Role-playing Dimensions?</strong></p>
<ul>
  <li>Role-playing Dimensions are dimensions that are used more than once in a fact table, each time with a different meaning or role.</li>
  <li>They are typically derived from the same source dimension table, but with different aliases or prefixes to indicate their role.
    <ul>
      <li>For example, a date dimension table can be used to create <code class="language-plaintext highlighter-rouge">order_date</code>, <code class="language-plaintext highlighter-rouge">ship_date</code>, and <code class="language-plaintext highlighter-rouge">delivery_date</code> dimensions in a fact table that records product sales.</li>
      <li>Each of these dimensions has the same structure and attributes, such as <code class="language-plaintext highlighter-rouge">year</code>, <code class="language-plaintext highlighter-rouge">month</code>, <code class="language-plaintext highlighter-rouge">quarter</code>, <code class="language-plaintext highlighter-rouge">day</code>, etc., but they represent different aspects of the sales process.</li>
    </ul>
  </li>
</ul>

<p><strong>Why are Role-playing Dimensions challenging?</strong></p>
<ul>
  <li>(1) Increase the complexity and size of the fact table.
    <ul>
      <li>Each Role-playing Dimension adds more columns and joins to the fact table.</li>
    </ul>
  </li>
  <li>(2) Create confusion and inconsistency among users and analysts.
    <ul>
      <li>Different roles may have different meanings or interpretations for the same dimension attribute.</li>
    </ul>
  </li>
  <li>(3) Difficult to maintain and update.
    <ul>
      <li>Any change in the source dimension table may affect multiple Role-playing Dimensions and fact tables.</li>
    </ul>
  </li>
</ul>

<p><strong>How do you design Role-playing Dimensions?</strong></p>
<ul>
  <li>(1) Use a single-dimension table for each Role-playing Dimension and join it to the fact table using different foreign keys.
    <ul>
      <li><strong>Example</strong>: a date dimension table can be joined to a sales fact table using <code class="language-plaintext highlighter-rouge">order_date_key</code>, <code class="language-plaintext highlighter-rouge">ship_date_key</code>, and <code class="language-plaintext highlighter-rouge">delivery_date_key</code> as foreign keys.</li>
      <li><strong>Pros</strong>: simplicity and consistency</li>
      <li><strong>Cons</strong>: redundancy and performance issues (The same dimension table is duplicated and joined multiple times to the fact table.)</li>
    </ul>
  </li>
  <li>(2) Use a single dimension table for each Role-playing Dimension, but with different views or aliases to indicate their role.
    <ul>
      <li><strong>Example</strong>: a date dimension table can be viewed or aliased as <code class="language-plaintext highlighter-rouge">order_date</code>, <code class="language-plaintext highlighter-rouge">ship_date</code>, and <code class="language-plaintext highlighter-rouge">delivery_date</code> in the data warehouse schema, and joined to the fact table using the appropriate view or alias name.</li>
      <li><strong>Pros</strong>: reducing redundancy and improving performance (The same dimension table is not duplicated and joined multiple times to the fact table.)</li>
      <li><strong>Cons</strong>: complexity and dependency (The views or aliases need to be created and maintained in the data warehouse schema.)</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p><a href="https://www.linkedin.com/advice/3/how-do-you-deal-changing-business-requirements">Source</a></p>
</blockquote>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="SQL" /><category term="Data Warehouse" /><summary type="html"><![CDATA[In this article, I’ll summarize key takeaways from: SECTION 06. Dimensions]]></summary></entry><entry><title type="html">Data Warehouse #03</title><link href="http://localhost:4000/data-warehouse-03/" rel="alternate" type="text/html" title="Data Warehouse #03" /><published>2023-12-06T00:00:00+09:00</published><updated>2023-12-06T00:00:00+09:00</updated><id>http://localhost:4000/data-warehouse-03</id><content type="html" xml:base="http://localhost:4000/data-warehouse-03/"><![CDATA[<blockquote>
  <p>In this article, I’ll summarize key takeaways from:</p>
  <ul>
    <li>SECTION 03. Data Warehouse Architecture</li>
  </ul>
</blockquote>

<h3 id="disclaimer">DISCLAIMER</h3>

<blockquote>
  <p>This article is a compilation of key takeaways after completing  <a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Data Warehouse — The Ultimate Guide</a>  on Udemy. However, it may be challenging to achieve a comprehensive and deep understanding of Data Warehouse solely through this article. For your in-depth learning, please take the course, which is an excellent resource, and I personally highly recommend it to those who are eager to master data warehousing, dimensional modeling, and the ETL process.</p>
</blockquote>

<p><img src="/assets/2023-12-06-data-warehouse-03/data-warehouse.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Source</a></p>
</blockquote>

<h1 id="data-lake-vs-data-warehouse">Data Lake vs. Data Warehouse</h1>

<p><img src="/assets/2023-12-06-data-warehouse-03/data-lake-vs-data-warehouse.webp" alt="" /></p>

<h1 id="pentaho--postgresql">Pentaho &amp; PostgreSQL</h1>

<h3 id="pentaho">Pentaho</h3>

<ul>
  <li><strong>ETL Tool</strong></li>
  <li><a href="https://www.hitachivantara.com/en-us/products/pentaho-plus-platform/data-integration-analytics/pentaho-community-edition.html">Pentaho Community Edition Download</a></li>
  <li><code class="language-plaintext highlighter-rouge">pdi-ce-9.4.0.0-343.zip</code></li>
  <li>After unzipping the downloaded file, click the  <code class="language-plaintext highlighter-rouge">spoon</code>  file.</li>
</ul>

<h3 id="postgresql">PostgreSQL</h3>

<ul>
  <li><strong>Database Management System</strong></li>
  <li><a href="https://www.postgresql.org/download/">PostgreSQL Download</a></li>
  <li>After installing the downloaded file, run  <code class="language-plaintext highlighter-rouge">PGAdmin</code>.</li>
</ul>

<h1 id="the-layers-of-a-data-warehouse">The Layers of a Data Warehouse</h1>

<p><img src="/assets/2023-12-06-data-warehouse-03/The Layers of a Data Warehouse.webp" alt="" /></p>

<h3 id="data-sources--the-staging-layer">Data Sources → The Staging Layer</h3>
<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">E</code></strong> of ETL Process</li>
  <li><strong>“The Landing Zone Extracted Data”</strong>
    <ul>
      <li>Data in Tables and on a Separate Database</li>
      <li>As little “toughing” as possible</li>
      <li>We don’t charge the source systems.</li>
      <li>Temporary or Persistent Staging Layers</li>
    </ul>
  </li>
  <li>Short Time on the Source Systems</li>
  <li>Quickly Extracted</li>
  <li>Move the Data into Relational Database</li>
  <li>Start Transformations from There</li>
  <li>Minimal Transformation</li>
</ul>

<h3 id="the-staging-layer--the-cleansing-layer">The Staging Layer → The Cleansing Layer</h3>
<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">TL</code></strong> of ETL Process</li>
</ul>

<h3 id="the-cleansing-layer--core--access-layer--data-warehouse">The Cleansing Layer → Core / Access Layer / Data Warehouse</h3>
<ul>
  <li><strong>“Core”</strong>
    <ul>
      <li>Business Logic</li>
    </ul>
  </li>
</ul>

<h3 id="core--access-layer--data-warehouse--data-mart">Core / Access Layer / Data Warehouse → Data Mart</h3>
<ul>
  <li><strong>“Data Mart”</strong>
    <ul>
      <li>Subset of a Data Warehouse</li>
      <li>Dimensional Model</li>
      <li>Can be Further Aggregated.</li>
      <li>Usability + Acceptance</li>
      <li>Performance</li>
    </ul>
  </li>
  <li>Can Vary depending on Each Tool, Each Department, Each Region, Each Usecase</li>
</ul>

<h1 id="in-memory-databases">In-memory Databases</h1>

<h3 id="traditional-databases">Traditional Databases</h3>

<p><img src="/assets/2023-12-06-data-warehouse-03/traditional-databases.webp" alt="" /></p>

<h3 id="in-memory-databases-1">In-memory Databases</h3>

<p><img src="/assets/2023-12-06-data-warehouse-03/in-memory-databases.webp" alt="" /></p>

<ul>
  <li>Highly Optimized for Query Performance</li>
  <li>Good for Analytics &amp; High Query Volume</li>
  <li>Usually Used for Data Marts</li>
  <li>Relational &amp; Non-relational</li>
  <li>Techniques: Columnar Storage, Parallel Query Plans, and Others</li>
</ul>

<h1 id="demo-setting-up-the-staging-area-with-postgresql">Demo: Setting up the Staging Area with PostgreSQL</h1>

<p><img src="/assets/2023-12-06-data-warehouse-03/pgadmin4.webp" alt="" /></p>
<ul>
  <li>Created a  <strong>database</strong>  named  <code class="language-plaintext highlighter-rouge">DataWarehouseX</code>.</li>
  <li>Created a  <strong>schema</strong>  named  <code class="language-plaintext highlighter-rouge">Staging</code>.</li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="SQL" /><category term="Data Warehouse" /><summary type="html"><![CDATA[In this article, I’ll summarize key takeaways from: SECTION 03. Data Warehouse Architecture]]></summary></entry><entry><title type="html">Data Warehouse #01-02</title><link href="http://localhost:4000/data-warehouse-01-02/" rel="alternate" type="text/html" title="Data Warehouse #01-02" /><published>2023-12-06T00:00:00+09:00</published><updated>2023-12-06T00:00:00+09:00</updated><id>http://localhost:4000/data-warehouse-01-02</id><content type="html" xml:base="http://localhost:4000/data-warehouse-01-02/"><![CDATA[<blockquote>
  <p>In this article, I’ll summarize key takeaways from:</p>
  <ul>
    <li>SECTION 01. Introduction</li>
    <li>SECTION 02. Data Warehouse Basics</li>
  </ul>
</blockquote>

<h3 id="disclaimer">DISCLAIMER</h3>

<blockquote>
  <p>This article is a compilation of key takeaways after completing  <a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Data Warehouse — The Ultimate Guide</a>  on Udemy. However, it may be challenging to achieve a comprehensive and deep understanding of Data Warehouse solely through this article. For your in-depth learning, please take the course, which is an excellent resource, and I personally highly recommend it to those who are eager to master data warehousing, dimensional modeling, and the ETL process.</p>
</blockquote>

<p><img src="/assets/2023-12-06-data-warehouse-01-02/data-warehouse.webp" alt="" /></p>
<blockquote>
  <p><a href="https://www.udemy.com/course/data-warehouse-the-ultimate-guide/">Source</a></p>
</blockquote>

<h1 id="what-will-you-learn">What Will You Learn?</h1>

<ul>
  <li>Data Warehouse Basics</li>
  <li>Data Warehouse Architecture</li>
  <li>Dimensional Modeling</li>
  <li>Fact Tables</li>
  <li>Dimension Tables</li>
  <li>Slowly Changing Dimensions</li>
  <li>ETL Process</li>
  <li>ETL Tools</li>
  <li>Case Study: Create a Data Warehouse</li>
  <li>ETL vs. ELT</li>
  <li>Using a Data Warehouse</li>
  <li>Optimizing a Data Warehouse</li>
  <li>The Modern Data Warehouse</li>
</ul>

<h1 id="why-do-we-need-a-data-warehouse">Why Do We Need a Data Warehouse?</h1>

<p><img src="/assets/2023-12-06-data-warehouse-01-02/Why Do We Need a Data Warehouse.webp" alt="" /></p>

<h1 id="what-is-a-data-warehouse">What is a Data Warehouse?</h1>

<p>🗣️  <strong>A database used and optimized for analytical purposes.</strong></p>
<ul>
  <li>User-friendly</li>
  <li>Fast query performance</li>
  <li>Enabling data analysis</li>
</ul>

<h1 id="etl">ETL</h1>

<ul>
  <li><strong>Extract</strong>  +  <strong>Transform</strong>  +  <strong>Load</strong>  →  <strong><code class="language-plaintext highlighter-rouge">Data Warehouse</code></strong></li>
</ul>

<p><img src="/assets/2023-12-06-data-warehouse-01-02/etl-flowchart.webp" alt="" /></p>

<h1 id="goals-of-data-warehouse">Goals of Data Warehouse</h1>
<ul>
  <li>Centralized and Consistent Location for Data</li>
  <li>Data Must be Accessible Fast (<strong>Query Performance</strong>)</li>
  <li>User-friendly (<strong>Easy to Understand</strong>)</li>
  <li>Must Load Data Consistently and repeatedly (<strong>ETL</strong>)</li>
  <li><strong>Reporting</strong>  and  <strong>Data Visualization</strong>  Built on Top</li>
</ul>

<h1 id="understanding-a-data-warehouse">Understanding a Data Warehouse</h1>

<p><img src="/assets/2023-12-06-data-warehouse-01-02/data-warehouse-flowchart.webp" alt="" /></p>

<h1 id="business-intelligence">Business Intelligence</h1>
<ul>
  <li>We Create a Data Warehouse for  <strong>Business Intelligence</strong>!</li>
</ul>

<hr />

<h2 id="published-by-joshua-kim"><em>Published by</em> Joshua Kim</h2>
<p><img src="/assets/profile/joshua-profile.png" alt="Joshua Kim" /></p>]]></content><author><name></name></author><category term="SQL" /><category term="Data Warehouse" /><summary type="html"><![CDATA[In this article, I’ll summarize key takeaways from: SECTION 01. Introduction SECTION 02. Data Warehouse Basics]]></summary></entry></feed>